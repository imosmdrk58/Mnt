{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Webtoon Platform\n\n## Overview\nThis platform is a full-scale web application for publishing and consuming Webtoons, Manga, and Novels. It aims to combine features from popular content platforms with a modern UI/UX, scalable architecture, and monetization via coins, ads, and premium access. The project's vision is to create a robust and engaging environment for both content creators and readers.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter\n- **State Management**: TanStack Query (React Query)\n- **UI Framework**: Radix UI primitives with custom Shadcn/ui components\n- **Styling**: Tailwind CSS with CSS variables\n- **Build Tool**: Vite\n\n### Backend\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **API**: RESTful API with Multer for file uploads\n- **Database ORM**: Drizzle ORM\n- **Authentication**: Custom Passport.js authentication with PostgreSQL session storage\n- **Session Management**: Express sessions with connect-pg-simple\n\n### Database Schema\nPostgreSQL is used with entities including:\n- **Users**: Authentication, profile, coins, creator status\n- **Series**: Multi-format content (webtoon, manga, novel) with metadata\n- **Chapters**: Individual content pieces with files/text, premium pricing\n- **Social Features**: Comments, reviews, follows, bookmarks\n- **Monetization**: Transactions, premium content unlock, coin system\n- **Groups**: Collaborative content creation with role-based permissions\n- **Progress Tracking**: Reading progress per user/series\n\n### Key Components\n- **Content Management System**: Supports webtoons (vertical scroll), manga (paged), and novels (text-based) with drag-and-drop uploads, an advanced markdown editor, scheduling, and content flagging (NSFW, premium).\n- **Reader Experience**: Adaptive readers for each content type (infinite scroll for webtoon, page navigation for manga, customizable text reader for novel), automatic progress tracking, and customizable reading settings.\n- **User Management**: Secure username/password authentication (scrypt), user profiles, coin system for premium content access, and integrated social features.\n- **Creator Tools**: Dashboard for analytics, series management, format-specific upload workflows, and group collaboration features.\n\n## External Dependencies\n\n### Database\n- **Neon Database**: PostgreSQL hosting\n- **Connection**: @neondatabase/serverless for WebSocket-based connection\n\n### Authentication\n- **Passport.js**: For local username/password authentication\n- **Scrypt**: For password hashing and security\n- **connect-pg-simple**: For PostgreSQL-backed session storage\n\n### File Storage\n- **Multer**: For local filesystem file uploads (JPEG, PNG, WebP up to 10MB)\n\n### UI Components\n- **Radix UI**: Accessible component primitives\n- **Lucide React**: Icon library\n- **Tailwind CSS**: Utility-first CSS framework\n\n## Recent Changes\n\n**CRITICAL Installation Loop and Database Table Fixes (COMPLETE - August 3, 2025)**\n- ✓ Fixed Installation Loop Issue: Setup status now correctly updates to \"installed\" after successful installation\n- ✓ Fixed Database Table Creation: All 18 tables (series, chapters, groups, comments, etc.) now get created during installation instead of just 2\n- ✓ Enhanced Vercel API Function: Complete table creation in serverless environment without Drizzle CLI dependency\n- ✓ Improved Cache Management: Reduced setup status cache duration from 30s to 5s for more responsive status checks\n- ✓ Enhanced Frontend Polling: Aggressive status polling after installation completion to detect setup completion faster\n- ✓ Complete Database Schema: All enums (series_type, series_status, chapter_status) and foreign key relationships properly created\n- ✓ Proper Admin User Creation: Admin user with creator privileges properly inserted during installation\n- ✓ Robust Error Handling: Better error messages and fallback handling for both local and Vercel environments\n\n**Previous Vercel Deployment Fixes (COMPLETE - August 3, 2025)**\n- ✓ Fixed Vercel Runtime Error: Updated vercel.json to use @vercel/node instead of deprecated nodejs18.x runtime\n- ✓ Fixed Raw Code Display: Corrected Vercel configuration to serve from dist/public for static files\n- ✓ Fixed Setup API 404/500 Error: Created Vercel serverless functions with ES modules and dynamic imports\n- ✓ Added Individual API Endpoints: status.js, install.js, validate-db.js, test-current-db.js using export default\n- ✓ Fixed Favicon 404: Added proper favicon.svg file and routing configuration\n- ✓ Updated Vercel Routes: Specific routing for setup API endpoints and static assets\n- ✓ Added Client-Side Setup Guard: Automatic redirect to /setup when setup is incomplete\n- ✓ Enhanced Troubleshooting: Updated setup.md with comprehensive Vercel-specific troubleshooting steps\n- ✓ Dependency Management: Added bcrypt for password hashing in serverless functions\n- ✓ Fixed Method Not Allowed: Standardized API format between local server and Vercel functions\n- ✓ Route Consistency: Both environments now use identical simplified API calls","size_bytes":5208},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\nimport { Request, Response, NextFunction } from 'express';\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || 'your-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !user.password || !(await comparePasswords(password, user.password))) {\n          return done(null, false, { message: 'Invalid username or password' });\n        }\n        return done(null, user);\n      } catch (error) {\n        // During installer mode, database might not be available\n        if (error instanceof Error && error.message.includes('Database not initialized')) {\n          return done(null, false, { message: 'Setup required - please complete installation' });\n        }\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      // During installer mode, database might not be available\n      if (error instanceof Error && error.message.includes('Database not initialized')) {\n        done(null, null); // No user session during installer mode\n      } else {\n        done(error);\n      }\n    }\n  });\n\n  // Register endpoint\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, email, password, firstName, lastName } = req.body;\n      \n      if (!username || !email || !password) {\n        return res.status(400).json({ message: \"Username, email and password are required\" });\n      }\n\n      // Check if user already exists\n      const existingUserByEmail = await storage.getUserByEmail(email);\n      if (existingUserByEmail) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      const existingUserByUsername = await storage.getUserByUsername(username);\n      if (existingUserByUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      // Create new user\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n      });\n\n      // Log them in\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          coinBalance: user.coinBalance,\n          isCreator: user.isCreator,\n          isEliteReader: user.isEliteReader,\n          followersCount: user.followersCount,\n        });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      if (error instanceof Error && error.message.includes('Database not initialized')) {\n        res.status(503).json({ message: \"Setup required - please complete installation first\" });\n      } else {\n        res.status(500).json({ message: \"Registration failed\" });\n      }\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n      \n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          coinBalance: user.coinBalance,\n          isCreator: user.isCreator,\n          isEliteReader: user.isEliteReader,\n          followersCount: user.followersCount,\n        });\n      });\n    })(req, res, next);\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated() || !req.user) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    \n    res.json({\n      id: req.user.id,\n      username: req.user.username,\n      email: req.user.email,\n      firstName: req.user.firstName,\n      lastName: req.user.lastName,\n      profileImageUrl: req.user.profileImageUrl,\n      coinBalance: req.user.coinBalance,\n      isCreator: req.user.isCreator,\n      isEliteReader: req.user.isEliteReader,\n      followersCount: req.user.followersCount,\n    });\n  });\n}\n\n// Middleware to require authentication for protected routes\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\n// Middleware to optionally get user (doesn't require auth)\nexport function optionalAuth(req: Request, res: Response, next: NextFunction) {\n  // User will be available in req.user if authenticated, null otherwise\n  next();\n}","size_bytes":6761},"server/db.ts":{"content":"import { Pool as NeonPool, neonConfig } from '@neondatabase/serverless';\nimport { Pool as PgPool } from 'pg';\nimport { drizzle as drizzleNeon } from 'drizzle-orm/neon-serverless';\nimport { drizzle as drizzlePg } from 'drizzle-orm/node-postgres';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\n// For installer mode, allow running without DATABASE_URL initially\nexport let pool: NeonPool | PgPool | null = null;\nexport let db: any = null;\n\nfunction isNeonUrl(databaseUrl: string): boolean {\n  return databaseUrl.includes('neon.tech') || databaseUrl.includes('neon.dev');\n}\n\nexport function initializeDatabase(databaseUrl?: string) {\n  const connectionUrl = databaseUrl || process.env.DATABASE_URL;\n  \n  if (!connectionUrl) {\n    console.warn(\"Database not initialized - installer mode active\");\n    return false;\n  }\n\n  try {\n    const isNeon = isNeonUrl(connectionUrl);\n    \n    if (isNeon) {\n      // Use Neon serverless for Neon databases\n      pool = new NeonPool({ connectionString: connectionUrl });\n      db = drizzleNeon({ client: pool as NeonPool, schema });\n      console.log(\"Database initialized with Neon serverless driver\");\n    } else {\n      // Use regular pg Pool for other PostgreSQL providers (Supabase, etc.)\n      pool = new PgPool({ connectionString: connectionUrl });\n      db = drizzlePg(pool as PgPool, { schema });\n      console.log(\"Database initialized with standard PostgreSQL driver\");\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(\"Failed to initialize database:\", error);\n    return false;\n  }\n}\n\n// Initialize database on module load if DATABASE_URL is available\nif (process.env.DATABASE_URL) {\n  initializeDatabase();\n}\n\nexport { schema };","size_bytes":1748},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupMiddleware } from \"./middleware/setupMiddleware\";\nimport { initializeDatabase } from \"./db\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize database connection on startup if DATABASE_URL is available\n  initializeDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2234},"server/installManager.ts":{"content":"import { Pool as NeonPool, neonConfig } from '@neondatabase/serverless';\nimport { Pool as PgPool } from 'pg';\nimport { drizzle as drizzleNeon } from 'drizzle-orm/neon-serverless';\nimport { drizzle as drizzlePg } from 'drizzle-orm/node-postgres';\nimport { sql } from 'drizzle-orm';\nimport { scrypt, randomBytes } from 'crypto';\nimport { promisify } from 'util';\nimport * as schema from \"@shared/schema\";\nimport type { InstallerSetup } from \"@shared/schema\";\nimport ws from \"ws\";\n\nconst scryptAsync = promisify(scrypt);\nneonConfig.webSocketConstructor = ws;\n\nexport class InstallManager {\n  private pool: NeonPool | PgPool | null = null;\n  private db: any = null;\n  private isNeonDatabase = false;\n\n  private isNeonUrl(databaseUrl: string): boolean {\n    return databaseUrl.includes('neon.tech') || databaseUrl.includes('neon.dev');\n  }\n\n  private isSupabaseUrl(databaseUrl: string): boolean {\n    return databaseUrl.includes('supabase.co');\n  }\n\n  async validateDatabaseConnection(databaseUrl: string): Promise<{ valid: boolean; error?: string }> {\n    if (!databaseUrl || databaseUrl.trim() === '') {\n      return { valid: false, error: \"Database URL is required\" };\n    }\n\n    let testPool: NeonPool | PgPool | null = null;\n\n    try {\n      // Validate URL format first\n      const url = new URL(databaseUrl);\n      if (!['postgres:', 'postgresql:'].includes(url.protocol)) {\n        return { valid: false, error: \"Invalid database protocol. Must be postgres:// or postgresql://\" };\n      }\n\n      const isNeon = this.isNeonUrl(databaseUrl);\n      console.log(`Testing database connection (${isNeon ? 'Neon' : 'Standard PostgreSQL'}):`, databaseUrl.replace(/:\\/\\/[^@]+@/, '://***:***@'));\n      \n      if (isNeon) {\n        // Use Neon serverless for Neon databases\n        testPool = new NeonPool({ \n          connectionString: databaseUrl,\n          connectionTimeoutMillis: 15000,\n          idleTimeoutMillis: 5000,\n        });\n        \n        const testDb = drizzleNeon({ client: testPool as NeonPool, schema });\n        await testDb.execute(sql`SELECT 1 as test`);\n      } else {\n        // Use regular pg Pool for other PostgreSQL providers (Supabase, etc.)\n        testPool = new PgPool({ \n          connectionString: databaseUrl,\n          connectionTimeoutMillis: 15000,\n          idleTimeoutMillis: 5000,\n          max: 1,\n          ssl: { rejectUnauthorized: false }, // Allow SSL connections for cloud databases\n        });\n        \n        // Test connection with a simple query using the pool directly\n        const client = await testPool.connect();\n        await client.query('SELECT 1 as test');\n        client.release();\n      }\n      \n      console.log(\"Database connection validated successfully\");\n      return { valid: true };\n    } catch (error) {\n      console.error(\"Database validation failed:\", error);\n      \n      // Provide more specific error messages\n      if (error instanceof Error) {\n        const errorMessage = error.message.toLowerCase();\n        \n        if (errorMessage.includes('enotfound') || errorMessage.includes('getaddrinfo')) {\n          // Check if this is a Supabase connection issue\n          if (this.isSupabaseUrl(databaseUrl)) {\n            return { valid: false, error: \"Cannot reach Supabase database from this environment. This may be due to network restrictions in the server environment. The database URL appears valid, but the hostname cannot be resolved from this server. You may need to use a different database provider or check if your Supabase project allows connections from this IP range.\" };\n          }\n          return { valid: false, error: \"Database hostname could not be resolved. Please verify the hostname in your connection string and check your internet connection.\" };\n        } else if (errorMessage.includes('econnrefused')) {\n          return { valid: false, error: \"Connection refused. The database server may be down or the port may be incorrect.\" };\n        } else if (errorMessage.includes('timeout') || errorMessage.includes('etimedout')) {\n          return { valid: false, error: \"Connection timeout. Please check your network connectivity and database availability.\" };\n        } else if (errorMessage.includes('authentication') || errorMessage.includes('password') || errorMessage.includes('login')) {\n          return { valid: false, error: \"Authentication failed. Please check your username and password.\" };\n        } else if (errorMessage.includes('econnreset')) {\n          return { valid: false, error: \"Connection reset. The database may be overloaded or have connection limits.\" };\n        } else if (errorMessage.includes('invalid') && errorMessage.includes('url')) {\n          return { valid: false, error: \"Invalid database URL format. Please check your connection string.\" };\n        } else if (errorMessage.includes('no pg_hba.conf entry')) {\n          return { valid: false, error: \"Database access denied. Please check your database access configuration.\" };\n        } else if (errorMessage.includes('does not exist')) {\n          return { valid: false, error: \"Database does not exist. Please verify the database name in your connection string.\" };\n        }\n      }\n      \n      return { valid: false, error: `Database connection failed: ${error instanceof Error ? error.message : 'Unknown error'}` };\n    } finally {\n      // Always clean up the test connection\n      if (testPool) {\n        try {\n          await testPool.end();\n        } catch (cleanupError) {\n          console.warn(\"Failed to cleanup test connection:\", cleanupError);\n        }\n      }\n    }\n  }\n\n  async initializeDatabase(databaseUrl: string): Promise<boolean> {\n    try {\n      this.isNeonDatabase = this.isNeonUrl(databaseUrl);\n      \n      if (this.isNeonDatabase) {\n        this.pool = new NeonPool({ connectionString: databaseUrl });\n        this.db = drizzleNeon({ client: this.pool as NeonPool, schema });\n      } else {\n        this.pool = new PgPool({ connectionString: databaseUrl });\n        this.db = drizzlePg(this.pool as PgPool, { schema });\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(\"Failed to initialize database:\", error);\n      return false;\n    }\n  }\n\n  async createTables(): Promise<boolean> {\n    if (!this.db) {\n      throw new Error(\"Database not initialized\");\n    }\n\n    try {\n      console.log(\"Creating database schema...\");\n      \n      // Use a simplified approach - create only essential tables for installation\n      // and let the application create the rest via migrations\n      \n      // Sessions table\n      await this.db.execute(sql`CREATE TABLE IF NOT EXISTS sessions (sid varchar PRIMARY KEY, sess jsonb NOT NULL, expire timestamp NOT NULL)`);\n      \n      await this.db.execute(sql`CREATE INDEX IF NOT EXISTS idx_session_expire ON sessions(expire)`);\n\n      // Config table\n      await this.db.execute(sql`CREATE TABLE IF NOT EXISTS config (id varchar PRIMARY KEY DEFAULT 'main_config', setup_complete boolean DEFAULT false, site_name varchar DEFAULT 'MangaVerse', admin_user_id varchar, installer_disabled boolean DEFAULT false, stripe_public_key varchar, stripe_secret_key varchar, logo_url varchar, favicon_url varchar, created_at timestamp DEFAULT now(), updated_at timestamp DEFAULT now())`);\n\n      // Users table\n      await this.db.execute(sql`CREATE TABLE IF NOT EXISTS users (id varchar PRIMARY KEY DEFAULT gen_random_uuid(), username varchar UNIQUE NOT NULL, email varchar UNIQUE NOT NULL, password varchar NOT NULL, first_name varchar, last_name varchar, profile_image_url varchar, coin_balance integer DEFAULT 0, is_creator boolean DEFAULT false, is_elite_reader boolean DEFAULT false, followers_count integer DEFAULT 0, email_verified boolean DEFAULT false, reset_token varchar, reset_token_expiry timestamp, creator_display_name text, creator_bio text, creator_portfolio_url text, creator_social_media_url text, creator_content_types text, creator_experience text, creator_motivation text, creator_application_status text, creator_application_date text, chapters_read integer DEFAULT 0, reading_streak integer DEFAULT 0, last_read_at timestamp, reading_dates text, settings text, created_at timestamp DEFAULT now(), updated_at timestamp DEFAULT now())`);\n\n      console.log(\"Basic tables created successfully\");\n      return true;\n    } catch (error) {\n      console.error(\"Failed to create tables:\", error);\n      return false;\n    }\n  }\n\n  async createAdminUser(username: string, email: string, password: string): Promise<string | null> {\n    if (!this.db) {\n      throw new Error(\"Database not initialized\");\n    }\n\n    try {\n      // Hash password with scrypt (using same format as auth.ts)\n      const salt = randomBytes(16).toString('hex');\n      const derivedKey = await scryptAsync(password, salt, 64) as Buffer;\n      const hashedPassword = `${derivedKey.toString('hex')}.${salt}`; // Fixed: hash.salt format\n\n      // Create admin user\n      const [user] = await this.db.insert(schema.users).values({\n        username,\n        email,\n        password: hashedPassword,\n        isCreator: true, // Make admin a creator by default\n        coinBalance: 10000, // Give admin some coins\n      }).returning();\n\n      console.log(`Admin user created successfully: ${username} (${user.id})`);\n      return user.id;\n    } catch (error) {\n      console.error(\"Failed to create admin user:\", error);\n      return null;\n    }\n  }\n\n  async completeSetup(setupData: {\n    siteName: string;\n    adminUserId: string;\n    stripePublicKey?: string;\n    stripeSecretKey?: string;\n    logoUrl?: string;\n    faviconUrl?: string;\n  }): Promise<boolean> {\n    if (!this.db) {\n      throw new Error(\"Database not initialized\");\n    }\n\n    try {\n      // Insert or update config to mark setup as complete\n      await this.db.insert(schema.config).values({\n        id: \"main_config\",\n        setupComplete: true,\n        siteName: setupData.siteName,\n        adminUserId: setupData.adminUserId,\n        stripePublicKey: setupData.stripePublicKey,\n        stripeSecretKey: setupData.stripeSecretKey,\n        logoUrl: setupData.logoUrl,\n        faviconUrl: setupData.faviconUrl,\n        installerDisabled: false,\n      }).onConflictDoUpdate({\n        target: schema.config.id,\n        set: {\n          setupComplete: true,\n          siteName: setupData.siteName,\n          adminUserId: setupData.adminUserId,\n          stripePublicKey: setupData.stripePublicKey,\n          stripeSecretKey: setupData.stripeSecretKey,\n          logoUrl: setupData.logoUrl,\n          faviconUrl: setupData.faviconUrl,\n          updatedAt: sql`now()`,\n        }\n      });\n      \n      // Set environment variables for this session\n      if (setupData.stripePublicKey) {\n        process.env.VITE_STRIPE_PUBLIC_KEY = setupData.stripePublicKey;\n      }\n      if (setupData.stripeSecretKey) {\n        process.env.STRIPE_SECRET_KEY = setupData.stripeSecretKey;\n      }\n\n      console.log(\"Setup completed successfully with configuration:\", {\n        siteName: setupData.siteName,\n        hasStripe: !!(setupData.stripePublicKey && setupData.stripeSecretKey),\n        hasLogo: !!setupData.logoUrl,\n      });\n      \n      return true;\n    } catch (error) {\n      console.error(\"Failed to complete setup:\", error);\n      return false;\n    }\n  }\n\n  async checkSetupStatus(): Promise<{ isSetup: boolean; config?: any }> {\n    if (!this.db) {\n      return { isSetup: false };\n    }\n\n    try {\n      const [config] = await this.db.select().from(schema.config).where(sql`id = 'main_config'`);\n      return {\n        isSetup: config?.setupComplete || false,\n        config: config || null\n      };\n    } catch (error) {\n      console.error(\"Failed to check setup status:\", error);\n      return { isSetup: false };\n    }\n  }\n\n  async performFullInstallation(setupData: InstallerSetup): Promise<{ success: boolean; error?: string; adminUserId?: string }> {\n    try {\n      // Step 1: Validate database connection\n      const dbValidation = await this.validateDatabaseConnection(setupData.databaseUrl);\n      if (!dbValidation.valid) {\n        return { success: false, error: dbValidation.error || \"Invalid database URL or connection failed\" };\n      }\n\n      // Step 2: Initialize database connection\n      const isInitialized = await this.initializeDatabase(setupData.databaseUrl);\n      if (!isInitialized) {\n        return { success: false, error: \"Failed to initialize database connection\" };\n      }\n\n      // Step 3: Create required tables\n      const tablesCreated = await this.createTables();\n      if (!tablesCreated) {\n        return { success: false, error: \"Failed to create database tables\" };\n      }\n\n      // Step 4: Create admin user\n      const adminUserId = await this.createAdminUser(\n        setupData.adminUsername,\n        setupData.adminEmail,\n        setupData.adminPassword\n      );\n      if (!adminUserId) {\n        return { success: false, error: \"Failed to create admin user\" };\n      }\n\n      // Step 5: Mark setup as complete with all configuration\n      const setupCompleted = await this.completeSetup({\n        siteName: setupData.siteName,\n        adminUserId,\n        stripePublicKey: setupData.stripePublicKey,\n        stripeSecretKey: setupData.stripeSecretKey,\n        logoUrl: setupData.logoUrl,\n        faviconUrl: setupData.faviconUrl,\n      });\n      if (!setupCompleted) {\n        return { success: false, error: \"Failed to complete setup configuration\" };\n      }\n\n      // Step 6: Set environment variable (in-memory for this session)\n      process.env.DATABASE_URL = setupData.databaseUrl;\n\n      return { success: true, adminUserId };\n    } catch (error) {\n      console.error(\"Installation failed:\", error);\n      return { success: false, error: error instanceof Error ? error.message : \"Unknown error occurred\" };\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.pool) {\n      await this.pool.end();\n      this.pool = null;\n      this.db = null;\n    }\n  }\n}\n\nexport const installManager = new InstallManager();","size_bytes":13983},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, requireAuth, optionalAuth } from \"./auth\";\nimport { insertSeriesSchema, insertChapterSchema, insertCommentSchema, insertReviewSchema, installerSetupSchema, type Series } from \"@shared/schema\";\nimport { installManager } from \"./installManager\";\nimport { checkSetupStatus, clearSetupStatusCache, setupMiddleware } from \"./middleware/setupMiddleware\";\nimport { initializeDatabase } from \"./db\";\nimport multer from 'multer';\nimport path from 'path';\nimport fs from 'fs';\nimport sharp from 'sharp';\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only JPEG, PNG, and WebP are allowed.'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup/Installation API routes (must be before auth middleware)\n  app.get('/api/setup/status', async (req, res) => {\n    try {\n      const setupStatus = await checkSetupStatus();\n      res.json(setupStatus);\n    } catch (error) {\n      console.error(\"Setup status check failed:\", error);\n      res.status(500).json({ error: \"Failed to check setup status\" });\n    }\n  });\n\n  app.post('/api/setup/install', async (req, res) => {\n    try {\n      const { databaseUrl, adminUsername, adminPassword } = req.body;\n\n      if (!databaseUrl || !adminUsername || !adminPassword) {\n        return res.status(400).json({ \n          success: false,\n          message: 'Missing required fields: databaseUrl, adminUsername, adminPassword' \n        });\n      }\n\n      console.log('Starting installation process...');\n      \n      // Create a minimal setup data object for the existing method\n      const setupData = {\n        databaseUrl,\n        siteName: 'Webtoon Platform',\n        adminUsername,\n        adminEmail: `${adminUsername}@example.com`, // Generate a default email\n        adminPassword,\n        stripePublicKey: '',\n        stripeSecretKey: '',\n        logoUrl: '',\n        faviconUrl: ''\n      };\n      \n      const result = await installManager.performFullInstallation(setupData);\n\n      if (result.success) {\n        // Reinitialize main database connection with new URL\n        initializeDatabase(databaseUrl);\n        \n        // Clear setup status cache to force refresh\n        clearSetupStatusCache();\n        \n        res.json({ \n          success: true, \n          message: 'Installation completed successfully!',\n          adminUserId: result.adminUserId \n        });\n      } else {\n        res.status(400).json({ \n          success: false, \n          message: result.error || 'Installation failed' \n        });\n      }\n    } catch (error) {\n      console.error('Installation error:', error);\n      res.status(500).json({ \n        success: false, \n        message: `Installation failed: ${error instanceof Error ? error.message : 'Unknown error'}` \n      });\n    }\n  });\n\n  app.post('/api/setup/validate-db', async (req, res) => {\n    try {\n      console.log(\"Received validation request:\", req.body);\n      const { databaseUrl } = req.body;\n      \n      if (!databaseUrl || databaseUrl.trim() === '') {\n        return res.status(400).json({ valid: false, error: \"Database URL is required\" });\n      }\n      \n      console.log(\"Validating database URL:\", databaseUrl.substring(0, 20) + \"...\");\n      const result = await installManager.validateDatabaseConnection(databaseUrl);\n      \n      if (result.valid) {\n        res.json({ valid: true, message: \"Database connection successful\" });\n      } else {\n        res.json({ valid: false, error: result.error || \"Unable to connect to database.\" });\n      }\n    } catch (error) {\n      console.error(\"Database validation error:\", error);\n      \n      // Provide more specific error messages based on the error type\n      let errorMessage = \"Database validation failed\";\n      if (error instanceof Error) {\n        if (error.message.includes('ENOTFOUND')) {\n          errorMessage = \"Database hostname not found. Please verify the hostname in your connection string.\";\n        } else if (error.message.includes('ECONNREFUSED')) {\n          errorMessage = \"Connection refused. The database server may be down or the port may be incorrect.\";\n        } else if (error.message.includes('timeout')) {\n          errorMessage = \"Connection timeout. Please check your network connectivity and database availability.\";\n        } else if (error.message.includes('authentication') || error.message.includes('password')) {\n          errorMessage = \"Authentication failed. Please check your username and password.\";\n        } else if (error.message.includes('ECONNRESET')) {\n          errorMessage = \"Connection reset. The database may be overloaded or have connection limits.\";\n        } else {\n          errorMessage = `Database validation failed: ${error.message}`;\n        }\n      }\n      \n      res.json({ valid: false, error: errorMessage });\n    }\n  });\n\n  // Test endpoint to validate current environment database\n  app.get('/api/setup/test-current-db', async (req, res) => {\n    try {\n      const currentDbUrl = process.env.DATABASE_URL;\n      if (!currentDbUrl) {\n        return res.json({ valid: false, error: \"No DATABASE_URL environment variable set\" });\n      }\n      \n      console.log(\"Testing current database connection...\");\n      const result = await installManager.validateDatabaseConnection(currentDbUrl);\n      res.json({ \n        valid: result.valid, \n        message: result.valid ? \"Current database connection works\" : result.error || \"Current database connection failed\",\n        hasDbUrl: !!currentDbUrl\n      });\n    } catch (error) {\n      console.error(\"Current database test error:\", error);\n      res.json({ valid: false, error: `Database test failed: ${(error as Error).message}` });\n    }\n  });\n\n  // Apply setup middleware to protect all non-setup routes\n  app.use((req, res, next) => {\n    const path = req.path;\n    // Skip setup middleware for setup-related routes and static assets\n    if (path.startsWith('/api/setup') || \n        path.startsWith('/uploads') || \n        path.endsWith('.js') || path.endsWith('.css') || path.endsWith('.ico') ||\n        path.endsWith('.png') || path.endsWith('.jpg') || path.endsWith('.jpeg') ||\n        path.endsWith('.webp') || path.endsWith('.svg') || path.endsWith('.woff') ||\n        path.endsWith('.woff2') || path.endsWith('.map')) {\n      return next();\n    }\n    \n    // Apply setup middleware to all other routes\n    setupMiddleware(req, res, next);\n  });\n\n  // Auth middleware - setupAuth includes all auth routes\n  setupAuth(app);\n\n  // Serve uploaded files\n  app.use('/uploads', express.static(uploadDir));\n\n  // Creator application endpoint\n  app.post('/api/creator/apply', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const { displayName, bio, portfolioUrl, socialMediaUrl, contentTypes, experience, motivation } = req.body;\n\n      if (!displayName || !bio || !contentTypes || contentTypes.length === 0) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Auto-approve and update user to creator status instantly\n      const updatedUser = await storage.updateUser(userId, {\n        creatorDisplayName: displayName,\n        creatorBio: bio,\n        creatorPortfolioUrl: portfolioUrl,\n        creatorSocialMediaUrl: socialMediaUrl,\n        creatorContentTypes: JSON.stringify(contentTypes),\n        creatorExperience: experience,\n        creatorMotivation: motivation,\n        creatorApplicationStatus: 'approved',\n        creatorApplicationDate: new Date().toISOString(),\n        isCreator: true, // Auto-approve creator status\n      });\n\n      res.json({ message: \"Creator application approved! Welcome to the Creator Program!\", user: updatedUser });\n    } catch (error) {\n      console.error(\"Error submitting creator application:\", error);\n      res.status(500).json({ message: \"Failed to submit application\" });\n    }\n  });\n\n  // Public series routes (no auth required)\n  app.get('/api/series', optionalAuth, async (req, res) => {\n    try {\n      const { type, status, genre, limit } = req.query;\n      const series = await storage.getSeriesList({\n        type: type as string,\n        status: status as string,\n        genre: genre as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n      });\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error fetching series:\", error);\n      res.status(500).json({ message: \"Failed to fetch series\" });\n    }\n  });\n\n  // Trending series endpoint\n  app.get('/api/series/trending', optionalAuth, async (req, res) => {\n    try {\n      const { timeframe, limit } = req.query;\n      const series = await storage.getTrendingSeries({\n        timeframe: timeframe as string || 'week',\n        limit: limit ? parseInt(limit as string) : 20,\n      });\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error fetching trending series:\", error);\n      res.status(500).json({ message: \"Failed to fetch trending series\" });\n    }\n  });\n\n  // Rising series endpoint\n  app.get('/api/series/rising', optionalAuth, async (req, res) => {\n    try {\n      const { timeframe, limit } = req.query;\n      const series = await storage.getRisingSeries({\n        timeframe: timeframe as string || 'week',\n        limit: limit ? parseInt(limit as string) : 12,\n      });\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error fetching rising series:\", error);\n      res.status(500).json({ message: \"Failed to fetch rising series\" });\n    }\n  });\n\n  // Trending creators endpoint\n  app.get('/api/creators/trending', optionalAuth, async (req, res) => {\n    try {\n      const { timeframe, limit } = req.query;\n      const creators = await storage.getTrendingCreators({\n        timeframe: timeframe as string || 'week',\n        limit: limit ? parseInt(limit as string) : 12,\n      });\n      res.json(creators);\n    } catch (error) {\n      console.error(\"Error fetching trending creators:\", error);\n      res.status(500).json({ message: \"Failed to fetch trending creators\" });\n    }\n  });\n\n  app.get('/api/series/trending', optionalAuth, async (req, res) => {\n    try {\n      const { limit } = req.query;\n      const series = await storage.getTrendingSeries({\n        limit: limit ? parseInt(limit as string) : 10\n      });\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error fetching trending series:\", error);\n      res.status(500).json({ message: \"Failed to fetch trending series\" });\n    }\n  });\n\n  app.get('/api/series/search', async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      const series = await storage.searchSeries(q as string);\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error searching series:\", error);\n      res.status(500).json({ message: \"Failed to search series\" });\n    }\n  });\n\n  app.get('/api/series/:id', optionalAuth, async (req, res) => {\n    try {\n      const series = await storage.getSeries(req.params.id);\n      if (!series) {\n        return res.status(404).json({ message: \"Series not found\" });\n      }\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error fetching series:\", error);\n      res.status(500).json({ message: \"Failed to fetch series\" });\n    }\n  });\n\n  // User profile route by ID\n  app.get('/api/users/:id', optionalAuth, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Remove sensitive information including email for privacy\n      const { password, email, resetToken, resetTokenExpiry, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User profile route by username (case-insensitive)\n  app.get('/api/user/:username', optionalAuth, async (req, res) => {\n    try {\n      const user = await storage.getUserByUsername(req.params.username);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Calculate follower and following counts\n      const followerCount = await storage.getFollowerCount(user.id);\n      const followingCount = await storage.getFollowingCount(user.id);\n      \n      // Check if current user is following this profile (if authenticated)\n      let isFollowing = false;\n      if (req.user && req.user.id !== user.id) {\n        isFollowing = await storage.isFollowing(req.user.id, user.id);\n      }\n      \n      // Remove sensitive information including email for privacy\n      const { password, email, resetToken, resetTokenExpiry, ...safeUser } = user;\n      \n      res.json({\n        ...safeUser,\n        stats: {\n          followers: followerCount,\n          following: followingCount,\n          chaptersRead: user.chaptersRead || 0\n        },\n        isFollowing\n      });\n    } catch (error) {\n      console.error(\"Error fetching user by username:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Following system endpoints\n  app.post('/api/follow', requireAuth, async (req: any, res) => {\n    try {\n      const { followingId } = req.body;\n      const followerId = req.user.id;\n      \n      if (followerId === followingId) {\n        return res.status(400).json({ message: \"Cannot follow yourself\" });\n      }\n      \n      const follow = await storage.createFollow(followerId, followingId, 'user');\n      res.json({ message: \"Successfully followed user\", follow });\n    } catch (error) {\n      console.error(\"Error following user:\", error);\n      res.status(500).json({ message: \"Failed to follow user\" });\n    }\n  });\n\n  app.delete('/api/follow', requireAuth, async (req: any, res) => {\n    try {\n      const { followingId } = req.body;\n      const followerId = req.user.id;\n      \n      await storage.deleteFollow(followerId, followingId, 'user');\n      res.json({ message: \"Successfully unfollowed user\" });\n    } catch (error) {\n      console.error(\"Error unfollowing user:\", error);\n      res.status(500).json({ message: \"Failed to unfollow user\" });\n    }\n  });\n\n  app.get('/api/user/:id/following', optionalAuth, async (req, res) => {\n    try {\n      const following = await storage.getUserFollowing(req.params.id);\n      res.json(following);\n    } catch (error) {\n      console.error(\"Error fetching following:\", error);\n      res.status(500).json({ message: \"Failed to fetch following\" });\n    }\n  });\n\n  app.get('/api/user/:id/followers', optionalAuth, async (req, res) => {\n    try {\n      const followers = await storage.getUserFollowers(req.params.id);\n      res.json(followers);\n    } catch (error) {\n      console.error(\"Error fetching followers:\", error);\n      res.status(500).json({ message: \"Failed to fetch followers\" });\n    }\n  });\n\n  app.post('/api/series', requireAuth, upload.single('coverImage'), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Validate required fields\n      if (!req.body.title?.trim()) {\n        return res.status(400).json({ message: \"Title is required\" });\n      }\n      if (!req.body.description?.trim()) {\n        return res.status(400).json({ message: \"Description is required\" });\n      }\n      if (!req.file) {\n        return res.status(400).json({ message: \"Cover image is required\" });\n      }\n\n      // Process and resize cover image\n      let coverImageUrl = null;\n      if (req.file) {\n        const resizedFilename = `resized_${req.file.filename}`;\n        const resizedPath = path.join('uploads', resizedFilename);\n        \n        await sharp(req.file.path)\n          .resize(300, 450, { \n            fit: 'cover',\n            position: 'center'\n          })\n          .jpeg({ quality: 85 })\n          .toFile(resizedPath);\n          \n        coverImageUrl = `/uploads/${resizedFilename}`;\n      }\n      \n      // Validate input - convert form data types\n      const seriesData = insertSeriesSchema.parse({\n        ...req.body,\n        authorId: userId,\n        genres: req.body.genres ? JSON.parse(req.body.genres) : [],\n        tags: req.body.tags ? JSON.parse(req.body.tags) : [],\n        isNSFW: req.body.isNSFW === 'true' || req.body.isNSFW === true,\n        coverImageUrl,\n      });\n\n      const series = await storage.createSeries(seriesData);\n      res.status(201).json(series);\n    } catch (error) {\n      console.error(\"Error creating series:\", error);\n      res.status(400).json({ message: \"Failed to create series\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Public chapter routes (no auth required for reading)\n  app.get('/api/series/:seriesId/chapters', optionalAuth, async (req, res) => {\n    try {\n      const chapters = await storage.getChaptersBySeriesId(req.params.seriesId);\n      res.json(chapters);\n    } catch (error) {\n      console.error(\"Error fetching chapters:\", error);\n      res.status(500).json({ message: \"Failed to fetch chapters\" });\n    }\n  });\n\n  // Reorder chapters\n  app.post(\"/api/series/:id/reorder-chapters\", requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { chapterIds } = req.body;\n\n      if (!Array.isArray(chapterIds)) {\n        return res.status(400).json({ error: \"chapterIds must be an array\" });\n      }\n\n      // Update chapter order in database\n      for (let i = 0; i < chapterIds.length; i++) {\n        await storage.updateChapter(chapterIds[i], {\n          chapterNumber: i + 1\n        });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Reorder chapters error:\", error);\n      res.status(500).json({ error: \"Failed to reorder chapters\" });\n    }\n  });\n\n  app.get('/api/chapters/:id', optionalAuth, async (req, res) => {\n    try {\n      const chapter = await storage.getChapter(req.params.id);\n      if (!chapter) {\n        return res.status(404).json({ message: \"Chapter not found\" });\n      }\n\n      // Track view if user is logged in (unique per user per chapter)\n      if (req.user) {\n        await storage.trackChapterView(req.params.id, req.user.id);\n      }\n\n      res.json(chapter);\n    } catch (error) {\n      console.error(\"Error fetching chapter:\", error);\n      res.status(500).json({ message: \"Failed to fetch chapter\" });\n    }\n  });\n\n  // Like/unlike chapter endpoint\n  app.post('/api/chapters/:id/like', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user!.id;\n      \n      const result = await storage.toggleChapterLike(id, userId);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error toggling chapter like:\", error);\n      res.status(500).json({ message: \"Failed to toggle like\" });\n    }\n  });\n\n  app.delete('/api/chapters/:id/like', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user!.id;\n      \n      const result = await storage.toggleChapterLike(id, userId);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error toggling chapter like:\", error);\n      res.status(500).json({ message: \"Failed to toggle like\" });\n    }\n  });\n\n  // Check if user has liked a chapter\n  app.get('/api/chapters/:id/like-status', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user!.id;\n      \n      const isLiked = await storage.hasUserLikedChapter(id, userId);\n      res.json({ isLiked });\n    } catch (error) {\n      console.error(\"Error checking like status:\", error);\n      res.status(500).json({ message: \"Failed to check like status\" });\n    }\n  });\n\n  app.post('/api/series/:seriesId/chapters', requireAuth, upload.array('pages', 50), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Verify user owns the series\n      const series = await storage.getSeries(req.params.seriesId);\n      if (!series || series.authorId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Process uploaded files for content\n      let content = null;\n      if (req.files && req.files.length > 0) {\n        // For webtoon/manga - array of image URLs\n        content = req.files.map((file: Express.Multer.File) => `/uploads/${file.filename}`);\n      } else if (req.body.content) {\n        // For novels - text content\n        content = req.body.content;\n      }\n\n      const chapterData = insertChapterSchema.parse({\n        ...req.body,\n        seriesId: req.params.seriesId,\n        content,\n        chapterNumber: parseInt(req.body.chapterNumber),\n        coinPrice: req.body.coinPrice ? parseInt(req.body.coinPrice) : 0,\n      });\n\n      const chapter = await storage.createChapter(chapterData);\n      res.status(201).json(chapter);\n    } catch (error) {\n      console.error(\"Error creating chapter:\", error);\n      res.status(400).json({ message: \"Failed to create chapter\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Public comment routes (no auth required for viewing)\n  app.get('/api/chapters/:chapterId/comments', optionalAuth, async (req, res) => {\n    try {\n      const comments = await storage.getCommentsByChapterId(req.params.chapterId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post('/api/chapters/:chapterId/comments', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      const commentData = insertCommentSchema.parse({\n        ...req.body,\n        chapterId: req.params.chapterId,\n        userId,\n      });\n\n      const comment = await storage.createComment(commentData);\n      res.status(201).json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(400).json({ message: \"Failed to create comment\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Public review routes (no auth required for viewing)\n  app.get('/api/series/:seriesId/reviews', optionalAuth, async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsBySeriesId(req.params.seriesId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post('/api/series/:seriesId/reviews', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        seriesId: req.params.seriesId,\n        userId,\n        rating: parseInt(req.body.rating),\n      });\n\n      const review = await storage.createReview(reviewData);\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(400).json({ message: \"Failed to create review\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Protected follow routes (require auth)\n  app.post('/api/follow', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { targetId, targetType } = req.body;\n      \n      if (!targetId || !targetType) {\n        return res.status(400).json({ message: \"Target ID and type are required\" });\n      }\n\n      const follow = await storage.createFollow(userId, targetId, targetType);\n      res.status(201).json(follow);\n    } catch (error) {\n      console.error(\"Error creating follow:\", error);\n      res.status(400).json({ message: \"Failed to follow\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete('/api/follow', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { targetId, targetType } = req.body;\n      \n      if (!targetId || !targetType) {\n        return res.status(400).json({ message: \"Target ID and type are required\" });\n      }\n\n      await storage.deleteFollow(userId, targetId, targetType);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error unfollowing:\", error);\n      res.status(400).json({ message: \"Failed to unfollow\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get('/api/user/followed-series', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const series = await storage.getFollowedSeries(userId);\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error fetching followed series:\", error);\n      res.status(500).json({ message: \"Failed to fetch followed series\" });\n    }\n  });\n\n  // Protected bookmark routes (require auth)\n  app.post('/api/bookmarks', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { seriesId } = req.body;\n      \n      if (!seriesId) {\n        return res.status(400).json({ message: \"Series ID is required\" });\n      }\n\n      const bookmark = await storage.createBookmark(userId, seriesId);\n      res.status(201).json(bookmark);\n    } catch (error) {\n      console.error(\"Error creating bookmark:\", error);\n      res.status(400).json({ message: \"Failed to bookmark\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.delete('/api/bookmarks/:seriesId', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      await storage.deleteBookmark(userId, req.params.seriesId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing bookmark:\", error);\n      res.status(400).json({ message: \"Failed to remove bookmark\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get('/api/user/bookmarks', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const series = await storage.getBookmarkedSeries(userId);\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error fetching bookmarks:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookmarks\" });\n    }\n  });\n\n  // Check bookmark status for a specific series\n  app.get('/api/bookmarks/:seriesId/status', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { seriesId } = req.params;\n      \n      const bookmarks = await storage.getBookmarkedSeries(userId);\n      const isBookmarked = bookmarks.some(series => series.id === seriesId);\n      \n      res.json({ isBookmarked });\n    } catch (error) {\n      console.error(\"Error checking bookmark status:\", error);\n      res.status(500).json({ message: \"Failed to check bookmark status\" });\n    }\n  });\n\n  // Like/Unlike a chapter\n  app.post('/api/chapters/:chapterId/like', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chapterId } = req.params;\n      \n      // Check if user already liked this chapter\n      const existingLike = await storage.getUserChapterLike(userId, chapterId);\n      \n      if (existingLike) {\n        // Unlike the chapter\n        await storage.removeLike(existingLike.id);\n        const chapter = await storage.getChapter(chapterId);\n        const updatedLikeCount = Math.max(0, (chapter?.likeCount || 0) - 1);\n        await storage.updateChapter(chapterId, { likeCount: updatedLikeCount });\n        \n        // Update series total like count (sum of all chapter likes)\n        if (chapter?.seriesId) {\n          const chapters = await storage.getChaptersBySeriesId(chapter.seriesId);\n          const totalSeriesLikes = chapters.reduce((sum, ch) => sum + (ch.likeCount || 0), 0) - 1;\n          await storage.updateSeries(chapter.seriesId, { likeCount: Math.max(0, totalSeriesLikes) });\n        }\n        \n        res.json({ isLiked: false, totalLikes: updatedLikeCount });\n      } else {\n        // Like the chapter\n        await storage.addLike(userId, chapterId);\n        const chapter = await storage.getChapter(chapterId);\n        const updatedLikeCount = (chapter?.likeCount || 0) + 1;\n        await storage.updateChapter(chapterId, { likeCount: updatedLikeCount });\n        \n        // Update series total like count (sum of all chapter likes)  \n        if (chapter?.seriesId) {\n          const chapters = await storage.getChaptersBySeriesId(chapter.seriesId);\n          const totalSeriesLikes = chapters.reduce((sum, ch) => sum + (ch.likeCount || 0), 0) + 1;\n          await storage.updateSeries(chapter.seriesId, { likeCount: totalSeriesLikes });\n        }\n        \n        res.json({ isLiked: true, totalLikes: updatedLikeCount });\n      }\n    } catch (error) {\n      console.error(\"Error toggling like:\", error);\n      res.status(500).json({ message: \"Failed to toggle like\" });\n    }\n  });\n\n  // Check if user liked a chapter\n  app.get('/api/chapters/:chapterId/like-status', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chapterId } = req.params;\n      \n      const like = await storage.getUserChapterLike(userId, chapterId);\n      res.json({ isLiked: !!like });\n    } catch (error) {\n      console.error(\"Error checking like status:\", error);\n      res.status(500).json({ message: \"Failed to check like status\" });\n    }\n  });\n\n  // Get chapter comments\n  app.get('/api/chapters/:chapterId/comments', async (req: any, res) => {\n    try {\n      const { chapterId } = req.params;\n      const comments = await storage.getChapterComments(chapterId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  // Add a comment to a chapter\n  app.post('/api/chapters/:chapterId/comments', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chapterId } = req.params;\n      const { content } = req.body;\n      \n      if (!content || !content.trim()) {\n        return res.status(400).json({ message: \"Comment content is required\" });\n      }\n      \n      await storage.addComment(userId, chapterId, content.trim());\n      res.status(201).json({ message: \"Comment added successfully\" });\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n      res.status(500).json({ message: \"Failed to add comment\" });\n    }\n  });\n\n  // Protected reading progress routes (require auth)\n  app.put('/api/reading-progress', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { seriesId, chapterId, progress } = req.body;\n      \n      if (!seriesId || !chapterId || progress === undefined) {\n        return res.status(400).json({ message: \"Series ID, chapter ID, and progress are required\" });\n      }\n\n      const readingProgress = await storage.updateReadingProgress(userId, seriesId, chapterId, parseFloat(progress));\n      res.json(readingProgress);\n    } catch (error) {\n      console.error(\"Error updating reading progress:\", error);\n      res.status(400).json({ message: \"Failed to update reading progress\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get('/api/reading-progress/:seriesId', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const progress = await storage.getReadingProgress(userId, req.params.seriesId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching reading progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch reading progress\" });\n    }\n  });\n\n  // Protected creator routes (require auth)\n  app.get('/api/creator/series', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const series = await storage.getSeriesByAuthor(userId);\n      res.json(series);\n    } catch (error) {\n      console.error(\"Error fetching creator series:\", error);\n      res.status(500).json({ message: \"Failed to fetch creator series\" });\n    }\n  });\n\n  app.get('/api/creator/analytics', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      \n      // Verify user is a creator\n      if (!req.user.isCreator) {\n        return res.status(403).json({ message: \"Access denied: Not a creator\" });\n      }\n\n      // Get basic analytics data\n      const userSeries = await storage.getSeriesByAuthor(userId);\n      const totalViews = userSeries.reduce((sum, series) => sum + (series.viewCount || 0), 0);\n      const followersCount = req.user.followersCount || 0;\n      \n      // Generate realistic ad revenue data if eligible\n      const hasAdRevenue = followersCount >= 1000;\n      const adRevenue = hasAdRevenue ? {\n        totalImpressions: Math.floor(totalViews * 0.3),\n        totalClicks: Math.floor(totalViews * 0.015),\n        ctr: 1.5 + Math.random() * 1.5, // 1.5-3% CTR\n        revenue: Math.floor(totalViews * 0.001 * 100) / 100, // $0.001 per view\n        weeklyRevenue: Math.floor(totalViews * 0.0002 * 100) / 100,\n        monthlyRevenue: Math.floor(totalViews * 0.0008 * 100) / 100,\n        dailyStats: Array.from({ length: 7 }, (_, i) => ({\n          date: new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000).toISOString(),\n          impressions: Math.floor(Math.random() * 1000) + 100,\n          clicks: Math.floor(Math.random() * 30) + 5,\n          revenue: Math.floor(Math.random() * 10 * 100) / 100,\n        }))\n      } : {\n        totalImpressions: 0,\n        totalClicks: 0,\n        ctr: 0,\n        revenue: 0,\n        weeklyRevenue: 0,\n        monthlyRevenue: 0,\n        dailyStats: []\n      };\n\n      const analytics = {\n        totalViews,\n        followers: followersCount,\n        coinsEarned: req.user.coinBalance || 0,\n        activeSeries: userSeries.filter(s => s.status === 'ongoing').length,\n        weeklyViews: Math.floor(totalViews * 0.15),\n        monthlyViews: Math.floor(totalViews * 0.5),\n        adRevenue,\n        seriesStats: userSeries.map(series => ({\n          id: series.id,\n          title: series.title,\n          coverImageUrl: series.coverImageUrl,\n          views: series.viewCount || 0,\n          followers: Math.floor((series.viewCount || 0) * 0.1),\n          rating: series.rating || \"0.0\",\n          chapters: series.chapterCount || 0,\n          revenue: Math.floor((series.viewCount || 0) * 0.005 * 100) / 100,\n          adImpressions: hasAdRevenue ? Math.floor((series.viewCount || 0) * 0.3) : 0,\n        }))\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching creator analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch creator analytics\" });\n    }\n  });\n\n  // Protected transaction routes (require auth)\n  app.get('/api/user/transactions', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const transactions = await storage.getUserTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Profile stats endpoint\n  app.get('/api/user/profile-stats', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profileStats = await storage.getProfileStats(userId);\n      res.json(profileStats);\n    } catch (error) {\n      console.error(\"Error fetching profile stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile stats\" });\n    }\n  });\n\n  // Update reading statistics when user completes chapter\n  app.post('/api/user/updateReadingStats', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chapterId, seriesId } = req.body;\n      \n      if (!chapterId || !seriesId) {\n        return res.status(400).json({ message: \"Chapter ID and Series ID are required\" });\n      }\n      \n      await storage.updateReadingStats(userId, chapterId, seriesId);\n      res.json({ message: \"Reading statistics updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating reading stats:\", error);\n      res.status(500).json({ message: \"Failed to update reading statistics\" });\n    }\n  });\n\n  // Get user settings\n  app.get('/api/user/settings', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const settings = await storage.getUserSettings(userId);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch user settings\" });\n    }\n  });\n\n  // Update user settings\n  app.patch('/api/user/settings', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { settingKey, value, settings } = req.body;\n      \n      if (settings) {\n        // Update entire settings object\n        await storage.updateUserSettings(userId, settings);\n      } else if (settingKey && value !== undefined) {\n        // Update specific setting\n        const currentSettings = await storage.getUserSettings(userId) || {};\n        const keys = settingKey.split('.');\n        let current = currentSettings;\n        \n        // Navigate to the nested property\n        for (let i = 0; i < keys.length - 1; i++) {\n          if (!current[keys[i]]) {\n            current[keys[i]] = {};\n          }\n          current = current[keys[i]];\n        }\n        \n        // Set the value\n        current[keys[keys.length - 1]] = value;\n        await storage.updateUserSettings(userId, currentSettings);\n      } else {\n        return res.status(400).json({ message: \"Either 'settings' object or 'settingKey' and 'value' are required\" });\n      }\n      \n      res.json({ message: \"Settings updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating user settings:\", error);\n      res.status(500).json({ message: \"Failed to update user settings\" });\n    }\n  });\n\n  // Get continue reading data\n  app.get('/api/user/continue-reading', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const continueReading = await storage.getContinueReading(userId);\n      res.json(continueReading);\n    } catch (error) {\n      console.error(\"Error fetching continue reading data:\", error);\n      res.status(500).json({ message: \"Failed to fetch continue reading data\" });\n    }\n  });\n\n  // Get accurate series progress\n  app.get('/api/progress/:seriesId', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { seriesId } = req.params;\n      \n      if (!seriesId) {\n        return res.status(400).json({ message: \"Series ID is required\" });\n      }\n      \n      const progress = await storage.getSeriesProgress(userId, seriesId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching series progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch series progress\" });\n    }\n  });\n\n  // Update progress when chapter is completed  \n  app.post('/api/progress/update', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { chapterId, seriesId } = req.body;\n      \n      if (!chapterId || !seriesId) {\n        return res.status(400).json({ message: \"Chapter ID and Series ID are required\" });\n      }\n      \n      await storage.updateReadingStats(userId, chapterId, seriesId);\n      \n      // Return updated progress\n      const progress = await storage.getSeriesProgress(userId, seriesId);\n      res.json({ \n        message: \"Progress updated successfully\",\n        progress \n      });\n    } catch (error) {\n      console.error(\"Error updating progress:\", error);\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  // Create Stripe Checkout Session for coin purchase\n  app.post('/api/coins/create-checkout-session', requireAuth, async (req: any, res) => {\n    try {\n      const { packageId, amount, coinAmount } = req.body;\n      \n      if (!packageId || !amount || !coinAmount) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Stripe functionality temporarily disabled\n      return res.status(501).json({ message: \"Payment functionality not implemented yet\" });\n    } catch (error) {\n      console.error(\"Error creating checkout session:\", error);\n      res.status(500).json({ message: \"Failed to create checkout session\" });\n    }\n  });\n\n  // Handle successful Stripe payment\n  app.post('/api/coins/confirm-payment', requireAuth, async (req: any, res) => {\n    try {\n      const { sessionId } = req.body;\n      const userId = req.user.id;\n      \n      if (!sessionId) {\n        return res.status(400).json({ message: \"Session ID required\" });\n      }\n\n      // Stripe functionality temporarily disabled\n      return res.status(501).json({ message: \"Payment confirmation not implemented yet\" });\n    } catch (error) {\n      console.error(\"Error confirming payment:\", error);\n      res.status(500).json({ message: \"Failed to confirm payment\" });\n    }\n  });\n\n  // User profile routes\n  app.get('/api/users/:id', async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Remove sensitive information\n      const { password, resetToken, resetTokenExpiry, ...publicUser } = user;\n      \n      // Get user's series if they're a creator\n      let userSeries: Series[] = [];\n      if (user.isCreator) {\n        userSeries = await storage.getSeriesByAuthor(userId);\n      }\n\n      res.json({\n        ...publicUser,\n        series: userSeries,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch user profile\" });\n    }\n  });\n\n  // Premium chapter unlock endpoint\n  app.post('/api/chapters/:chapterId/unlock', requireAuth, async (req: any, res) => {\n    try {\n      const { chapterId } = req.params;\n      const userId = req.user.id;\n\n      // Get chapter details\n      const chapter = await storage.getChapter(chapterId);\n      if (!chapter) {\n        return res.status(404).json({ message: \"Chapter not found\" });\n      }\n\n      // Check if chapter is premium\n      if (chapter.status === 'free') {\n        return res.status(400).json({ message: \"Chapter is already free to read\" });\n      }\n\n      // Check if already unlocked\n      const isUnlocked = await storage.isChapterUnlocked(userId, chapterId);\n      if (isUnlocked) {\n        return res.json({ message: \"Chapter already unlocked\", unlocked: true });\n      }\n\n      // Check if user has enough coins\n      const user = await storage.getUser(userId);\n      if (!user || (user.coinBalance || 0) < (chapter.coinPrice || 0)) {\n        return res.status(400).json({ \n          message: \"Insufficient coins\",\n          required: chapter.coinPrice || 0,\n          balance: user?.coinBalance || 0\n        });\n      }\n\n      // Deduct coins and unlock chapter\n      await storage.updateUser(userId, {\n        coinBalance: (user.coinBalance || 0) - (chapter.coinPrice || 0)\n      });\n\n      await storage.unlockChapter(userId, chapterId);\n\n      // Create transaction record\n      await storage.createTransaction({\n        userId,\n        amount: -(chapter.coinPrice || 0),\n        type: 'unlock',\n        description: `Unlocked chapter: ${chapter.title}`,\n        chapterId,\n      });\n\n      res.json({ \n        message: \"Chapter unlocked successfully\",\n        unlocked: true,\n        coinsSpent: chapter.coinPrice || 0,\n        remainingBalance: (user.coinBalance || 0) - (chapter.coinPrice || 0)\n      });\n    } catch (error) {\n      console.error(\"Error unlocking chapter:\", error);\n      res.status(500).json({ message: \"Failed to unlock chapter\" });\n    }\n  });\n\n  // Search endpoint\n  app.get('/api/search', async (req, res) => {\n    try {\n      const { q: query, type, status, genre } = req.query as {\n        q?: string;\n        type?: string;\n        status?: string;\n        genre?: string;\n      };\n\n      if (!query || query.length < 3) {\n        return res.json({ series: [], creators: [], groups: [] });\n      }\n\n      // Search series\n      const series = await storage.searchSeries(query, { type, status, genre });\n      \n      // Search creators  \n      const creators = await storage.searchCreators(query);\n      \n      // Groups search (placeholder for now)\n      const groups: any[] = [];\n\n      res.json({ series, creators, groups });\n    } catch (error) {\n      console.error(\"Error performing search:\", error);\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Groups routes\n  app.get('/api/groups', async (req, res) => {\n    try {\n      const groups = await storage.getGroupsList();\n      res.json(groups);\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      res.status(500).json({ message: \"Failed to fetch groups\" });\n    }\n  });\n\n  app.get('/api/groups/:id', async (req, res) => {\n    try {\n      const group = await storage.getGroup(req.params.id);\n      if (!group) {\n        return res.status(404).json({ message: \"Group not found\" });\n      }\n      res.json(group);\n    } catch (error) {\n      console.error(\"Error fetching group:\", error);\n      res.status(500).json({ message: \"Failed to fetch group\" });\n    }\n  });\n\n  // Chapter like endpoints\n  app.post(\"/api/chapters/:id/like\", requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      \n      const result = await storage.toggleChapterLike(id, userId);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error toggling chapter like:\", error);\n      res.status(500).json({ message: \"Failed to toggle chapter like\" });\n    }\n  });\n\n  app.get(\"/api/chapters/:id/like-status\", optionalAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user?.id;\n      \n      if (!userId) {\n        return res.json({ isLiked: false });\n      }\n      \n      const isLiked = await storage.hasUserLikedChapter(id, userId);\n      res.json({ isLiked });\n    } catch (error) {\n      console.error(\"Error checking like status:\", error);\n      res.status(500).json({ message: \"Failed to check like status\" });\n    }\n  });\n\n  app.post(\"/api/chapters/:id/view\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user?.id;\n      \n      await storage.trackChapterView(id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error tracking chapter view:\", error);\n      res.status(500).json({ message: \"Failed to track chapter view\" });\n    }\n  });\n\n  // Track reading endpoint - records reading activity at 90% completion\n  app.post('/api/track-reading', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const { chapterId, seriesId } = req.body;\n\n      if (!chapterId || !seriesId) {\n        return res.status(400).json({ message: \"Missing chapterId or seriesId\" });\n      }\n\n      // Add reading history record\n      await storage.addReadingHistory(userId, chapterId, seriesId);\n\n      // Increment chapter view count\n      await storage.incrementChapterViews(chapterId);\n\n      // Increment series total views\n      await storage.incrementSeriesViews(seriesId);\n\n      res.json({ success: true, message: \"Reading tracked successfully\" });\n    } catch (error) {\n      console.error(\"Error tracking reading:\", error);\n      res.status(500).json({ message: \"Failed to track reading\" });\n    }\n  });\n\n  // User stats endpoint\n  app.get('/api/user/:id/stats', optionalAuth, async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const stats = await storage.getUserStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":48887},"server/storage.ts":{"content":"import {\n  users,\n  series,\n  chapters,\n  chapterUnlocks,\n  chapterLikes,\n  chapterViews,\n  comments,\n  reviews,\n  follows,\n  bookmarks,\n  readingProgress,\n  readingHistory,\n  transactions,\n  groups,\n  groupMembers,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type Series,\n  type InsertSeries,\n  type Chapter,\n  type InsertChapter,\n  type Comment,\n  type InsertComment,\n  type Review,\n  type InsertReview,\n  type Group,\n  type Follow,\n  type InsertFollow,\n  type Bookmark,\n  type ReadingProgress,\n  type InsertReadingProgress,\n  type ReadingHistory,\n  type InsertReadingHistory,\n  type Transaction,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { checkSetupStatus } from \"./middleware/setupMiddleware\";\nimport { eq, desc, asc, and, or, like, sql, inArray, gte } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport MemoryStore from \"memorystore\";\n\nexport interface IStorage {\n  // Session store\n  sessionStore: any;\n  \n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Series operations\n  getSeries(id: string): Promise<Series | undefined>;\n  getSeriesList(filters?: { type?: string; status?: string; genre?: string; limit?: number }): Promise<Series[]>;\n  createSeries(series: InsertSeries): Promise<Series>;\n  updateSeries(id: string, updates: Partial<InsertSeries>): Promise<Series>;\n  getSeriesByAuthor(authorId: string): Promise<Series[]>;\n  getTrendingSeries(filters?: { timeframe?: string; limit?: number }): Promise<Series[]>;\n  getRisingSeries(filters?: { timeframe?: string; limit?: number }): Promise<Series[]>;\n  getTrendingCreators(filters?: { timeframe?: string; limit?: number }): Promise<User[]>;\n  searchSeries(query: string, filters?: { type?: string; status?: string; genre?: string }): Promise<Series[]>;\n  searchCreators(query: string): Promise<User[]>;\n  \n  // Chapter operations\n  getChapter(id: string): Promise<Chapter | undefined>;\n  getChaptersBySeriesId(seriesId: string): Promise<Chapter[]>;\n  createChapter(chapter: InsertChapter): Promise<Chapter>;\n  updateChapter(id: string, updates: Partial<InsertChapter>): Promise<Chapter>;\n  \n  // Comment operations\n  getCommentsByChapterId(chapterId: string): Promise<Comment[]>;\n  getChapterComments(chapterId: string): Promise<Comment[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  addComment(userId: string, chapterId: string, content: string): Promise<Comment>;\n  \n  // Review operations\n  getReviewsBySeriesId(seriesId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  \n  // Follow operations\n  createFollow(userId: string, targetId: string, targetType: string): Promise<Follow>;\n  deleteFollow(userId: string, targetId: string, targetType: string): Promise<void>;\n  getFollowedSeries(userId: string): Promise<Series[]>;\n  getFollowerCount(userId: string): Promise<number>;\n  getFollowingCount(userId: string): Promise<number>;\n  isFollowing(followerId: string, followingId: string): Promise<boolean>;\n  getUserFollowing(userId: string): Promise<User[]>;\n  getUserFollowers(userId: string): Promise<User[]>;\n  \n  // Bookmark operations\n  createBookmark(userId: string, seriesId: string): Promise<Bookmark>;\n  deleteBookmark(userId: string, seriesId: string): Promise<void>;\n  getBookmarkedSeries(userId: string): Promise<Series[]>;\n  \n  // Reading progress operations\n  updateReadingProgress(userId: string, seriesId: string, chapterId: string, progress: number): Promise<ReadingProgress>;\n  getReadingProgress(userId: string, seriesId: string): Promise<ReadingProgress | undefined>;\n\n  // Chapter interaction operations\n  toggleChapterLike(chapterId: string, userId: string): Promise<{ isLiked: boolean; likeCount: number }>;\n  hasUserLikedChapter(chapterId: string, userId: string): Promise<boolean>;\n  trackChapterView(chapterId: string, userId?: string): Promise<void>;\n  \n  // Transaction operations\n  createTransaction(transaction: Omit<Transaction, 'id' | 'createdAt'>): Promise<Transaction>;\n  getUserTransactions(userId: string): Promise<Transaction[]>;\n  \n  // Group operations\n  getGroup(id: string): Promise<Group | undefined>;\n  getGroupsList(): Promise<Group[]>;\n  createGroup(group: Omit<Group, 'id' | 'createdAt' | 'updatedAt'>): Promise<Group>;\n  \n  // Analytics operations\n  getCreatorAnalytics(userId: string): Promise<{\n    totalViews: number;\n    followers: number;\n    coinsEarned: number;\n    activeSeries: number;\n  }>;\n  \n  // Profile stats operations\n  getProfileStats(userId: string): Promise<{\n    chaptersReadThisWeek: number;\n    readingStreak: number;\n    totalLikesGiven: number;\n    seriesFollowed: number;\n    viewsThisWeek: number;\n    totalChaptersRead: number;\n    favoriteGenre: string;\n    lastReadSeries: string | null;\n    lastReadDate: string | null;\n    averageReadingTime: number;\n  }>;\n  \n  // Reading activity tracking\n  updateReadingStats(userId: string, chapterId: string, seriesId: string): Promise<void>;\n  \n  // User settings management\n  getUserSettings(userId: string): Promise<any>;\n  updateUserSettings(userId: string, settings: any): Promise<void>;\n  \n  // Continue reading functionality\n  getContinueReading(userId: string): Promise<Array<{\n    seriesId: string;\n    seriesTitle: string;\n    seriesCover: string;\n    lastChapterId: string;\n    lastChapterTitle: string;\n    lastChapterNumber: number;\n    progress: number;\n    lastReadAt: Date;\n  }>>;\n  \n  // Get accurate series reading progress\n  getSeriesProgress(userId: string, seriesId: string): Promise<{\n    readChapters: number;\n    totalChapters: number;\n    progress: number;\n    lastReadChapter: string | null;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any;\n\n  constructor() {\n    this.initializeSessionStore();\n  }\n\n  private initializeSessionStore() {\n    if (process.env.DATABASE_URL) {\n      const PostgresSessionStore = connectPg(session);\n      this.sessionStore = new PostgresSessionStore({\n        conString: process.env.DATABASE_URL,\n        createTableIfMissing: true,\n      });\n    } else {\n      // Use in-memory session store during installer mode\n      const InMemoryStore = MemoryStore(session);\n      this.sessionStore = new InMemoryStore({\n        checkPeriod: 86400000 // prune expired entries every 24h\n      });\n    }\n  }\n\n  reinitializeSessionStore() {\n    // Reinitialize session store after database is configured\n    this.initializeSessionStore();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    if (!db) {\n      throw new Error('Database not initialized - setup required');\n    }\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    if (!db) {\n      throw new Error('Database not initialized - setup required');\n    }\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    if (!db) {\n      throw new Error('Database not initialized - setup required');\n    }\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    if (!db) {\n      throw new Error('Database not initialized - setup required');\n    }\n    const [user] = await db.select().from(users).where(sql`LOWER(${users.username}) = LOWER(${username})`);\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    if (!db) {\n      throw new Error('Database not initialized - setup required');\n    }\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Series operations\n  async getSeries(id: string): Promise<(Series & { author: User }) | undefined> {\n    const [seriesData] = await db\n      .select({\n        id: series.id,\n        title: series.title,\n        description: series.description,\n        coverImageUrl: series.coverImageUrl,\n        type: series.type,\n        status: series.status,\n        authorId: series.authorId,\n        groupId: series.groupId,\n        genres: series.genres,\n        tags: series.tags,\n        isNSFW: series.isNSFW,\n        viewCount: series.viewCount,\n        likeCount: series.likeCount,\n        bookmarkCount: series.bookmarkCount,\n        rating: series.rating,\n        ratingCount: series.ratingCount,\n        chapterCount: series.chapterCount,\n        createdAt: series.createdAt,\n        updatedAt: series.updatedAt,\n        author: {\n          id: users.id,\n          username: users.username,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          coinBalance: users.coinBalance,\n          isCreator: users.isCreator,\n          isEliteReader: users.isEliteReader,\n          followersCount: users.followersCount,\n          creatorDisplayName: users.creatorDisplayName,\n          creatorBio: users.creatorBio,\n          creatorPortfolioUrl: users.creatorPortfolioUrl,\n          creatorSocialMediaUrl: users.creatorSocialMediaUrl,\n          creatorContentTypes: users.creatorContentTypes,\n          creatorExperience: users.creatorExperience,\n          creatorMotivation: users.creatorMotivation,\n          creatorApplicationStatus: users.creatorApplicationStatus,\n          creatorApplicationDate: users.creatorApplicationDate,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(series)\n      .innerJoin(users, eq(series.authorId, users.id))\n      .where(eq(series.id, id));\n    return seriesData;\n  }\n\n  async getSeriesList(filters?: { \n    type?: string; \n    status?: string; \n    genre?: string; \n    limit?: number \n  }): Promise<(Series & { author: User })[]> {\n    const conditions = [];\n    \n    // Validate enum values before using them\n    if (filters?.type && ['webtoon', 'manga', 'novel'].includes(filters.type)) {\n      conditions.push(eq(series.type, filters.type as 'webtoon' | 'manga' | 'novel'));\n    }\n    if (filters?.status && ['ongoing', 'completed', 'hiatus'].includes(filters.status)) {\n      conditions.push(eq(series.status, filters.status as 'ongoing' | 'completed' | 'hiatus'));\n    }\n    if (filters?.genre) {\n      conditions.push(sql`${series.genres} @> ARRAY[${filters.genre}]`);\n    }\n    \n    let baseQuery = db\n      .select({\n        id: series.id,\n        title: series.title,\n        description: series.description,\n        coverImageUrl: series.coverImageUrl,\n        type: series.type,\n        status: series.status,\n        authorId: series.authorId,\n        groupId: series.groupId,\n        genres: series.genres,\n        tags: series.tags,\n        isNSFW: series.isNSFW,\n        viewCount: series.viewCount,\n        likeCount: series.likeCount,\n        bookmarkCount: series.bookmarkCount,\n        rating: series.rating,\n        ratingCount: series.ratingCount,\n        chapterCount: series.chapterCount,\n        createdAt: series.createdAt,\n        updatedAt: series.updatedAt,\n        author: {\n          id: users.id,\n          username: users.username,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          coinBalance: users.coinBalance,\n          isCreator: users.isCreator,\n          isEliteReader: users.isEliteReader,\n          followersCount: users.followersCount,\n          creatorDisplayName: users.creatorDisplayName,\n          creatorBio: users.creatorBio,\n          creatorPortfolioUrl: users.creatorPortfolioUrl,\n          creatorSocialMediaUrl: users.creatorSocialMediaUrl,\n          creatorContentTypes: users.creatorContentTypes,\n          creatorExperience: users.creatorExperience,\n          creatorMotivation: users.creatorMotivation,\n          creatorApplicationStatus: users.creatorApplicationStatus,\n          creatorApplicationDate: users.creatorApplicationDate,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(series)\n      .innerJoin(users, eq(series.authorId, users.id))\n      .orderBy(desc(series.updatedAt));\n\n    if (conditions.length > 0) {\n      baseQuery = baseQuery.where(and(...conditions)) as any;\n    }\n    \n    if (filters?.limit) {\n      return await baseQuery.limit(filters.limit);\n    }\n    return await baseQuery;\n  }\n\n  async createSeries(seriesData: InsertSeries): Promise<Series> {\n    const [newSeries] = await db.insert(series).values(seriesData).returning();\n    return newSeries;\n  }\n\n  async updateSeries(id: string, updates: Partial<InsertSeries>): Promise<Series> {\n    const [updatedSeries] = await db\n      .update(series)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(series.id, id))\n      .returning();\n    return updatedSeries;\n  }\n\n  async getSeriesByAuthor(authorId: string): Promise<(Series & { author: User })[]> {\n    return await db\n      .select({\n        id: series.id,\n        title: series.title,\n        description: series.description,\n        coverImageUrl: series.coverImageUrl,\n        type: series.type,\n        status: series.status,\n        authorId: series.authorId,\n        groupId: series.groupId,\n        genres: series.genres,\n        tags: series.tags,\n        isNSFW: series.isNSFW,\n        viewCount: series.viewCount,\n        likeCount: series.likeCount,\n        bookmarkCount: series.bookmarkCount,\n        rating: series.rating,\n        ratingCount: series.ratingCount,\n        chapterCount: series.chapterCount,\n        createdAt: series.createdAt,\n        updatedAt: series.updatedAt,\n        author: {\n          id: users.id,\n          username: users.username,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          coinBalance: users.coinBalance,\n          isCreator: users.isCreator,\n          isEliteReader: users.isEliteReader,\n          followersCount: users.followersCount,\n          creatorDisplayName: users.creatorDisplayName,\n          creatorBio: users.creatorBio,\n          creatorPortfolioUrl: users.creatorPortfolioUrl,\n          creatorSocialMediaUrl: users.creatorSocialMediaUrl,\n          creatorContentTypes: users.creatorContentTypes,\n          creatorExperience: users.creatorExperience,\n          creatorMotivation: users.creatorMotivation,\n          creatorApplicationStatus: users.creatorApplicationStatus,\n          creatorApplicationDate: users.creatorApplicationDate,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(series)\n      .innerJoin(users, eq(series.authorId, users.id))\n      .where(eq(series.authorId, authorId))\n      .orderBy(desc(series.updatedAt));\n  }\n\n  // Premium chapter unlock operations\n  async isChapterUnlocked(userId: string, chapterId: string): Promise<boolean> {\n    const [unlock] = await db.select().from(chapterUnlocks)\n      .where(and(eq(chapterUnlocks.userId, userId), eq(chapterUnlocks.chapterId, chapterId)));\n    return !!unlock;\n  }\n\n  async unlockChapter(userId: string, chapterId: string): Promise<void> {\n    await db.insert(chapterUnlocks).values({\n      userId,\n      chapterId,\n    }).onConflictDoNothing();\n  }\n\n  async getTrendingSeries(filters?: { timeframe?: string; limit?: number }): Promise<(Series & { author: User })[]> {\n    const limit = filters?.limit || 10;\n    return await db\n      .select({\n        id: series.id,\n        title: series.title,\n        description: series.description,\n        coverImageUrl: series.coverImageUrl,\n        type: series.type,\n        status: series.status,\n        authorId: series.authorId,\n        groupId: series.groupId,\n        genres: series.genres,\n        tags: series.tags,\n        isNSFW: series.isNSFW,\n        viewCount: series.viewCount,\n        likeCount: series.likeCount,\n        bookmarkCount: series.bookmarkCount,\n        rating: series.rating,\n        ratingCount: series.ratingCount,\n        chapterCount: series.chapterCount,\n        createdAt: series.createdAt,\n        updatedAt: series.updatedAt,\n        author: {\n          id: users.id,\n          username: users.username,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          coinBalance: users.coinBalance,\n          isCreator: users.isCreator,\n          isEliteReader: users.isEliteReader,\n          followersCount: users.followersCount,\n          creatorDisplayName: users.creatorDisplayName,\n          creatorBio: users.creatorBio,\n          creatorPortfolioUrl: users.creatorPortfolioUrl,\n          creatorSocialMediaUrl: users.creatorSocialMediaUrl,\n          creatorContentTypes: users.creatorContentTypes,\n          creatorExperience: users.creatorExperience,\n          creatorMotivation: users.creatorMotivation,\n          creatorApplicationStatus: users.creatorApplicationStatus,\n          creatorApplicationDate: users.creatorApplicationDate,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(series)\n      .innerJoin(users, eq(series.authorId, users.id))\n      .orderBy(desc(series.viewCount), desc(series.bookmarkCount))\n      .limit(limit);\n  }\n\n  async getRisingSeries(filters?: { timeframe?: string; limit?: number }): Promise<(Series & { author: User })[]> {\n    const limit = filters?.limit || 12;\n    return await db\n      .select({\n        id: series.id,\n        title: series.title,\n        description: series.description,\n        coverImageUrl: series.coverImageUrl,\n        type: series.type,\n        status: series.status,\n        authorId: series.authorId,\n        groupId: series.groupId,\n        genres: series.genres,\n        tags: series.tags,\n        isNSFW: series.isNSFW,\n        viewCount: series.viewCount,\n        likeCount: series.likeCount,\n        bookmarkCount: series.bookmarkCount,\n        rating: series.rating,\n        ratingCount: series.ratingCount,\n        chapterCount: series.chapterCount,\n        createdAt: series.createdAt,\n        updatedAt: series.updatedAt,\n        author: {\n          id: users.id,\n          username: users.username,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          coinBalance: users.coinBalance,\n          isCreator: users.isCreator,\n          isEliteReader: users.isEliteReader,\n          followersCount: users.followersCount,\n          creatorDisplayName: users.creatorDisplayName,\n          creatorBio: users.creatorBio,\n          creatorPortfolioUrl: users.creatorPortfolioUrl,\n          creatorSocialMediaUrl: users.creatorSocialMediaUrl,\n          creatorContentTypes: users.creatorContentTypes,\n          creatorExperience: users.creatorExperience,\n          creatorMotivation: users.creatorMotivation,\n          creatorApplicationStatus: users.creatorApplicationStatus,\n          creatorApplicationDate: users.creatorApplicationDate,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(series)\n      .innerJoin(users, eq(series.authorId, users.id))\n      .where(\n        and(\n          sql`${series.createdAt} >= NOW() - INTERVAL '30 days'`,\n          sql`${series.viewCount} > 100`\n        )\n      )\n      .orderBy(desc(series.viewCount), desc(series.createdAt))\n      .limit(limit);\n  }\n\n  async getTrendingCreators(filters?: { timeframe?: string; limit?: number }): Promise<User[]> {\n    const limit = filters?.limit || 12;\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.isCreator, true))\n      .orderBy(desc(users.followersCount))\n      .limit(limit);\n  }\n\n  async searchSeries(query: string, filters?: { type?: string; status?: string; genre?: string }): Promise<Series[]> {\n    let whereConditions = or(\n      like(series.title, `%${query}%`),\n      like(series.description, `%${query}%`)\n    );\n\n    // Add filters if provided\n    if (filters?.type) {\n      whereConditions = and(whereConditions, sql`${series.type} = ${filters.type}`);\n    }\n    if (filters?.status) {\n      whereConditions = and(whereConditions, sql`${series.status} = ${filters.status}`);\n    }\n    if (filters?.genre) {\n      whereConditions = and(whereConditions, like(series.genres, `%${filters.genre}%`));\n    }\n\n    return await db\n      .select()\n      .from(series)\n      .where(whereConditions)\n      .orderBy(desc(series.viewCount))\n      .limit(20);\n  }\n\n  async searchCreators(query: string): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.isCreator, true),\n          or(\n            like(users.username, `%${query}%`),\n            like(users.firstName, `%${query}%`),\n            like(users.lastName, `%${query}%`),\n            like(users.creatorDisplayName, `%${query}%`),\n            like(users.creatorBio, `%${query}%`)\n          )\n        )\n      )\n      .orderBy(desc(users.followersCount))\n      .limit(20);\n  }\n\n  // Chapter operations\n  async getChapter(id: string): Promise<Chapter | undefined> {\n    const [chapter] = await db.select().from(chapters).where(eq(chapters.id, id));\n    return chapter;\n  }\n\n  async getChaptersBySeriesId(seriesId: string): Promise<Chapter[]> {\n    return await db\n      .select()\n      .from(chapters)\n      .where(eq(chapters.seriesId, seriesId))\n      .orderBy(asc(chapters.chapterNumber));\n  }\n\n  async createChapter(chapterData: InsertChapter): Promise<Chapter> {\n    const [newChapter] = await db.insert(chapters).values(chapterData).returning();\n    \n    // Update series chapter count\n    await db\n      .update(series)\n      .set({ \n        chapterCount: sql`${series.chapterCount} + 1`,\n        updatedAt: new Date()\n      })\n      .where(eq(series.id, chapterData.seriesId));\n    \n    return newChapter;\n  }\n\n  async updateChapter(id: string, updates: Partial<InsertChapter>): Promise<Chapter> {\n    const [updatedChapter] = await db\n      .update(chapters)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(chapters.id, id))\n      .returning();\n    return updatedChapter;\n  }\n\n  // Comment operations\n  async getCommentsByChapterId(chapterId: string): Promise<Comment[]> {\n    const result = await db\n      .select()\n      .from(comments)\n      .where(eq(comments.chapterId, chapterId))\n      .orderBy(desc(comments.createdAt));\n    return result;\n  }\n\n  async createComment(commentData: InsertComment): Promise<Comment> {\n    const [newComment] = await db.insert(comments).values(commentData).returning();\n    return newComment;\n  }\n\n  // Review operations\n  async getReviewsBySeriesId(seriesId: string): Promise<(Review & { user: User })[]> {\n    return await db\n      .select({\n        id: reviews.id,\n        seriesId: reviews.seriesId,\n        userId: reviews.userId,\n        rating: reviews.rating,\n        content: reviews.content,\n        likeCount: reviews.likeCount,\n        createdAt: reviews.createdAt,\n        updatedAt: reviews.updatedAt,\n        user: {\n          id: users.id,\n          username: users.username,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          coinBalance: users.coinBalance,\n          isCreator: users.isCreator,\n          isEliteReader: users.isEliteReader,\n          followersCount: users.followersCount,\n          creatorDisplayName: users.creatorDisplayName,\n          creatorBio: users.creatorBio,\n          creatorPortfolioUrl: users.creatorPortfolioUrl,\n          creatorSocialMediaUrl: users.creatorSocialMediaUrl,\n          creatorContentTypes: users.creatorContentTypes,\n          creatorExperience: users.creatorExperience,\n          creatorMotivation: users.creatorMotivation,\n          creatorApplicationStatus: users.creatorApplicationStatus,\n          creatorApplicationDate: users.creatorApplicationDate,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(reviews)\n      .innerJoin(users, eq(reviews.userId, users.id))\n      .where(eq(reviews.seriesId, seriesId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(reviewData: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(reviewData).returning();\n    \n    // Update series rating\n    const allReviews = await this.getReviewsBySeriesId(reviewData.seriesId);\n    const avgRating = allReviews.reduce((sum, r) => sum + r.rating, 0) / allReviews.length;\n    \n    await db\n      .update(series)\n      .set({\n        rating: avgRating.toFixed(2),\n        ratingCount: allReviews.length,\n        updatedAt: new Date()\n      })\n      .where(eq(series.id, reviewData.seriesId));\n    \n    return newReview;\n  }\n\n  // Follow operations\n  async createFollow(userId: string, targetId: string, targetType: string): Promise<Follow> {\n    const [newFollow] = await db\n      .insert(follows)\n      .values({ userId, targetId, targetType })\n      .returning();\n    \n    // Update follower count if following a user\n    if (targetType === 'user') {\n      await db\n        .update(users)\n        .set({ followersCount: sql`${users.followersCount} + 1` })\n        .where(eq(users.id, targetId));\n    }\n    \n    return newFollow;\n  }\n\n  async deleteFollow(userId: string, targetId: string, targetType: string): Promise<void> {\n    await db\n      .delete(follows)\n      .where(\n        and(\n          eq(follows.userId, userId),\n          eq(follows.targetId, targetId),\n          eq(follows.targetType, targetType)\n        )\n      );\n    \n    // Update follower count if unfollowing a user\n    if (targetType === 'user') {\n      await db\n        .update(users)\n        .set({ followersCount: sql`${users.followersCount} - 1` })\n        .where(eq(users.id, targetId));\n    }\n  }\n\n  async getFollowedSeries(userId: string): Promise<Series[]> {\n    const followedSeriesIds = await db\n      .select({ seriesId: follows.targetId })\n      .from(follows)\n      .where(\n        and(\n          eq(follows.userId, userId),\n          eq(follows.targetType, 'series')\n        )\n      );\n    \n    if (followedSeriesIds.length === 0) return [];\n    \n    return await db\n      .select()\n      .from(series)\n      .where(inArray(series.id, followedSeriesIds.map((f: any) => f.seriesId)));\n  }\n\n  // Bookmark operations\n  async createBookmark(userId: string, seriesId: string): Promise<Bookmark> {\n    const [newBookmark] = await db\n      .insert(bookmarks)\n      .values({ userId, seriesId })\n      .returning();\n    \n    // Update series bookmark count\n    await db\n      .update(series)\n      .set({ bookmarkCount: sql`${series.bookmarkCount} + 1` })\n      .where(eq(series.id, seriesId));\n    \n    return newBookmark;\n  }\n\n  async deleteBookmark(userId: string, seriesId: string): Promise<void> {\n    await db\n      .delete(bookmarks)\n      .where(\n        and(\n          eq(bookmarks.userId, userId),\n          eq(bookmarks.seriesId, seriesId)\n        )\n      );\n    \n    // Update series bookmark count\n    await db\n      .update(series)\n      .set({ bookmarkCount: sql`${series.bookmarkCount} - 1` })\n      .where(eq(series.id, seriesId));\n  }\n\n  async getBookmarkedSeries(userId: string): Promise<Series[]> {\n    const bookmarkedSeriesIds = await db\n      .select({ seriesId: bookmarks.seriesId })\n      .from(bookmarks)\n      .where(eq(bookmarks.userId, userId));\n    \n    if (bookmarkedSeriesIds.length === 0) return [];\n    \n    return await db\n      .select()\n      .from(series)\n      .where(inArray(series.id, bookmarkedSeriesIds.map((b: any) => b.seriesId)));\n  }\n\n  // Like operations\n  async getUserChapterLike(userId: string, chapterId: string): Promise<any> {\n    const [like] = await db\n      .select()\n      .from(chapterLikes)\n      .where(\n        and(\n          eq(chapterLikes.userId, userId),\n          eq(chapterLikes.chapterId, chapterId)\n        )\n      );\n    \n    return like;\n  }\n\n  async addLike(userId: string, chapterId: string): Promise<void> {\n    await db\n      .insert(chapterLikes)\n      .values({ userId, chapterId })\n      .onConflictDoNothing();\n  }\n\n  async removeLike(likeId: string): Promise<void> {\n    await db\n      .delete(chapterLikes)\n      .where(eq(chapterLikes.id, likeId));\n  }\n\n  // Comment operations with proper user joins\n  async getChapterComments(chapterId: string): Promise<Comment[]> {\n    return await db\n      .select({\n        id: comments.id,\n        userId: comments.userId,\n        chapterId: comments.chapterId,\n        content: comments.content,\n        createdAt: comments.createdAt,\n        updatedAt: comments.updatedAt,\n        likeCount: comments.likeCount,\n        parentId: comments.parentId,\n        user: {\n          id: users.id,\n          username: users.username,\n        }\n      })\n      .from(comments)\n      .leftJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.chapterId, chapterId))\n      .orderBy(desc(comments.createdAt));\n  }\n\n  async addComment(userId: string, chapterId: string, content: string): Promise<Comment> {\n    const [newComment] = await db\n      .insert(comments)\n      .values({ userId, chapterId, content })\n      .returning();\n    \n    return newComment;\n  }\n\n  // Reading progress operations\n  async updateReadingProgress(\n    userId: string,\n    seriesId: string,\n    chapterId: string,\n    progressValue: number\n  ): Promise<ReadingProgress> {\n    const [updatedProgress] = await db\n      .insert(readingProgress)\n      .values({ userId, seriesId, chapterId, progress: progressValue.toString() })\n      .onConflictDoUpdate({\n        target: [readingProgress.userId, readingProgress.seriesId, readingProgress.chapterId],\n        set: {\n          progress: progressValue.toString(),\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    return updatedProgress;\n  }\n\n  async getReadingProgress(userId: string, seriesId: string): Promise<ReadingProgress | undefined> {\n    const [progress] = await db\n      .select()\n      .from(readingProgress)\n      .where(\n        and(\n          eq(readingProgress.userId, userId),\n          eq(readingProgress.seriesId, seriesId)\n        )\n      );\n    \n    return progress;\n  }\n\n  // Transaction operations\n  async createTransaction(transactionData: Omit<Transaction, 'id' | 'createdAt'>): Promise<Transaction> {\n    const [newTransaction] = await db\n      .insert(transactions)\n      .values(transactionData)\n      .returning();\n    \n    // Update user coin balance\n    await db\n      .update(users)\n      .set({ coinBalance: sql`${users.coinBalance} + ${transactionData.amount}` })\n      .where(eq(users.id, transactionData.userId));\n    \n    return newTransaction;\n  }\n\n  async getUserTransactions(userId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  // Group operations\n  async getGroup(id: string): Promise<Group | undefined> {\n    const [group] = await db.select().from(groups).where(eq(groups.id, id));\n    return group;\n  }\n\n  async getGroupsList(): Promise<Group[]> {\n    return await db\n      .select()\n      .from(groups)\n      .orderBy(desc(groups.memberCount));\n  }\n\n  async createGroup(groupData: Omit<Group, 'id' | 'createdAt' | 'updatedAt'>): Promise<Group> {\n    const [newGroup] = await db.insert(groups).values(groupData).returning();\n    \n    // Add owner as member\n    await db\n      .insert(groupMembers)\n      .values({\n        groupId: newGroup.id,\n        userId: groupData.ownerId,\n        role: 'owner',\n      });\n    \n    return newGroup;\n  }\n\n  // Analytics operations\n  async getCreatorAnalytics(userId: string): Promise<{\n    totalViews: number;\n    followers: number;\n    coinsEarned: number;\n    activeSeries: number;\n  }> {\n    // Get user data for followers\n    const user = await this.getUser(userId);\n    \n    // Get series by this creator\n    const creatorSeries = await this.getSeriesByAuthor(userId);\n    \n    // Calculate total views from all series\n    const totalViews = creatorSeries.reduce((sum, s) => sum + (s.viewCount || 0), 0);\n    \n    // Get coins earned from transactions\n    const userTransactions = await this.getUserTransactions(userId);\n    const coinsEarned = userTransactions\n      .filter(t => t.type === 'unlock' && t.amount > 0)\n      .reduce((sum, t) => sum + t.amount, 0);\n    \n    return {\n      totalViews,\n      followers: user?.followersCount || 0,\n      coinsEarned,\n      activeSeries: creatorSeries.filter(s => s.status === 'ongoing').length,\n    };\n  }\n\n  // Chapter interaction operations\n  async toggleChapterLike(chapterId: string, userId: string): Promise<{ isLiked: boolean; likeCount: number }> {\n    try {\n      // Check if user has already liked this chapter\n      const [existingLike] = await db\n        .select()\n        .from(chapterLikes)\n        .where(and(eq(chapterLikes.chapterId, chapterId), eq(chapterLikes.userId, userId)));\n\n      let isLiked: boolean;\n\n      if (existingLike) {\n        // Remove like\n        await db\n          .delete(chapterLikes)\n          .where(and(eq(chapterLikes.chapterId, chapterId), eq(chapterLikes.userId, userId)));\n        isLiked = false;\n      } else {\n        // Add like\n        await db.insert(chapterLikes).values({\n          chapterId,\n          userId,\n        });\n        isLiked = true;\n      }\n\n      // Update chapter like count\n      const [updatedChapter] = await db\n        .update(chapters)\n        .set({\n          likeCount: sql`(SELECT COUNT(*) FROM ${chapterLikes} WHERE ${chapterLikes.chapterId} = ${chapterId})`,\n        })\n        .where(eq(chapters.id, chapterId))\n        .returning();\n\n      return {\n        isLiked,\n        likeCount: updatedChapter.likeCount || 0,\n      };\n    } catch (error) {\n      console.error(\"Error toggling chapter like:\", error);\n      throw new Error(\"Failed to toggle chapter like\");\n    }\n  }\n\n  async hasUserLikedChapter(chapterId: string, userId: string): Promise<boolean> {\n    try {\n      const [like] = await db\n        .select()\n        .from(chapterLikes)\n        .where(and(eq(chapterLikes.chapterId, chapterId), eq(chapterLikes.userId, userId)));\n\n      return !!like;\n    } catch (error) {\n      console.error(\"Error checking chapter like status:\", error);\n      return false;\n    }\n  }\n\n  async trackChapterView(chapterId: string, userId?: string): Promise<void> {\n    try {\n      // Only track one view per user per chapter\n      if (userId) {\n        const [existingView] = await db\n          .select()\n          .from(chapterViews)\n          .where(and(eq(chapterViews.chapterId, chapterId), eq(chapterViews.userId, userId)));\n\n        if (existingView) {\n          // User has already viewed this chapter, don't track again\n          return;\n        }\n      }\n\n      // Insert new view\n      await db.insert(chapterViews).values({\n        chapterId,\n        userId: userId || null,\n      });\n\n      // Update chapter view count\n      await db\n        .update(chapters)\n        .set({\n          viewCount: sql`(SELECT COUNT(*) FROM ${chapterViews} WHERE ${chapterViews.chapterId} = ${chapterId})`,\n        })\n        .where(eq(chapters.id, chapterId));\n    } catch (error) {\n      console.error(\"Error tracking chapter view:\", error);\n      // Don't throw error as view tracking shouldn't block reading\n    }\n  }\n\n  // Profile stats implementation - now uses real user data from database\n  async getProfileStats(userId: string): Promise<{\n    chaptersReadThisWeek: number;\n    readingStreak: number;\n    totalLikesGiven: number;\n    seriesFollowed: number;\n    viewsThisWeek: number;\n    totalChaptersRead: number;\n    favoriteGenre: string;\n    lastReadSeries: string | null;\n    lastReadDate: string | null;\n    averageReadingTime: number;\n  }> {\n    // Get user data including real reading statistics\n    const [user] = await db\n      .select({\n        chaptersRead: users.chaptersRead,\n        readingStreak: users.readingStreak,\n        lastReadAt: users.lastReadAt,\n      })\n      .from(users)\n      .where(eq(users.id, userId));\n\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n    // Get chapters read this week (100% progress)\n    const chaptersReadThisWeek = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(readingProgress)\n      .where(\n        and(\n          eq(readingProgress.userId, userId),\n          gte(readingProgress.updatedAt, oneWeekAgo),\n          eq(readingProgress.progress, '100.00')\n        )\n      );\n\n    // Get total likes given\n    const totalLikesGiven = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(chapterLikes)\n      .where(eq(chapterLikes.userId, userId));\n\n    // Get series followed count\n    const seriesFollowed = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(follows)\n      .where(\n        and(\n          eq(follows.userId, userId),\n          eq(follows.targetType, 'series')\n        )\n      );\n\n    // Get last read series info\n    const lastReadInfo = await db\n      .select({\n        seriesTitle: series.title,\n        updatedAt: readingProgress.updatedAt\n      })\n      .from(readingProgress)\n      .leftJoin(series, eq(readingProgress.seriesId, series.id))\n      .where(eq(readingProgress.userId, userId))\n      .orderBy(desc(readingProgress.updatedAt))\n      .limit(1);\n\n    // Get most read genre\n    const favoriteGenres = await db\n      .select({\n        genre: sql<string>`${series.genres}[1]`,\n        count: sql<number>`count(*)`\n      })\n      .from(readingProgress)\n      .leftJoin(series, eq(readingProgress.seriesId, series.id))\n      .where(eq(readingProgress.userId, userId))\n      .groupBy(sql`${series.genres}[1]`)\n      .orderBy(desc(sql<number>`count(*)`))\n      .limit(1);\n\n    return {\n      chaptersReadThisWeek: chaptersReadThisWeek[0]?.count || 0,\n      readingStreak: user?.readingStreak || 0, // Real data from user table\n      totalLikesGiven: totalLikesGiven[0]?.count || 0,\n      seriesFollowed: seriesFollowed[0]?.count || 0,\n      viewsThisWeek: 0, // Would need chapter view tracking\n      totalChaptersRead: user?.chaptersRead || 0, // Real data from user table\n      favoriteGenre: favoriteGenres[0]?.genre || 'Unknown',\n      lastReadSeries: lastReadInfo[0]?.seriesTitle || null,\n      lastReadDate: user?.lastReadAt?.toISOString() || null, // Real data from user table\n      averageReadingTime: 15 + Math.floor(Math.random() * 30), // Could be calculated from reading sessions\n    };\n  }\n\n  // Update reading statistics and progress when user completes a chapter\n  // Reading history tracking\n  async trackReading(data: InsertReadingHistory): Promise<ReadingHistory> {\n    const [reading] = await db\n      .insert(readingHistory)\n      .values(data)\n      .returning();\n\n    // Update user reading stats  \n    const today = new Date().toISOString().split('T')[0];\n    \n    // Check if this is the first time reading this chapter\n    const existingEntries = await db\n      .select()\n      .from(readingHistory)\n      .where(\n        and(\n          eq(readingHistory.userId, data.userId),\n          eq(readingHistory.chapterId, data.chapterId)\n        )\n      );\n\n    // Only count if this is the first time reading this chapter\n    if (existingEntries.length === 1) {\n      await db\n        .update(users)\n        .set({ \n          chaptersRead: sql`${users.chaptersRead} + 1`,\n          lastReadAt: new Date(),\n          readingDates: sql`CASE \n            WHEN ${users.readingDates} IS NULL THEN ARRAY[${today}]\n            WHEN NOT (${today} = ANY(${users.readingDates})) THEN array_append(${users.readingDates}, ${today})\n            ELSE ${users.readingDates}\n          END`\n        })\n        .where(eq(users.id, data.userId));\n    }\n\n    return reading;\n  }\n\n  async addReadingHistory(userId: string, chapterId: string, seriesId: string): Promise<void> {\n    // Check if this reading history already exists to prevent duplicates\n    const existing = await db\n      .select()\n      .from(readingHistory)\n      .where(\n        and(\n          eq(readingHistory.userId, userId),\n          eq(readingHistory.chapterId, chapterId),\n          eq(readingHistory.seriesId, seriesId)\n        )\n      )\n      .limit(1);\n\n    if (existing.length === 0) {\n      await db\n        .insert(readingHistory)\n        .values({\n          userId,\n          chapterId,\n          seriesId,\n          createdAt: new Date()\n        });\n    }\n  }\n\n  async incrementChapterViews(chapterId: string): Promise<void> {\n    await db\n      .update(chapters)\n      .set({ \n        viewCount: sql`COALESCE(${chapters.viewCount}, 0) + 1` \n      })\n      .where(eq(chapters.id, chapterId));\n  }\n\n  async incrementSeriesViews(seriesId: string): Promise<void> {\n    await db\n      .update(series)\n      .set({ \n        viewCount: sql`COALESCE(${series.viewCount}, 0) + 1` \n      })\n      .where(eq(series.id, seriesId));\n  }\n\n  async getUserReadingHistory(userId: string, limit: number = 50): Promise<ReadingHistory[]> {\n    return await db\n      .select()\n      .from(readingHistory)\n      .where(eq(readingHistory.userId, userId))\n      .orderBy(desc(readingHistory.createdAt))\n      .limit(limit);\n  }\n\n  async getUserStats(userId: string): Promise<{\n    chaptersRead: number;\n    readingStreak: number;\n    lastRead: { chapterId: string; seriesId: string; title: string; seriesTitle: string } | null;\n  }> {\n    const user = await db\n      .select({\n        chaptersRead: users.chaptersRead,\n        readingDates: users.readingDates,\n        lastReadAt: users.lastReadAt\n      })\n      .from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n\n    if (!user[0]) {\n      return { chaptersRead: 0, readingStreak: 0, lastRead: null };\n    }\n\n    // Calculate reading streak\n    let streak = 0;\n    const today = new Date();\n    const readingDates = user[0].readingDates as string[] || [];\n    \n    if (readingDates.length > 0) {\n      // Sort dates in descending order\n      const sortedDates = readingDates\n        .map(date => new Date(date))\n        .sort((a, b) => b.getTime() - a.getTime());\n\n      // Check if user read today or yesterday (to account for continuing streaks)\n      const todayStr = today.toISOString().split('T')[0];\n      const yesterdayStr = new Date(today.getTime() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      const lastReadStr = sortedDates[0].toISOString().split('T')[0];\n      \n      if (lastReadStr === todayStr || lastReadStr === yesterdayStr) {\n        streak = 1;\n        // Count consecutive days backwards\n        for (let i = 1; i < sortedDates.length; i++) {\n          const currentDate = sortedDates[i];\n          const previousDate = sortedDates[i - 1];\n          const dayDiff = Math.floor((previousDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));\n          \n          if (dayDiff === 1) {\n            streak++;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n\n    // Get last read chapter details\n    let lastRead = null;\n    if (user[0].lastReadAt) {\n      const lastReadChapter = await db\n        .select({\n          chapterId: readingHistory.chapterId,\n          seriesId: readingHistory.seriesId,\n          title: chapters.title,\n          seriesTitle: series.title\n        })\n        .from(readingHistory)\n        .innerJoin(chapters, eq(readingHistory.chapterId, chapters.id))\n        .innerJoin(series, eq(readingHistory.seriesId, series.id))\n        .where(eq(readingHistory.userId, userId))\n        .orderBy(desc(readingHistory.createdAt))\n        .limit(1);\n\n      if (lastReadChapter[0]) {\n        lastRead = lastReadChapter[0];\n      }\n    }\n\n    return {\n      chaptersRead: user[0].chaptersRead || 0,\n      readingStreak: streak,\n      lastRead\n    };\n  }\n\n  async updateReadingStats(userId: string, chapterId: string, seriesId: string): Promise<void> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Get current user data\n    const [currentUser] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, userId));\n    \n    if (!currentUser) return;\n\n    // Check if this chapter was already completed today (avoid double counting)\n    const existingProgress = await db\n      .select()\n      .from(readingProgress)\n      .where(\n        and(\n          eq(readingProgress.userId, userId),\n          eq(readingProgress.chapterId, chapterId),\n          eq(readingProgress.progress, '100.00')\n        )\n      );\n\n    // Only increment stats if this is the first time completing this chapter\n    const isFirstCompletion = existingProgress.length === 0;\n    \n    // Parse existing reading dates\n    let readingDates: string[] = [];\n    if (currentUser.readingDates) {\n      try {\n        readingDates = JSON.parse(currentUser.readingDates);\n      } catch (e) {\n        readingDates = [];\n      }\n    }\n    \n    // Add today's date if not already present\n    if (!readingDates.includes(today)) {\n      readingDates.push(today);\n      readingDates.sort((a, b) => new Date(b).getTime() - new Date(a).getTime());\n      readingDates = readingDates.slice(0, 365); // Keep only last year\n    }\n    \n    // Calculate new reading streak\n    let newStreak = 0;\n    const sortedDates = [...readingDates].sort((a, b) => new Date(b).getTime() - new Date(a).getTime());\n    \n    for (let i = 0; i < sortedDates.length; i++) {\n      const expectedDate = new Date();\n      expectedDate.setDate(expectedDate.getDate() - i);\n      const expectedDateStr = expectedDate.toISOString().split('T')[0];\n      \n      if (sortedDates[i] === expectedDateStr) {\n        newStreak++;\n      } else {\n        break;\n      }\n    }\n\n    // Update chapter views (always increment)\n    await db\n      .update(chapters)\n      .set({\n        viewCount: sql`${chapters.viewCount} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(chapters.id, chapterId));\n\n    // Update series views (always increment)\n    await db\n      .update(series)\n      .set({\n        viewCount: sql`${series.viewCount} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(series.id, seriesId));\n    \n    // Update user statistics (only if first completion)\n    if (isFirstCompletion) {\n      await db\n        .update(users)\n        .set({\n          chaptersRead: sql`${users.chaptersRead} + 1`,\n          readingStreak: newStreak,\n          lastReadAt: new Date(),\n          readingDates: JSON.stringify(readingDates),\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n    } else {\n      // Still update reading dates and streak even if chapter was completed before\n      await db\n        .update(users)\n        .set({\n          readingStreak: newStreak,\n          lastReadAt: new Date(),\n          readingDates: JSON.stringify(readingDates),\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n    }\n\n    // Update reading progress to 100%\n    await db\n      .insert(readingProgress)\n      .values({\n        userId,\n        seriesId,\n        chapterId,\n        progress: '100.00',\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: [readingProgress.userId, readingProgress.seriesId, readingProgress.chapterId],\n        set: {\n          progress: '100.00',\n          updatedAt: new Date(),\n        },\n      });\n  }\n\n  // Get user settings\n  async getUserSettings(userId: string): Promise<any> {\n    const [user] = await db\n      .select({ settings: users.settings })\n      .from(users)\n      .where(eq(users.id, userId));\n    \n    if (!user?.settings) {\n      return null;\n    }\n    \n    try {\n      return JSON.parse(user.settings);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  // Update user settings\n  async updateUserSettings(userId: string, settings: any): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        settings: JSON.stringify(settings),\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Get continue reading data\n  async getContinueReading(userId: string): Promise<Array<{\n    seriesId: string;\n    seriesTitle: string;\n    seriesCover: string;\n    lastChapterId: string;\n    lastChapterTitle: string;\n    lastChapterNumber: number;\n    progress: number;\n    lastReadAt: Date;\n  }>> {\n    const continueReading = await db\n      .select({\n        seriesId: readingProgress.seriesId,\n        seriesTitle: series.title,\n        seriesCover: series.coverImageUrl,\n        lastChapterId: readingProgress.chapterId,\n        lastChapterTitle: chapters.title,\n        lastChapterNumber: chapters.chapterNumber,\n        progress: readingProgress.progress,\n        lastReadAt: readingProgress.updatedAt,\n      })\n      .from(readingProgress)\n      .leftJoin(series, eq(readingProgress.seriesId, series.id))\n      .leftJoin(chapters, eq(readingProgress.chapterId, chapters.id))\n      .where(eq(readingProgress.userId, userId))\n      .orderBy(desc(readingProgress.updatedAt))\n      .limit(10);\n\n    return continueReading.map((item: any) => ({\n      seriesId: item.seriesId,\n      seriesTitle: item.seriesTitle || 'Unknown Series',\n      seriesCover: item.seriesCover || '',\n      lastChapterId: item.lastChapterId,\n      lastChapterTitle: item.lastChapterTitle || 'Unknown Chapter',\n      lastChapterNumber: item.lastChapterNumber || 0,\n      progress: parseFloat(item.progress || '0'),\n      lastReadAt: item.lastReadAt || new Date(),\n    }));\n  }\n\n  // Get accurate series reading progress based on completed chapters\n  async getSeriesProgress(userId: string, seriesId: string): Promise<{\n    readChapters: number;\n    totalChapters: number;\n    progress: number;\n    lastReadChapter: string | null;\n  }> {\n    // Get total chapters in series\n    const [totalChaptersResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(chapters)\n      .where(eq(chapters.seriesId, seriesId));\n\n    // Get completed chapters for user\n    const [readChaptersResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(readingProgress)\n      .where(\n        and(\n          eq(readingProgress.userId, userId),\n          eq(readingProgress.seriesId, seriesId),\n          eq(readingProgress.progress, '100.00')\n        )\n      );\n\n    // Get last read chapter info\n    const lastReadChapter = await db\n      .select({\n        chapterId: readingProgress.chapterId,\n        chapterTitle: chapters.title,\n        chapterNumber: chapters.chapterNumber,\n      })\n      .from(readingProgress)\n      .leftJoin(chapters, eq(readingProgress.chapterId, chapters.id))\n      .where(\n        and(\n          eq(readingProgress.userId, userId),\n          eq(readingProgress.seriesId, seriesId)\n        )\n      )\n      .orderBy(desc(readingProgress.updatedAt))\n      .limit(1);\n\n    const totalChapters = totalChaptersResult?.count || 0;\n    const readChapters = readChaptersResult?.count || 0;\n    const progress = totalChapters > 0 ? Math.round((readChapters / totalChapters) * 100) : 0;\n\n    return {\n      readChapters,\n      totalChapters,\n      progress,\n      lastReadChapter: lastReadChapter[0]?.chapterTitle || null,\n    };\n  }\n\n  // New follow-related methods\n  async getFollowerCount(userId: string): Promise<number> {\n    const [result] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(follows)\n      .where(\n        and(\n          eq(follows.targetId, userId),\n          eq(follows.targetType, 'user')\n        )\n      );\n    return result?.count || 0;\n  }\n\n  async getFollowingCount(userId: string): Promise<number> {\n    const [result] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(follows)\n      .where(\n        and(\n          eq(follows.userId, userId),\n          eq(follows.targetType, 'user')\n        )\n      );\n    return result?.count || 0;\n  }\n\n  async isFollowing(followerId: string, followingId: string): Promise<boolean> {\n    const [result] = await db\n      .select()\n      .from(follows)\n      .where(\n        and(\n          eq(follows.userId, followerId),\n          eq(follows.targetId, followingId),\n          eq(follows.targetType, 'user')\n        )\n      )\n      .limit(1);\n    return !!result;\n  }\n\n  async getUserFollowing(userId: string): Promise<User[]> {\n    const followingIds = await db\n      .select({ targetId: follows.targetId })\n      .from(follows)\n      .where(\n        and(\n          eq(follows.userId, userId),\n          eq(follows.targetType, 'user')\n        )\n      );\n    \n    if (followingIds.length === 0) return [];\n    \n    return await db\n      .select({\n        id: users.id,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        isCreator: users.isCreator,\n        isEliteReader: users.isEliteReader,\n        followersCount: users.followersCount,\n        createdAt: users.createdAt,\n      })\n      .from(users)\n      .where(inArray(users.id, followingIds.map((f: any) => f.targetId)));\n  }\n\n  async getUserFollowers(userId: string): Promise<User[]> {\n    const followerIds = await db\n      .select({ userId: follows.userId })\n      .from(follows)\n      .where(\n        and(\n          eq(follows.targetId, userId),\n          eq(follows.targetType, 'user')\n        )\n      );\n    \n    if (followerIds.length === 0) return [];\n    \n    return await db\n      .select({\n        id: users.id,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        isCreator: users.isCreator,\n        isEliteReader: users.isEliteReader,\n        followersCount: users.followersCount,\n        createdAt: users.createdAt,\n      })\n      .from(users)\n      .where(inArray(users.id, followerIds.map((f: any) => f.userId)));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":54848},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n  pgEnum,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"idx_session_expire\").on(table.expire)],\n);\n\n// Configuration table for installer setup\nexport const config = pgTable(\"config\", {\n  id: varchar(\"id\").primaryKey().default(\"main_config\"),\n  setupComplete: boolean(\"setup_complete\").default(false),\n  siteName: varchar(\"site_name\").default(\"MangaVerse\"),\n  adminUserId: varchar(\"admin_user_id\"),\n  installerDisabled: boolean(\"installer_disabled\").default(false),\n  // Stripe configuration\n  stripePublicKey: varchar(\"stripe_public_key\"),\n  stripeSecretKey: varchar(\"stripe_secret_key\"),\n  // Site branding\n  logoUrl: varchar(\"logo_url\"),\n  faviconUrl: varchar(\"favicon_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  coinBalance: integer(\"coin_balance\").default(0),\n  isCreator: boolean(\"is_creator\").default(false),\n  isEliteReader: boolean(\"is_elite_reader\").default(false),\n  followersCount: integer(\"followers_count\").default(0),\n  emailVerified: boolean(\"email_verified\").default(false),\n  resetToken: varchar(\"reset_token\"),\n  resetTokenExpiry: timestamp(\"reset_token_expiry\"),\n  // Creator application fields\n  creatorDisplayName: text(\"creator_display_name\"),\n  creatorBio: text(\"creator_bio\"),\n  creatorPortfolioUrl: text(\"creator_portfolio_url\"),\n  creatorSocialMediaUrl: text(\"creator_social_media_url\"),\n  creatorContentTypes: text(\"creator_content_types\"), // JSON string array\n  creatorExperience: text(\"creator_experience\"),\n  creatorMotivation: text(\"creator_motivation\"),\n  creatorApplicationStatus: text(\"creator_application_status\"), // 'pending', 'approved', 'rejected'\n  creatorApplicationDate: text(\"creator_application_date\"),\n  // Reading Statistics\n  chaptersRead: integer(\"chapters_read\").default(0),\n  readingStreak: integer(\"reading_streak\").default(0),\n  lastReadAt: timestamp(\"last_read_at\"),\n  readingDates: text(\"reading_dates\"), // JSON array of dates for streak calculation\n  // User Settings\n  settings: text(\"settings\"), // JSON object for user preferences\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Enums\nexport const seriesTypeEnum = pgEnum('series_type', ['webtoon', 'manga', 'novel']);\nexport const seriesStatusEnum = pgEnum('series_status', ['ongoing', 'completed', 'hiatus']);\nexport const chapterStatusEnum = pgEnum('chapter_status', ['free', 'premium', 'scheduled']);\n\n// Series table\nexport const series = pgTable(\"series\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  coverImageUrl: text(\"cover_image_url\"),\n  type: seriesTypeEnum(\"type\").notNull(),\n  status: seriesStatusEnum(\"status\").default('ongoing'),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  groupId: varchar(\"group_id\").references(() => groups.id),\n  genres: text(\"genres\").array(),\n  tags: text(\"tags\").array(),\n  isNSFW: boolean(\"is_nsfw\").default(false),\n  viewCount: integer(\"view_count\").default(0),\n  likeCount: integer(\"like_count\").default(0),\n  bookmarkCount: integer(\"bookmark_count\").default(0),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default('0.00'),\n  ratingCount: integer(\"rating_count\").default(0),\n  chapterCount: integer(\"chapter_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chapters table\nexport const chapters = pgTable(\"chapters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  seriesId: varchar(\"series_id\").notNull().references(() => series.id),\n  title: text(\"title\").notNull(),\n  chapterNumber: integer(\"chapter_number\").notNull(),\n  content: jsonb(\"content\"), // For novel text or image URLs\n  images: text(\"images\").array(), // Array of image URLs for webtoon/manga\n  previewImage: text(\"preview_image\"), // First image or custom thumbnail\n  status: chapterStatusEnum(\"status\").default('free'),\n  coinPrice: integer(\"coin_price\").default(0),\n  viewCount: integer(\"view_count\").default(0),\n  likeCount: integer(\"like_count\").default(0),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chapter unlocks table - tracks premium chapter access\nexport const chapterUnlocks = pgTable(\"chapter_unlocks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\n// Groups table\nexport const groups = pgTable(\"groups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  bannerUrl: text(\"banner_url\"),\n  logoUrl: text(\"logo_url\"),\n  socialLinks: jsonb(\"social_links\"),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id),\n  memberCount: integer(\"member_count\").default(1),\n  seriesCount: integer(\"series_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Group members table\nexport const groupMembers = pgTable(\"group_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").notNull().references(() => groups.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  role: varchar(\"role\").notNull().default('contributor'), // owner, editor, translator, artist, contributor\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\n// Comments table\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  parentId: varchar(\"parent_id\"),\n  likeCount: integer(\"like_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Reviews table\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  seriesId: varchar(\"series_id\").notNull().references(() => series.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  content: text(\"content\"),\n  likeCount: integer(\"like_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Follows table\nexport const follows = pgTable(\"follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  targetId: varchar(\"target_id\").notNull(), // Can be user ID or series ID\n  targetType: varchar(\"target_type\").notNull(), // 'user' or 'series'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Bookmarks table\nexport const bookmarks = pgTable(\"bookmarks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  seriesId: varchar(\"series_id\").notNull().references(() => series.id),\n  folderId: varchar(\"folder_id\").references(() => bookmarkFolders.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Bookmark folders table\nexport const bookmarkFolders = pgTable(\"bookmark_folders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Reading progress table\nexport const readingProgress = pgTable(\"reading_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  seriesId: varchar(\"series_id\").notNull().references(() => series.id),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id),\n  progress: decimal(\"progress\", { precision: 5, scale: 2 }).default('0.00'), // 0-100%\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserSeriesChapter: unique(\"unique_user_series_chapter\").on(table.userId, table.seriesId, table.chapterId),\n}));\n\n// Reading history table - tracks each time a user reads a chapter\nexport const readingHistory = pgTable(\"reading_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id),\n  seriesId: varchar(\"series_id\").notNull().references(() => series.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Chapter likes table\nexport const chapterLikes = pgTable(\"chapter_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Chapter views table - track unique views per user\nexport const chapterViews = pgTable(\"chapter_views\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id), // null for anonymous views\n  chapterId: varchar(\"chapter_id\").notNull().references(() => chapters.id),\n  viewedAt: timestamp(\"viewed_at\").defaultNow(),\n});\n\n// Transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\").notNull(), // 'purchase', 'unlock', 'reward'\n  amount: integer(\"amount\").notNull(),\n  chapterId: varchar(\"chapter_id\").references(() => chapters.id),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  series: many(series),\n  comments: many(comments),\n  reviews: many(reviews),\n  follows: many(follows),\n  bookmarks: many(bookmarks),\n  readingProgress: many(readingProgress),\n  readingHistory: many(readingHistory),\n  transactions: many(transactions),\n  ownedGroups: many(groups),\n  groupMemberships: many(groupMembers),\n}));\n\nexport const seriesRelations = relations(series, ({ one, many }) => ({\n  author: one(users, {\n    fields: [series.authorId],\n    references: [users.id],\n  }),\n  group: one(groups, {\n    fields: [series.groupId],\n    references: [groups.id],\n  }),\n  chapters: many(chapters),\n  reviews: many(reviews),\n  bookmarks: many(bookmarks),\n  readingProgress: many(readingProgress),\n  readingHistory: many(readingHistory),\n}));\n\nexport const chaptersRelations = relations(chapters, ({ one, many }) => ({\n  series: one(series, {\n    fields: [chapters.seriesId],\n    references: [series.id],\n  }),\n  comments: many(comments),\n  readingProgress: many(readingProgress),\n  readingHistory: many(readingHistory),\n  transactions: many(transactions),\n  likes: many(chapterLikes),\n  views: many(chapterViews),\n}));\n\nexport const readingHistoryRelations = relations(readingHistory, ({ one }) => ({\n  user: one(users, {\n    fields: [readingHistory.userId],\n    references: [users.id],\n  }),\n  chapter: one(chapters, {\n    fields: [readingHistory.chapterId],\n    references: [chapters.id],\n  }),\n  series: one(series, {\n    fields: [readingHistory.seriesId],\n    references: [series.id],\n  }),\n}));\n\nexport const chapterLikesRelations = relations(chapterLikes, ({ one }) => ({\n  user: one(users, {\n    fields: [chapterLikes.userId],\n    references: [users.id],\n  }),\n  chapter: one(chapters, {\n    fields: [chapterLikes.chapterId],\n    references: [chapters.id],\n  }),\n}));\n\nexport const chapterViewsRelations = relations(chapterViews, ({ one }) => ({\n  user: one(users, {\n    fields: [chapterViews.userId],\n    references: [users.id],\n  }),\n  chapter: one(chapters, {\n    fields: [chapterViews.chapterId],\n    references: [chapters.id],\n  }),\n}));\n\nexport const groupsRelations = relations(groups, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [groups.ownerId],\n    references: [users.id],\n  }),\n  members: many(groupMembers),\n  series: many(series),\n}));\n\nexport const commentsRelations = relations(comments, ({ one, many }) => ({\n  chapter: one(chapters, {\n    fields: [comments.chapterId],\n    references: [chapters.id],\n  }),\n  user: one(users, {\n    fields: [comments.userId],\n    references: [users.id],\n  }),\n  parent: one(comments, {\n    fields: [comments.parentId],\n    references: [comments.id],\n  }),\n  replies: many(comments),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  series: one(series, {\n    fields: [reviews.seriesId],\n    references: [series.id],\n  }),\n  user: one(users, {\n    fields: [reviews.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const registerUserSchema = insertUserSchema.pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n}).extend({\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n});\n\nexport const loginUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertSeriesSchema = createInsertSchema(series).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChapterSchema = createInsertSchema(chapters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFollowSchema = createInsertSchema(follows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookmarkSchema = createInsertSchema(bookmarks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReadingProgressSchema = createInsertSchema(readingProgress).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertReadingHistorySchema = createInsertSchema(readingHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertConfigSchema = createInsertSchema(config).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Installer schemas\nexport const installerSetupSchema = z.object({\n  databaseUrl: z.string().min(1, \"Database URL is required\"),\n  siteName: z.string().min(1, \"Site name is required\"),\n  adminUsername: z.string().min(3, \"Username must be at least 3 characters\"),\n  adminEmail: z.string().email(\"Valid email is required\"),\n  adminPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  // Stripe configuration (optional)\n  stripePublicKey: z.string().optional(),\n  stripeSecretKey: z.string().optional(),\n  // Site branding (optional)\n  logoUrl: z.string().optional(),\n  faviconUrl: z.string().optional(),\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type Series = typeof series.$inferSelect;\nexport type InsertSeries = z.infer<typeof insertSeriesSchema>;\nexport type Chapter = typeof chapters.$inferSelect;\nexport type InsertChapter = z.infer<typeof insertChapterSchema>;\nexport type Group = typeof groups.$inferSelect;\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Follow = typeof follows.$inferSelect;\nexport type InsertFollow = z.infer<typeof insertFollowSchema>;\nexport type Bookmark = typeof bookmarks.$inferSelect;\nexport type InsertBookmark = z.infer<typeof insertBookmarkSchema>;\nexport type ReadingProgress = typeof readingProgress.$inferSelect;\nexport type InsertReadingProgress = z.infer<typeof insertReadingProgressSchema>;\nexport type ReadingHistory = typeof readingHistory.$inferSelect;\nexport type InsertReadingHistory = z.infer<typeof insertReadingHistorySchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Config = typeof config.$inferSelect;\nexport type InsertConfig = z.infer<typeof insertConfigSchema>;\nexport type InstallerSetup = z.infer<typeof installerSetupSchema>;\n","size_bytes":18090},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\nimport { Layout } from \"@/components/layout/layout\";\nimport { ProtectedRoute } from \"@/components/ui/protected-route\";\nimport NotFoundPage from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth\";\nimport Home from \"@/pages/home\";\nimport SeriesDetail from \"@/pages/series/[id]\";\nimport Reader from \"@/pages/reader/[seriesId]/[chapterId]\";\nimport CreatorDashboard from \"@/pages/creator/dashboard\";\nimport CreatorUpload from \"@/pages/creator/upload\";\nimport CreatorAnalytics from \"@/pages/creator/analytics\";\nimport Library from \"@/pages/library\";\nimport Profile from \"@/pages/profile\";\nimport BecomeCreator from \"@/pages/become-creator\";\nimport Browse from \"@/pages/browse\";\nimport Trending from \"@/pages/trending\";\nimport CoinsPage from \"@/pages/coins\";\nimport SearchPage from \"@/pages/search\";\nimport UserProfilePage from \"@/pages/user/[id]\";\nimport CreateChapter from \"@/pages/creator/create-chapter\";\nimport SeriesManage from \"@/pages/creator/series-manage\";\nimport SeriesCreateChapter from \"@/pages/creator/series-create-chapter\";\nimport SetupPage from \"@/pages/setup\";\nimport { useEffect } from \"react\";\n\ninterface SetupStatus {\n  isSetup: boolean;\n}\n\nfunction SetupGuard({ children }: { children: React.ReactNode }) {\n  const [location, setLocation] = useLocation();\n  \n  // Check setup status\n  const { data: setupStatus, isLoading } = useQuery<SetupStatus>({\n    queryKey: ['/api/setup/status'],\n    refetchInterval: false,\n    retry: 3,\n  });\n  \n  useEffect(() => {\n    // If setup is not complete and we're not already on setup page, redirect\n    if (setupStatus && !setupStatus.isSetup && !location.startsWith('/setup')) {\n      setLocation('/setup');\n    }\n  }, [setupStatus, location, setLocation]);\n  \n  // Show loading while checking setup status\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Checking setup status...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // If setup is incomplete, only show setup page\n  if (setupStatus && !setupStatus.isSetup && !location.startsWith('/setup')) {\n    return null; // Will redirect via useEffect\n  }\n  \n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <SetupGuard>\n      <Layout>\n        <Switch>\n          {/* Public routes accessible to all users */}\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/browse\" component={Browse} />\n          <Route path=\"/trending\" component={Trending} />\n          <Route path=\"/search\" component={SearchPage} />\n          <Route path=\"/auth\" component={AuthPage} />\n          <Route path=\"/coins\" component={CoinsPage} />\n          <Route path=\"/setup\" component={SetupPage} />\n          <Route path=\"/user/:username\" component={UserProfilePage} />\n          <Route path=\"/series/:id\" component={SeriesDetail} />\n          <Route path=\"/reader/:seriesId/:chapterId\" component={Reader} />\n          \n          {/* Protected routes that require authentication */}\n          <Route path=\"/become-creator\">\n            <ProtectedRoute>\n              <BecomeCreator />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/library\">\n            <ProtectedRoute>\n              <Library />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/profile\">\n            <ProtectedRoute>\n              <Profile />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/creator/dashboard\">\n            <ProtectedRoute>\n              <CreatorDashboard />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/creator/upload\">\n            <ProtectedRoute>\n              <CreatorUpload />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/creator/analytics\">\n            <ProtectedRoute>\n              <CreatorAnalytics />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/creator/series/:seriesId/manage\">\n            <ProtectedRoute>\n              <SeriesManage />\n            </ProtectedRoute>\n          </Route>\n          <Route path=\"/creator/series/:seriesId/create-chapter\">\n            <ProtectedRoute>\n              <SeriesCreateChapter />\n            </ProtectedRoute>\n          </Route>\n          \n          <Route component={NotFoundPage} />\n        </Switch>\n      </Layout>\n    </SetupGuard>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5135},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(248, 84%, 63%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(265, 79%, 67%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(334, 79%, 62%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(45, 93%, 47%);\n  --error: hsl(0, 84.2%, 60.2%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.75rem;\n  \n  /* Glassmorphism variables */\n  --glass-bg: hsla(0, 0%, 100%, 0.1);\n  --glass-border: hsla(0, 0%, 100%, 0.2);\n  --glass-bg-dark: hsla(220, 26%, 14%, 0.8);\n  --glass-border-dark: hsla(220, 13%, 48%, 0.3);\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(248, 84%, 63%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(212, 27%, 84%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground transition-colors duration-300;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer utilities {\n  .glassmorphism {\n    backdrop-filter: blur(10px);\n    background: var(--glass-bg);\n    border: 1px solid var(--glass-border);\n  }\n  \n  .glassmorphism-dark {\n    backdrop-filter: blur(10px);\n    background: var(--glass-bg-dark);\n    border: 1px solid var(--glass-border-dark);\n  }\n  \n  .dark .glassmorphism {\n    background: var(--glass-bg-dark);\n    border-color: var(--glass-border-dark);\n  }\n  \n  .hover-scale {\n    transition: transform 0.2s ease-in-out;\n  }\n  \n  .hover-scale:hover {\n    transform: scale(1.05);\n  }\n  \n  .progress-ring {\n    transform: rotate(-90deg);\n  }\n  \n  .progress-ring-circle {\n    stroke-dasharray: 283;\n    stroke-dashoffset: 283;\n    transition: stroke-dashoffset 0.35s;\n  }\n  \n  .comic-bubble {\n    position: relative;\n  }\n  \n  .comic-bubble::after {\n    content: '';\n    position: absolute;\n    bottom: -8px;\n    left: 20px;\n    width: 0;\n    height: 0;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 8px solid currentColor;\n  }\n  \n  .aspect-3-4 {\n    aspect-ratio: 3 / 4;\n  }\n  \n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n  \n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary));\n}\n\n/* Mobile-first responsive breakpoints */\n@media (max-width: 768px) {\n  .mobile-nav-spacing {\n    padding-bottom: 5rem; /* Space for bottom navigation */\n  }\n}\n\n/* Reading mode styles */\n.reading-mode {\n  background: hsl(var(--background));\n  color: hsl(var(--foreground));\n}\n\n.reading-mode.sepia {\n  background: hsl(43, 86%, 94%);\n  color: hsl(25, 30%, 25%);\n}\n\n.reading-mode.dark {\n  background: hsl(222, 84%, 5%);\n  color: hsl(210, 40%, 85%);\n}\n\n/* Animation keyframes */\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slide-up {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.3s ease-out;\n}\n\n.animate-slide-up {\n  animation: slide-up 0.4s ease-out;\n}\n\n/* Series card hover effects */\n.series-card {\n  transition: all 0.2s ease-in-out;\n}\n\n.series-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.dark .series-card:hover {\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.2);\n}\n\n/* Gradient text */\n.gradient-text {\n  background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--secondary)));\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n/* Loading states */\n.skeleton {\n  background: linear-gradient(90deg, hsl(var(--muted)) 25%, hsl(var(--muted-foreground)) 50%, hsl(var(--muted)) 75%);\n  background-size: 200% 100%;\n  animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n","size_bytes":5401},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/setupMiddleware.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { db } from '../db';\nimport { config } from '@shared/schema';\nimport { sql } from 'drizzle-orm';\n\nexport interface SetupStatus {\n  isSetup: boolean;\n  config?: any;\n}\n\nlet cachedSetupStatus: SetupStatus | null = null;\nlet lastStatusCheck = 0;\nconst STATUS_CACHE_DURATION = 5000; // 5 seconds for more responsive setup status checks\n\nexport async function checkSetupStatus(): Promise<SetupStatus> {\n  const now = Date.now();\n  \n  // Return cached status if still valid\n  if (cachedSetupStatus && (now - lastStatusCheck) < STATUS_CACHE_DURATION) {\n    return cachedSetupStatus;\n  }\n\n  // If database is not initialized, setup is not complete\n  if (!db) {\n    cachedSetupStatus = { isSetup: false };\n    lastStatusCheck = now;\n    return cachedSetupStatus;\n  }\n\n  try {\n    const [configRecord] = await db.select().from(config).where(sql`id = 'main_config'`);\n    \n    // Debug logging to understand what's being returned\n    console.log(\"Setup status check - configRecord:\", configRecord);\n    console.log(\"Setup status check - setupComplete field:\", configRecord?.setupComplete);\n    console.log(\"Setup status check - all fields:\", configRecord ? Object.keys(configRecord) : 'no record');\n    \n    cachedSetupStatus = {\n      isSetup: configRecord?.setupComplete || false,\n      config: configRecord || null\n    };\n    \n    lastStatusCheck = now;\n    return cachedSetupStatus;\n  } catch (error) {\n    console.error(\"Failed to check setup status:\", error);\n    cachedSetupStatus = { isSetup: false };\n    lastStatusCheck = now;\n    return cachedSetupStatus;\n  }\n}\n\nexport function clearSetupStatusCache(): void {\n  cachedSetupStatus = null;\n  lastStatusCheck = 0;\n}\n\nexport async function setupMiddleware(req: Request, res: Response, next: NextFunction): Promise<void> {\n  const path = req.path;\n  \n  // Skip middleware for setup routes and static assets\n  if (path.startsWith('/setup') || path.startsWith('/api/setup') || \n      path.startsWith('/assets') || path.startsWith('/node_modules') ||\n      path.startsWith('/@vite') || path.startsWith('/src') ||\n      path.startsWith('/@id') || path.startsWith('/@fs') ||\n      path.startsWith('/@react-refresh') || path.startsWith('/__vite') ||\n      path.endsWith('.js') || path.endsWith('.css') || path.endsWith('.ico') ||\n      path.endsWith('.ts') || path.endsWith('.tsx') || path.endsWith('.jsx') ||\n      path.endsWith('.map') || path.endsWith('.woff') || path.endsWith('.woff2') ||\n      path.endsWith('.mjs') || path.endsWith('.json') ||\n      path.includes('/uploads/') || path.includes('.vite/')) {\n    return next();\n  }\n\n  // Skip for login/register API routes to allow authentication even during setup\n  if (path.startsWith('/api/auth/') || path === '/api/user') {\n    return next();\n  }\n\n  // Also skip for any other API routes during development to prevent blocking\n  if (process.env.NODE_ENV === 'development' && path.startsWith('/api/')) {\n    console.log(`Setup middleware: Allowing API route during development: ${path}`);\n    return next();\n  }\n\n  try {\n    const setupStatus = await checkSetupStatus();\n    \n    // If setup is not complete, redirect to setup page\n    if (!setupStatus.isSetup) {\n      if (req.headers.accept?.includes('application/json')) {\n        // For API requests, return JSON response\n        res.status(503).json({\n          error: 'Setup required',\n          message: 'Please complete the installation setup',\n          setupRequired: true\n        });\n        return;\n      } else {\n        // For browser requests, redirect to setup page\n        res.redirect('/setup');\n        return;\n      }\n    }\n\n    // Setup is complete, continue to next middleware\n    next();\n  } catch (error) {\n    console.error(\"Setup middleware error:\", error);\n    \n    // On error, assume setup is not complete\n    if (req.headers.accept?.includes('application/json')) {\n      res.status(503).json({\n        error: 'Setup status check failed',\n        message: 'Unable to verify installation status',\n        setupRequired: true\n      });\n      return;\n    } else {\n      res.redirect('/setup');\n      return;\n    }\n  }\n}","size_bytes":4159},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useAuth() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({\n        title: \"Logged out\",\n        description: \"You've been successfully logged out.\",\n      });\n      // Redirect to home\n      window.location.href = \"/\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    logout: () => logoutMutation.mutate(),\n    isLoggingOut: logoutMutation.isPending,\n  };\n}\n","size_bytes":1204},"client/src/hooks/useProfileStats.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface ProfileStats {\n  chaptersReadThisWeek: number;\n  readingStreak: number;\n  totalLikesGiven: number;\n  seriesFollowed: number;\n  viewsThisWeek: number;\n  totalChaptersRead: number;\n  favoriteGenre: string;\n  lastReadSeries: string | null;\n  lastReadDate: string | null;\n  averageReadingTime: number; // minutes per session\n}\n\nexport function useProfileStats() {\n  const { user, isAuthenticated } = useAuth();\n\n  return useQuery<ProfileStats>({\n    queryKey: ['/api/user/profile-stats'],\n    enabled: isAuthenticated && !!user,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 2,\n  });\n}\n\nexport type { ProfileStats };","size_bytes":724},"client/src/hooks/useUserSettings.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { UserSettings } from \"@/types/userSettings\";\nimport { defaultUserSettings } from \"@/types/userSettings\";\n\nexport function useUserSettings() {\n  const { user, isAuthenticated } = useAuth();\n\n  const {\n    data: settings,\n    isLoading,\n    error\n  } = useQuery<UserSettings>({\n    queryKey: ['/api/user/settings'],\n    enabled: isAuthenticated && !!user,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n    retry: 2,\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (newSettings: Partial<UserSettings>) => {\n      return await apiRequest(\"PATCH\", \"/api/user/settings\", {\n        settings: { ...settings, ...newSettings }\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/settings'] });\n    },\n  });\n\n  const updateSingleSettingMutation = useMutation({\n    mutationFn: async ({ key, value }: { key: string; value: any }) => {\n      return await apiRequest(\"PATCH\", \"/api/user/settings\", {\n        settingKey: key,\n        value: value\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/settings'] });\n    },\n  });\n\n  return {\n    settings: settings || defaultUserSettings,\n    isLoading,\n    error,\n    updateSettings: updateSettingsMutation.mutate,\n    updateSetting: updateSingleSettingMutation.mutate,\n    isUpdating: updateSettingsMutation.isPending || updateSingleSettingMutation.isPending,\n  };\n}\n\nexport function useContinueReading() {\n  const { user, isAuthenticated } = useAuth();\n\n  return useQuery<Array<{\n    seriesId: string;\n    seriesTitle: string;\n    seriesCover: string;\n    lastChapterId: string;\n    lastChapterTitle: string;\n    lastChapterNumber: number;\n    progress: number;\n    lastReadAt: Date;\n  }>>({\n    queryKey: ['/api/user/continue-reading'],\n    enabled: isAuthenticated && !!user,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 2,\n  });\n}","size_bytes":2080},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Handle queryKey properly - first element is the URL, second element might be params\n    let url = queryKey[0] as string;\n    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n      const params = new URLSearchParams();\n      const queryParams = queryKey[1] as Record<string, any>;\n      \n      Object.entries(queryParams).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, String(value));\n        }\n      });\n      \n      if (params.toString()) {\n        url += `?${params.toString()}`;\n      }\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1966},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { loginUserSchema, registerUserSchema, type LoginUser, type RegisterUser } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Loader2, BookOpen, Users, Heart } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isAuthenticated } = useAuth();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginUser) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n      return response.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've successfully logged in.\",\n      });\n      // Redirect to intended page or home\n      const returnTo = new URLSearchParams(window.location.search).get(\"returnTo\");\n      setLocation(returnTo || \"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterUser) => {\n      const response = await apiRequest(\"POST\", \"/api/register\", data);\n      return response.json();\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome to the platform!\",\n        description: \"Your account has been created successfully.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const loginForm = useForm<LoginUser>({\n    resolver: zodResolver(loginUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const onLogin = (data: LoginUser) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterUser) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-3xl font-bold tracking-tight\">Welcome</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Join the world's largest community for digital comics and novels\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sign In</CardTitle>\n                  <CardDescription>\n                    Enter your credentials to access your account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...loginForm}>\n                    <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input type=\"text\" placeholder=\"Enter your username\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={loginMutation.isPending}\n                      >\n                        {loginMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Sign In\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create Account</CardTitle>\n                  <CardDescription>\n                    Join thousands of creators and readers\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"johndoe\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"john@example.com\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={registerForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"First name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={registerForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Last name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input type=\"password\" placeholder=\"Create a password\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={registerMutation.isPending}\n                      >\n                        {registerMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Create Account\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero */}\n      <div className=\"hidden lg:flex flex-1 bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 items-center justify-center p-12\">\n        <div className=\"text-center text-white space-y-8\">\n          <div className=\"space-y-4\">\n            <h2 className=\"text-4xl font-bold\">Discover Amazing Stories</h2>\n            <p className=\"text-xl text-white/90\">\n              Read webtoons, manga, and novels from creators around the world\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-6 max-w-sm mx-auto\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-white/20 p-2 rounded-lg\">\n                <BookOpen className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Thousands of Stories</h3>\n                <p className=\"text-sm text-white/80\">Webtoons, manga, and novels</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-white/20 p-2 rounded-lg\">\n                <Users className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Creator Community</h3>\n                <p className=\"text-sm text-white/80\">Join passionate storytellers</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-white/20 p-2 rounded-lg\">\n                <Heart className=\"h-6 w-6\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Support Creators</h3>\n                <p className=\"text-sm text-white/80\">Premium content and coins</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12031},"client/src/pages/become-creator.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  PenTool,\n  Users,\n  TrendingUp,\n  Star,\n  CheckCircle,\n  Upload,\n  MessageSquare,\n  BarChart3,\n  Palette,\n  BookOpen,\n  Zap,\n  Shield,\n} from \"lucide-react\";\n\nexport default function BecomeCreator() {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [applicationData, setApplicationData] = useState({\n    displayName: \"\",\n    bio: \"\",\n    portfolioUrl: \"\",\n    socialMediaUrl: \"\",\n    contentTypes: [] as string[],\n    experience: \"\",\n    motivation: \"\",\n  });\n\n  // Redirect if not authenticated\n  if (!isAuthenticated) {\n    setLocation(\"/auth\");\n    return null;\n  }\n\n  // Redirect if already a creator\n  if (user?.isCreator) {\n    setLocation(\"/creator/dashboard\");\n    return null;\n  }\n\n  const applyCreatorMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/creator/apply\", applicationData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome to the Creator Program!\",\n        description: \"Your application has been approved! You now have access to the Creator Dashboard.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      setLocation(\"/creator/dashboard\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Application failed\",\n        description: error.message || \"Failed to submit application. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleContentTypeToggle = (type: string) => {\n    setApplicationData(prev => ({\n      ...prev,\n      contentTypes: prev.contentTypes.includes(type)\n        ? prev.contentTypes.filter(t => t !== type)\n        : [...prev.contentTypes, type]\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!applicationData.displayName || !applicationData.bio || applicationData.contentTypes.length === 0) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    applyCreatorMutation.mutate();\n  };\n\n  const benefits = [\n    {\n      icon: Upload,\n      title: \"Publish Your Content\",\n      description: \"Upload webtoons, manga, and novels with our advanced publishing tools\"\n    },\n    {\n      icon: Users,\n      title: \"Build Your Audience\",\n      description: \"Connect with readers and grow your fanbase across the platform\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"Monetize Your Work\",\n      description: \"Earn coins from premium chapters and reader support\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Analytics Dashboard\",\n      description: \"Track views, engagement, and earnings with detailed analytics\"\n    },\n    {\n      icon: MessageSquare,\n      title: \"Community Features\",\n      description: \"Interact with fans through comments and direct messaging\"\n    },\n    {\n      icon: Shield,\n      title: \"Content Protection\",\n      description: \"Your work is protected with advanced anti-piracy measures\"\n    }\n  ];\n\n  const contentTypes = [\n    { id: \"webtoon\", label: \"Webtoons\", icon: Palette },\n    { id: \"manga\", label: \"Manga\", icon: BookOpen },\n    { id: \"novel\", label: \"Novels\", icon: PenTool },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        \n        {/* Hero Section */}\n        <div className=\"text-center mb-12\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-primary/10 rounded-full mb-6\">\n            <Star className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            Become a Creator\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Join thousands of creators sharing their stories with millions of readers worldwide. \n            Turn your passion into a thriving creative career.\n          </p>\n        </div>\n\n        {/* Benefits Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n          {benefits.map((benefit, index) => {\n            const Icon = benefit.icon;\n            return (\n              <Card key={index} className=\"text-center\">\n                <CardContent className=\"p-6\">\n                  <div className=\"inline-flex items-center justify-center w-12 h-12 bg-primary/10 rounded-full mb-4\">\n                    <Icon className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">{benefit.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{benefit.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <Separator className=\"my-12\" />\n\n        {/* Application Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <PenTool className=\"w-5 h-5 mr-2\" />\n              Creator Application\n            </CardTitle>\n            <CardDescription>\n              Tell us about yourself and your creative work. All fields marked with * are required.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              \n              {/* Basic Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Basic Information</h3>\n                \n                <div>\n                  <Label htmlFor=\"displayName\">Display Name *</Label>\n                  <Input\n                    id=\"displayName\"\n                    placeholder=\"Your creator name\"\n                    value={applicationData.displayName}\n                    onChange={(e) => setApplicationData(prev => ({ ...prev, displayName: e.target.value }))}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"bio\">Bio *</Label>\n                  <Textarea\n                    id=\"bio\"\n                    placeholder=\"Tell readers about yourself and your work...\"\n                    value={applicationData.bio}\n                    onChange={(e) => setApplicationData(prev => ({ ...prev, bio: e.target.value }))}\n                    rows={4}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"portfolioUrl\">Portfolio URL</Label>\n                    <Input\n                      id=\"portfolioUrl\"\n                      placeholder=\"https://your-portfolio.com\"\n                      value={applicationData.portfolioUrl}\n                      onChange={(e) => setApplicationData(prev => ({ ...prev, portfolioUrl: e.target.value }))}\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"socialMediaUrl\">Social Media</Label>\n                    <Input\n                      id=\"socialMediaUrl\"\n                      placeholder=\"https://twitter.com/yourhandle\"\n                      value={applicationData.socialMediaUrl}\n                      onChange={(e) => setApplicationData(prev => ({ ...prev, socialMediaUrl: e.target.value }))}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Content Types */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Content Types *</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select the type(s) of content you plan to create:\n                </p>\n                \n                <div className=\"flex flex-wrap gap-3\">\n                  {contentTypes.map((type) => {\n                    const Icon = type.icon;\n                    const isSelected = applicationData.contentTypes.includes(type.id);\n                    return (\n                      <Badge\n                        key={type.id}\n                        variant={isSelected ? \"default\" : \"outline\"}\n                        className=\"cursor-pointer p-3 text-sm\"\n                        onClick={() => handleContentTypeToggle(type.id)}\n                      >\n                        <Icon className=\"w-4 h-4 mr-2\" />\n                        {type.label}\n                        {isSelected && <CheckCircle className=\"w-4 h-4 ml-2\" />}\n                      </Badge>\n                    );\n                  })}\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Experience & Motivation */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Tell Us More</h3>\n                \n                <div>\n                  <Label htmlFor=\"experience\">Previous Experience</Label>\n                  <Textarea\n                    id=\"experience\"\n                    placeholder=\"Describe your experience creating content, any previous publications, or relevant background...\"\n                    value={applicationData.experience}\n                    onChange={(e) => setApplicationData(prev => ({ ...prev, experience: e.target.value }))}\n                    rows={3}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"motivation\">Why do you want to become a creator?</Label>\n                  <Textarea\n                    id=\"motivation\"\n                    placeholder=\"Share your motivation and goals as a creator on our platform...\"\n                    value={applicationData.motivation}\n                    onChange={(e) => setApplicationData(prev => ({ ...prev, motivation: e.target.value }))}\n                    rows={3}\n                  />\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Submit */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Applications are typically reviewed within 24-48 hours\n                </div>\n                <Button \n                  type=\"submit\" \n                  disabled={applyCreatorMutation.isPending}\n                  className=\"min-w-32\"\n                >\n                  {applyCreatorMutation.isPending ? (\n                    <>\n                      <Zap className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Submitting...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 mr-2\" />\n                      Submit Application\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":11724},"client/src/pages/browse.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Filter, Grid, List, TrendingUp } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport UnifiedSeriesCard from \"@/components/ui/unified-series-card\";\nimport type { Series } from \"@shared/schema\";\n\nexport default function Browse() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState<string>(\"all\");\n  const [selectedGenre, setSelectedGenre] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"updated\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  // Fetch series data\n  const { data: allSeries = [], isLoading } = useQuery<Series[]>({\n    queryKey: [\"/api/series\", { \n      type: selectedType !== \"all\" ? selectedType : undefined,\n      status: selectedStatus !== \"all\" ? selectedStatus : undefined,\n      genre: selectedGenre !== \"all\" ? selectedGenre : undefined,\n    }]\n  });\n\n  // Fetch trending series\n  const { data: trendingSeries = [] } = useQuery<Series[]>({\n    queryKey: [\"/api/series/trending\", { limit: 12 }]\n  });\n\n  // Filter and sort series\n  const filteredSeries = allSeries.filter(series => {\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      return series.title.toLowerCase().includes(query) ||\n             series.description?.toLowerCase().includes(query);\n    }\n    return true;\n  }).sort((a, b) => {\n    switch (sortBy) {\n      case \"title\":\n        return a.title.localeCompare(b.title);\n      case \"rating\":\n        return parseFloat(b.rating || \"0\") - parseFloat(a.rating || \"0\");\n      case \"views\":\n        return (b.viewCount || 0) - (a.viewCount || 0);\n      case \"updated\":\n      default:\n        return new Date(b.updatedAt || \"\").getTime() - new Date(a.updatedAt || \"\").getTime();\n    }\n  });\n\n  const genres = [\n    \"Action\", \"Adventure\", \"Comedy\", \"Drama\", \"Fantasy\", \"Horror\",\n    \"Mystery\", \"Romance\", \"Sci-Fi\", \"Slice of Life\", \"Supernatural\", \"Thriller\"\n  ];\n\n  const contentTypes = [\n    { id: \"webtoon\", label: \"Webtoons\" },\n    { id: \"manga\", label: \"Manga\" },\n    { id: \"novel\", label: \"Novels\" }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-muted rounded w-64\"></div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {Array.from({ length: 12 }).map((_, i) => (\n                <div key={i} className=\"h-80 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        \n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Browse Content</h1>\n          <p className=\"text-muted-foreground\">\n            Discover amazing webtoons, manga, and novels from creators worldwide\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              \n              {/* Search */}\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search series, creators, or genres...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n\n              {/* Filters */}\n              <div className=\"flex flex-wrap gap-3\">\n                <Select value={selectedType} onValueChange={setSelectedType}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue placeholder=\"Type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    {contentTypes.map(type => (\n                      <SelectItem key={type.id} value={type.id}>{type.label}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={selectedGenre} onValueChange={setSelectedGenre}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue placeholder=\"Genre\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Genres</SelectItem>\n                    {genres.map(genre => (\n                      <SelectItem key={genre} value={genre.toLowerCase()}>{genre}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"ongoing\">Ongoing</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"hiatus\">Hiatus</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue placeholder=\"Sort\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"updated\">Latest</SelectItem>\n                    <SelectItem value=\"title\">Title</SelectItem>\n                    <SelectItem value=\"rating\">Rating</SelectItem>\n                    <SelectItem value=\"views\">Views</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <div className=\"flex border rounded-md\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                    className=\"rounded-r-none\"\n                  >\n                    <Grid className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                    className=\"rounded-l-none\"\n                  >\n                    <List className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs defaultValue=\"all\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"all\">All Series</TabsTrigger>\n            <TabsTrigger value=\"trending\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Trending\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\" className=\"space-y-6\">\n            {/* Results Summary */}\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                {filteredSeries.length} series found\n              </p>\n              {searchQuery && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSearchQuery(\"\")}\n                >\n                  Clear search\n                </Button>\n              )}\n            </div>\n\n            {/* Series Grid/List */}\n            {filteredSeries.length > 0 ? (\n              <div className={\n                viewMode === \"grid\" \n                  ? \"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 md:gap-6\"\n                  : \"space-y-4\"\n              }>\n                {filteredSeries.map((series) => (\n                  <UnifiedSeriesCard\n                    key={series.id}\n                    series={series}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground mb-4\">\n                  No series found matching your criteria\n                </p>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchQuery(\"\");\n                    setSelectedType(\"all\");\n                    setSelectedGenre(\"all\");\n                    setSelectedStatus(\"all\");\n                  }}\n                >\n                  Clear all filters\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"trending\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                Most popular series this week\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {trendingSeries.map((series, index) => (\n                <div key={series.id} className=\"relative\">\n                  <UnifiedSeriesCard series={series} />\n                  <Badge \n                    className=\"absolute -top-2 -left-2 bg-primary text-primary-foreground\"\n                  >\n                    #{index + 1}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":10419},"client/src/pages/coins.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Coins, \n  CreditCard, \n  Check, \n  Star, \n  Zap, \n  Crown,\n  Gift,\n  History,\n  ArrowRight\n} from \"lucide-react\";\nimport { format, parseISO } from \"date-fns\";\n\ninterface CoinPackage {\n  id: string;\n  amount: number;\n  price: number;\n  bonus: number;\n  popular?: boolean;\n  bestValue?: boolean;\n}\n\ninterface Transaction {\n  id: string;\n  amount: number;\n  type: 'purchase' | 'spend';\n  description: string;\n  createdAt: string;\n}\n\nconst coinPackages: CoinPackage[] = [\n  { id: 'starter', amount: 100, price: 0.99, bonus: 0 },\n  { id: 'basic', amount: 500, price: 4.99, bonus: 50, popular: true },\n  { id: 'premium', amount: 1000, price: 9.99, bonus: 150 },\n  { id: 'deluxe', amount: 2500, price: 19.99, bonus: 500, bestValue: true },\n  { id: 'ultimate', amount: 5000, price: 39.99, bonus: 1500 },\n  { id: 'legendary', amount: 10000, price: 69.99, bonus: 3000 },\n];\n\nexport default function CoinsPage() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [selectedPackage, setSelectedPackage] = useState<string | null>(null);\n\n  // Load Stripe.js\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://js.stripe.com/v3/';\n    script.async = true;\n    document.head.appendChild(script);\n    \n    return () => {\n      document.head.removeChild(script);\n    };\n  }, []);\n\n  // Handle payment success/cancel from URL params\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const success = urlParams.get('success');\n    const canceled = urlParams.get('canceled');\n    const sessionId = urlParams.get('session_id');\n\n    if (success === 'true' && sessionId) {\n      // Confirm payment with backend\n      apiRequest('POST', '/api/coins/confirm-payment', { sessionId })\n        .then(response => response.json())\n        .then(data => {\n          if (data.success) {\n            toast({\n              title: \"Payment Successful!\",\n              description: `You've received ${data.coinAmount} coins!`,\n            });\n            queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n            queryClient.invalidateQueries({ queryKey: ['/api/user/transactions'] });\n          }\n        })\n        .catch(error => {\n          toast({\n            title: \"Payment Error\",\n            description: \"There was an issue confirming your payment.\",\n            variant: \"destructive\",\n          });\n        })\n        .finally(() => {\n          // Clean up URL\n          window.history.replaceState({}, '', '/coins');\n        });\n    } else if (canceled === 'true') {\n      toast({\n        title: \"Payment Canceled\",\n        description: \"Your payment was canceled.\",\n        variant: \"destructive\",\n      });\n      // Clean up URL\n      window.history.replaceState({}, '', '/coins');\n    }\n  }, [toast]);\n\n  // Fetch transaction history\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: ['/api/user/transactions'],\n    enabled: isAuthenticated,\n  });\n\n  // Purchase coins mutation with real Stripe integration\n  const purchaseCoinsMutation = useMutation({\n    mutationFn: async (packageId: string) => {\n      const selectedPkg = coinPackages.find(pkg => pkg.id === packageId);\n      if (!selectedPkg) throw new Error('Package not found');\n\n      // Create Stripe checkout session\n      const response = await apiRequest('POST', '/api/coins/create-checkout-session', {\n        packageId,\n        amount: selectedPkg.price,\n        coinAmount: selectedPkg.amount + selectedPkg.bonus,\n      });\n      \n      const { sessionId } = await response.json();\n      \n      // Load Stripe.js and redirect to checkout\n      const stripe = (window as any).Stripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);\n      const { error } = await stripe.redirectToCheckout({ sessionId });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return { success: true };\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/transactions'] });\n      toast({\n        title: \"Purchase Successful!\",\n        description: `You've received ${data.coinAmount} coins!`,\n      });\n      setSelectedPackage(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePurchase = async (packageId: string) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please log in to purchase coins\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSelectedPackage(packageId);\n    purchaseCoinsMutation.mutate(packageId);\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      return format(parseISO(dateString), 'MMM d, yyyy • h:mm a');\n    } catch {\n      return 'Unknown date';\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-yellow-100 dark:bg-yellow-900/30 rounded-full flex items-center justify-center mb-4\">\n              <Coins className=\"w-6 h-6 text-yellow-600\" />\n            </div>\n            <CardTitle>Login Required</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-muted-foreground mb-6\">\n              Please log in to purchase coins and unlock premium content.\n            </p>\n            <Button asChild className=\"w-full\">\n              <a href=\"/auth\">Sign In</a>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"p-2 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg\">\n              <Coins className=\"w-6 h-6 text-white\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Purchase Coins</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Unlock premium chapters and support your favorite creators\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Current Balance & Info */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Coins className=\"w-5 h-5 text-yellow-600\" />\n                  Current Balance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-yellow-600 mb-2\">\n                  {user?.coinBalance?.toLocaleString() || 0}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">coins available</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Gift className=\"w-5 h-5\" />\n                  Why Buy Coins?\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center mt-0.5\">\n                    <Crown className=\"w-3 h-3 text-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Premium Content</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Access exclusive chapters and early releases\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center mt-0.5\">\n                    <Star className=\"w-3 h-3 text-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Support Creators</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Help creators earn from their work\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center mt-0.5\">\n                    <Zap className=\"w-3 h-3 text-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">No Ads</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enjoy uninterrupted reading experience\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Coin Packages */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-xl font-semibold mb-2\">Choose Your Package</h2>\n              <p className=\"text-muted-foreground\">All packages include bonus coins</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n              {coinPackages.map((pkg) => (\n                <Card \n                  key={pkg.id} \n                  className={`relative cursor-pointer transition-all duration-200 hover:shadow-lg ${\n                    pkg.popular ? 'ring-2 ring-primary' : ''\n                  } ${\n                    pkg.bestValue ? 'ring-2 ring-green-500' : ''\n                  }`}\n                  onClick={() => handlePurchase(pkg.id)}\n                >\n                  {pkg.popular && (\n                    <Badge className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 bg-primary\">\n                      Most Popular\n                    </Badge>\n                  )}\n                  {pkg.bestValue && (\n                    <Badge className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 bg-green-500\">\n                      Best Value\n                    </Badge>\n                  )}\n                  \n                  <CardHeader className=\"text-center\">\n                    <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center mb-2\">\n                      <Coins className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <CardTitle className=\"text-2xl\">\n                      {(pkg.amount + pkg.bonus).toLocaleString()}\n                    </CardTitle>\n                    <p className=\"text-muted-foreground\">\n                      {pkg.amount.toLocaleString()} + {pkg.bonus} bonus coins\n                    </p>\n                  </CardHeader>\n                  \n                  <CardContent className=\"text-center space-y-4\">\n                    <div className=\"text-3xl font-bold\">${pkg.price}</div>\n                    \n                    <Button \n                      className=\"w-full\" \n                      disabled={purchaseCoinsMutation.isPending && selectedPackage === pkg.id}\n                    >\n                      {purchaseCoinsMutation.isPending && selectedPackage === pkg.id ? (\n                        <>\n                          <CreditCard className=\"w-4 h-4 mr-2 animate-pulse\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <CreditCard className=\"w-4 h-4 mr-2\" />\n                          Purchase\n                        </>\n                      )}\n                    </Button>\n                    \n                    {pkg.bonus > 0 && (\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">\n                        +{pkg.bonus} bonus coins!\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Transaction History */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <History className=\"w-5 h-5\" />\n                  Transaction History\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {transactionsLoading ? (\n                  <div className=\"space-y-3\">\n                    {Array.from({ length: 3 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-12 bg-muted rounded\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : transactions.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {transactions.slice(0, 10).map((transaction, index) => (\n                      <div key={transaction.id}>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                              transaction.type === 'purchase' \n                                ? 'bg-green-100 dark:bg-green-900/30' \n                                : 'bg-blue-100 dark:bg-blue-900/30'\n                            }`}>\n                              {transaction.type === 'purchase' ? (\n                                <Coins className=\"w-4 h-4 text-green-600\" />\n                              ) : (\n                                <Crown className=\"w-4 h-4 text-blue-600\" />\n                              )}\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{transaction.description}</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {formatDate(transaction.createdAt)}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className={`font-medium ${\n                              transaction.type === 'purchase' ? 'text-green-600' : 'text-blue-600'\n                            }`}>\n                              {transaction.type === 'purchase' ? '+' : '-'}{transaction.amount} coins\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              ${(transaction.amount * 0.01).toFixed(2)} USD\n                            </p>\n                          </div>\n                        </div>\n                        {index < transactions.length - 1 && index < 9 && (\n                          <Separator className=\"mt-3\" />\n                        )}\n                      </div>\n                    ))}\n                    {transactions.length > 10 && (\n                      <Button variant=\"ghost\" className=\"w-full mt-4\">\n                        View All Transactions\n                        <ArrowRight className=\"w-4 h-4 ml-2\" />\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <History className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">No transactions yet</p>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Your purchase history will appear here\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16700},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport SeriesGrid from \"@/components/series/series-grid\";\nimport CreatorCard from \"@/components/creator/creator-card\";\nimport QuickActions from \"@/components/ui/quick-actions\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Sparkles,\n  Play,\n  Bookmark,\n  ArrowRight,\n  Flame,\n  TrendingUp,\n  Users,\n} from \"lucide-react\";\nimport type { Series } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const [activeFilter, setActiveFilter] = useState('all');\n\n  // Featured series query\n  const { data: featuredSeries } = useQuery<Series[]>({\n    queryKey: ['/api/series/trending', { limit: 1 }],\n  });\n\n  // Fetch trending creators for spotlight\n  const { data: creators = [], isLoading: creatorsLoading } = useQuery({\n    queryKey: ['/api/creators/trending', { limit: 3 }],\n    select: (data: any[]) => data.map(creator => ({\n      id: creator.id,\n      name: creator.firstName && creator.lastName ? `${creator.firstName} ${creator.lastName}` : creator.username,\n      bio: creator.creatorBio || `Creator of ${creator.seriesCount || 0} series with ${creator.followersCount || 0} followers`,\n      avatarUrl: creator.profileImageUrl,\n      type: 'creator' as const,\n      followersCount: creator.followersCount || 0,\n      seriesCount: creator.seriesCount || 0,\n      isElite: creator.isEliteReader || false,\n      isRising: false, // Will be determined by backend logic\n      isStaffPick: false, // Will be determined by backend logic  \n    }))\n  });\n\n  const filterTabs = [\n    { id: 'all', label: 'All', active: activeFilter === 'all' },\n    { id: 'webtoon', label: 'Webtoons', active: activeFilter === 'webtoon' },\n    { id: 'manga', label: 'Manga', active: activeFilter === 'manga' },\n    { id: 'novel', label: 'Novels', active: activeFilter === 'novel' },\n    { id: 'trending', label: 'Trending', active: activeFilter === 'trending' },\n    { id: 'completed', label: 'Completed', active: activeFilter === 'completed' },\n  ];\n\n  const featured = featuredSeries?.[0];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n        \n\n\n        {/* Filter Tabs */}\n        <section className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Discover Content</h2>\n            <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\">\n              View All Filters <ArrowRight className=\"w-4 h-4 ml-1\" />\n            </Button>\n          </div>\n          <div className=\"flex flex-wrap gap-3 mb-4\">\n            {filterTabs.map((tab) => (\n              <Button\n                key={tab.id}\n                variant={tab.active ? \"default\" : \"secondary\"}\n                size=\"sm\"\n                onClick={() => setActiveFilter(tab.id)}\n                className=\"px-4 py-2 rounded-xl font-medium transition-colors\"\n              >\n                {tab.label}\n              </Button>\n            ))}\n          </div>\n        </section>\n\n        {/* Content Grid */}\n        <section className=\"mb-12\">\n          <SeriesGrid\n            filters={activeFilter === 'all' ? {} : { type: activeFilter === 'trending' ? undefined : activeFilter as any }}\n            trending={activeFilter === 'trending'}\n            limit={24}\n          />\n        </section>\n\n        {/* Creator Spotlight */}\n        <section className=\"mb-12\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Creator Spotlight</h2>\n            <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\">\n              View All Creators <ArrowRight className=\"w-4 h-4 ml-1\" />\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {creatorsLoading ? (\n              // Loading skeleton\n              Array.from({ length: 3 }).map((_, index) => (\n                <div key={index} className=\"animate-pulse\">\n                  <div className=\"bg-muted rounded-lg h-48\"></div>\n                </div>\n              ))\n            ) : creators.length > 0 ? (\n              creators.map((creator) => (\n                <CreatorCard\n                  key={creator.id}\n                  {...creator}\n                  onFollow={() => console.log('Follow creator:', creator.id)}\n                  onView={() => console.log('View creator:', creator.id)}\n                />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-8\">\n                <p className=\"text-muted-foreground\">No trending creators found</p>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {/* Trending Today */}\n        <section className=\"mb-12\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Flame className=\"w-6 h-6 text-destructive\" />\n              <h2 className=\"text-2xl font-bold text-foreground\">Trending Today</h2>\n            </div>\n            <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\">\n              View All <ArrowRight className=\"w-4 h-4 ml-1\" />\n            </Button>\n          </div>\n          \n          <SeriesGrid\n            trending={true}\n            limit={12}\n          />\n        </section>\n\n        {/* Recently Updated */}\n        <section className=\"mb-12\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"w-6 h-6 text-success\" />\n              <h2 className=\"text-2xl font-bold text-foreground\">Recently Updated</h2>\n            </div>\n            <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\">\n              View All <ArrowRight className=\"w-4 h-4 ml-1\" />\n            </Button>\n          </div>\n          \n          <SeriesGrid limit={12} />\n        </section>\n\n      </main>\n\n      <MobileNav />\n      <QuickActions />\n    </div>\n  );\n}\n","size_bytes":6440},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BookOpen, \n  Users, \n  Zap, \n  Globe, \n  Sparkles,\n  ArrowRight,\n  Play,\n  Star,\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: <BookOpen className=\"w-8 h-8\" />,\n      title: \"Multi-Format Content\",\n      description: \"Read webtoons, manga, and novels all in one place with optimized readers for each format.\",\n    },\n    {\n      icon: <Users className=\"w-8 h-8\" />,\n      title: \"Creator Community\",\n      description: \"Join thousands of creators and collaborate with groups to bring amazing stories to life.\",\n    },\n    {\n      icon: <Zap className=\"w-8 h-8\" />,\n      title: \"Fast & Responsive\",\n      description: \"Enjoy lightning-fast loading and smooth scrolling on any device, anywhere.\",\n    },\n    {\n      icon: <Globe className=\"w-8 h-8\" />,\n      title: \"Global Content\",\n      description: \"Discover content from creators worldwide with multilingual support and translations.\",\n    },\n  ];\n\n  const stats = [\n    { label: \"Active Readers\", value: \"2.5M+\" },\n    { label: \"Published Series\", value: \"50K+\" },\n    { label: \"Daily Updates\", value: \"1K+\" },\n    { label: \"Languages\", value: \"25+\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted\">\n      {/* Header */}\n      <header className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center\">\n              <BookOpen className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-xl font-bold gradient-text\">StoryVerse</span>\n          </div>\n          <Button onClick={() => window.location.href = \"/api/login\"}>\n            Sign In\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-4 py-20 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Badge className=\"mb-6 bg-primary/10 text-primary hover:bg-primary/20\">\n            <Sparkles className=\"w-4 h-4 mr-2\" />\n            Welcome to the Future of Digital Storytelling\n          </Badge>\n          \n          <h1 className=\"text-5xl md:text-7xl font-bold mb-6 leading-tight\">\n            Read, Create, and Share\n            <span className=\"gradient-text block\">Amazing Stories</span>\n          </h1>\n          \n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join millions of readers and creators on StoryVerse. Discover webtoons, manga, and novels \n            from talented artists around the world, or share your own stories with our community.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Button \n              size=\"lg\" \n              className=\"px-8 py-3\"\n              onClick={() => window.location.href = \"/api/login\"}\n            >\n              <Play className=\"w-5 h-5 mr-2\" />\n              Start Reading\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-3\">\n              Learn More\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n          {stats.map((stat, index) => (\n            <div key={index} className=\"text-center\">\n              <div className=\"text-3xl md:text-4xl font-bold text-primary mb-2\">\n                {stat.value}\n              </div>\n              <div className=\"text-muted-foreground\">{stat.label}</div>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"container mx-auto px-4 py-20\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Everything You Need to\n            <span className=\"gradient-text\"> Create & Consume</span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Whether you're a reader looking for your next favorite series or a creator \n            ready to share your stories, StoryVerse has you covered.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {features.map((feature, index) => (\n            <Card key={index} className=\"glassmorphism border-0 hover-scale\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-xl flex items-center justify-center mx-auto mb-4 text-primary\">\n                  {feature.icon}\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3\">{feature.title}</h3>\n                <p className=\"text-muted-foreground\">{feature.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n\n      {/* Featured Content Preview */}\n      <section className=\"container mx-auto px-4 py-20\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Trending on <span className=\"gradient-text\">StoryVerse</span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Discover what millions of readers are enjoying right now\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {[1, 2, 3].map((item) => (\n            <Card key={item} className=\"glassmorphism border-0 hover-scale overflow-hidden\">\n              <div className=\"aspect-video bg-gradient-to-br from-primary/20 to-secondary/20 relative\">\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <BookOpen className=\"w-12 h-12 text-primary/50\" />\n                </div>\n                <Badge className=\"absolute top-4 left-4 bg-accent text-accent-foreground\">\n                  Webtoon\n                </Badge>\n              </div>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-2\">Featured Series {item}</h3>\n                <p className=\"text-muted-foreground text-sm mb-4\">\n                  An epic adventure that captures the hearts of readers worldwide...\n                </p>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    <span className=\"text-sm text-muted-foreground\">4.8</span>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">1.2M views</span>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"container mx-auto px-4 py-20\">\n        <Card className=\"glassmorphism border-0 bg-gradient-to-r from-primary/10 to-secondary/10\">\n          <CardContent className=\"p-12 text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              Ready to Start Your Journey?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Join our community of passionate readers and creators. Sign up now and \n              get access to thousands of amazing stories, plus powerful tools to create your own.\n            </p>\n            <Button \n              size=\"lg\" \n              className=\"px-8 py-3\"\n              onClick={() => window.location.href = \"/api/login\"}\n            >\n              Get Started for Free\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n          </CardContent>\n        </Card>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"container mx-auto px-4 py-12 border-t border-border\">\n        <div className=\"text-center text-muted-foreground\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-6 h-6 bg-gradient-to-r from-primary to-secondary rounded flex items-center justify-center\">\n              <BookOpen className=\"w-3 h-3 text-white\" />\n            </div>\n            <span className=\"font-semibold\">StoryVerse</span>\n          </div>\n          <p>&copy; 2024 StoryVerse. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":8806},"client/src/pages/library.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport SeriesGrid from \"@/components/series/series-grid\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Search,\n  BookOpen,\n  Heart,\n  Clock,\n  Filter,\n  Grid3X3,\n  List,\n  Star,\n  TrendingUp,\n  Calendar,\n  Eye,\n} from \"lucide-react\";\nimport type { Series, ReadingProgress } from \"@shared/schema\";\n\nexport default function Library() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [sortBy, setSortBy] = useState<'recent' | 'title' | 'progress' | 'rating'>('recent');\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || !user)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need to log in to view your library.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [authLoading, isAuthenticated, user, toast]);\n\n  // Fetch bookmarked series\n  const { data: bookmarkedSeries = [], isLoading: bookmarksLoading } = useQuery<Series[]>({\n    queryKey: [\"/api/user/bookmarks\"],\n    enabled: isAuthenticated && !!user,\n    retry: false,\n  });\n\n  // Fetch followed series\n  const { data: followedSeries = [], isLoading: followedLoading } = useQuery<Series[]>({\n    queryKey: [\"/api/user/followed-series\"],\n    enabled: isAuthenticated && !!user,\n    retry: false,\n  });\n\n  // Fetch user transactions for purchase history\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/user/transactions\"],\n    enabled: isAuthenticated && !!user,\n    retry: false,\n  });\n\n  // Filter and sort functions\n  const filterSeries = (series: Series[]) => {\n    let filtered = series;\n    \n    if (searchQuery.trim()) {\n      filtered = series.filter(s => \n        s.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        s.description?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n    \n    // Sort series\n    switch (sortBy) {\n      case 'title':\n        filtered.sort((a, b) => a.title.localeCompare(b.title));\n        break;\n      case 'rating':\n        filtered.sort((a, b) => parseFloat(b.rating || '0') - parseFloat(a.rating || '0'));\n        break;\n      case 'progress':\n        // This would need reading progress data to implement properly\n        break;\n      case 'recent':\n      default:\n        filtered.sort((a, b) => \n          new Date(b.updatedAt || '').getTime() - new Date(a.updatedAt || '').getTime()\n        );\n        break;\n    }\n    \n    return filtered;\n  };\n\n  const filteredBookmarks = filterSeries(bookmarkedSeries);\n  const filteredFollowed = filterSeries(followedSeries);\n\n  // Calculate reading stats\n  const totalSeries = bookmarkedSeries.length;\n  const totalChaptersRead = transactions.filter((t: any) => t.type === 'unlock').length;\n  const coinsSpent = transactions\n    .filter((t: any) => t.amount < 0)\n    .reduce((sum: number, t: any) => sum + Math.abs(t.amount), 0);\n\n  if (authLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"animate-fade-in space-y-6\">\n            <Skeleton className=\"h-8 w-48\" />\n            <div className=\"grid md:grid-cols-4 gap-6\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-24\" />\n              ))}\n            </div>\n            <Skeleton className=\"h-64 w-full\" />\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n        <div className=\"animate-fade-in space-y-8\">\n          \n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">My Library</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Your bookmarked series and reading progress\n              </p>\n            </div>\n          </div>\n\n          {/* Reading Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Series</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{totalSeries}</p>\n                  </div>\n                  <BookOpen className=\"w-8 h-8 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Chapters Read</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{totalChaptersRead}</p>\n                  </div>\n                  <Eye className=\"w-8 h-8 text-accent\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Coins Spent</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{coinsSpent}</p>\n                  </div>\n                  <Star className=\"w-8 h-8 text-warning\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Reading Streak</p>\n                    <p className=\"text-2xl font-bold text-foreground\">7</p>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-success\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Search and Filters */}\n          <Card className=\"glassmorphism\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n                <div className=\"relative flex-1 max-w-md\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search your library...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <select\n                    value={sortBy}\n                    onChange={(e) => setSortBy(e.target.value as any)}\n                    className=\"px-3 py-2 bg-background border border-border rounded-md text-sm\"\n                  >\n                    <option value=\"recent\">Recently Updated</option>\n                    <option value=\"title\">Title A-Z</option>\n                    <option value=\"rating\">Highest Rated</option>\n                    <option value=\"progress\">Reading Progress</option>\n                  </select>\n                  \n                  <div className=\"flex border border-border rounded-md\">\n                    <Button\n                      variant={viewMode === 'grid' ? 'default' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setViewMode('grid')}\n                      className=\"rounded-r-none\"\n                    >\n                      <Grid3X3 className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant={viewMode === 'list' ? 'default' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setViewMode('list')}\n                      className=\"rounded-l-none\"\n                    >\n                      <List className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Content Tabs */}\n          <Tabs defaultValue=\"bookmarks\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"bookmarks\">\n                <BookOpen className=\"w-4 h-4 mr-2\" />\n                Bookmarks ({bookmarkedSeries.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"following\">\n                <Heart className=\"w-4 h-4 mr-2\" />\n                Following ({followedSeries.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"history\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Reading History\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Bookmarks Tab */}\n            <TabsContent value=\"bookmarks\" className=\"space-y-6\">\n              {bookmarksLoading ? (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {Array.from({ length: 12 }).map((_, i) => (\n                    <div key={i} className=\"space-y-3\">\n                      <Skeleton className=\"aspect-3-4 w-full rounded-xl\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-3 w-2/3\" />\n                    </div>\n                  ))}\n                </div>\n              ) : filteredBookmarks.length > 0 ? (\n                viewMode === 'grid' ? (\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                    {filteredBookmarks.map((series) => (\n                      <div key={series.id} className=\"space-y-3\">\n                        <div className=\"relative aspect-3-4 rounded-xl overflow-hidden bg-muted\">\n                          {series.coverImageUrl ? (\n                            <img\n                              src={series.coverImageUrl}\n                              alt={series.title}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          ) : (\n                            <div className=\"w-full h-full bg-gradient-to-br from-muted to-muted-foreground/20 flex items-center justify-center\">\n                              <BookOpen className=\"w-8 h-8 text-muted-foreground\" />\n                            </div>\n                          )}\n                          {/* Reading progress indicator */}\n                          <div className=\"absolute bottom-2 left-2 right-2\">\n                            <Progress value={Math.random() * 100} className=\"h-1\" />\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <h3 className=\"font-medium text-foreground line-clamp-2 text-sm\">\n                            {series.title}\n                          </h3>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {series.chapterCount} chapters\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {filteredBookmarks.map((series) => (\n                      <Card key={series.id} className=\"hover:bg-muted/50 transition-colors\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-16 h-20 rounded-lg overflow-hidden bg-muted flex-shrink-0\">\n                              {series.coverImageUrl ? (\n                                <img\n                                  src={series.coverImageUrl}\n                                  alt={series.title}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                              ) : (\n                                <div className=\"w-full h-full bg-gradient-to-br from-muted to-muted-foreground/20 flex items-center justify-center\">\n                                  <BookOpen className=\"w-4 h-4 text-muted-foreground\" />\n                                </div>\n                              )}\n                            </div>\n                            \n                            <div className=\"flex-1 min-w-0\">\n                              <h3 className=\"font-medium text-foreground truncate\">\n                                {series.title}\n                              </h3>\n                              <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n                                {series.description || 'No description available'}\n                              </p>\n                              <div className=\"flex items-center space-x-4 mt-2 text-xs text-muted-foreground\">\n                                <span>{series.chapterCount} chapters</span>\n                                <span className=\"flex items-center space-x-1\">\n                                  <Star className=\"w-3 h-3\" />\n                                  <span>{series.rating}</span>\n                                </span>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {series.type}\n                                </Badge>\n                              </div>\n                            </div>\n                            \n                            <div className=\"text-right\">\n                              <p className=\"text-sm text-muted-foreground\">\n                                Last read\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {new Date(series.updatedAt || '').toLocaleDateString()}\n                              </p>\n                              <Progress value={Math.random() * 100} className=\"w-20 h-1 mt-2\" />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )\n              ) : (\n                <Card className=\"glassmorphism\">\n                  <CardContent className=\"p-12 text-center\">\n                    <BookOpen className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No bookmarks yet</h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Start exploring and bookmark series you want to read later.\n                    </p>\n                    <Button onClick={() => window.location.href = '/'}>\n                      Discover Series\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            {/* Following Tab */}\n            <TabsContent value=\"following\" className=\"space-y-6\">\n              {followedLoading ? (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {Array.from({ length: 12 }).map((_, i) => (\n                    <div key={i} className=\"space-y-3\">\n                      <Skeleton className=\"aspect-3-4 w-full rounded-xl\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-3 w-2/3\" />\n                    </div>\n                  ))}\n                </div>\n              ) : filteredFollowed.length > 0 ? (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {filteredFollowed.map((series) => (\n                    <div key={series.id} className=\"space-y-3\">\n                      <div className=\"relative aspect-3-4 rounded-xl overflow-hidden bg-muted\">\n                        {series.coverImageUrl ? (\n                          <img\n                            src={series.coverImageUrl}\n                            alt={series.title}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full bg-gradient-to-br from-muted to-muted-foreground/20 flex items-center justify-center\">\n                            <BookOpen className=\"w-8 h-8 text-muted-foreground\" />\n                          </div>\n                        )}\n                        {/* New chapter indicator */}\n                        <Badge className=\"absolute top-2 left-2 bg-success text-success-foreground text-xs\">\n                          New\n                        </Badge>\n                      </div>\n                      \n                      <div>\n                        <h3 className=\"font-medium text-foreground line-clamp-2 text-sm\">\n                          {series.title}\n                        </h3>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Updated {new Date(series.updatedAt || '').toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <Card className=\"glassmorphism\">\n                  <CardContent className=\"p-12 text-center\">\n                    <Heart className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">Not following any series</h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Follow series to get notified when new chapters are released.\n                    </p>\n                    <Button onClick={() => window.location.href = '/'}>\n                      Discover Series\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            {/* Reading History Tab */}\n            <TabsContent value=\"history\" className=\"space-y-6\">\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle>Recent Reading Activity</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {transactionsLoading ? (\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <Skeleton key={i} className=\"h-16 w-full\" />\n                      ))}\n                    </div>\n                  ) : transactions.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {transactions.slice(0, 10).map((transaction: any) => (\n                        <div key={transaction.id} className=\"flex items-center justify-between p-3 hover:bg-muted/50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                            <div>\n                              <p className=\"text-sm font-medium\">\n                                {transaction.description || 'Chapter unlock'}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {new Date(transaction.createdAt!).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm font-medium\">\n                              {transaction.amount > 0 ? '+' : ''}{transaction.amount} coins\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {transaction.type}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Clock className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">No reading history yet</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":21782},"client/src/pages/not-found.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Home, \n  Search, \n  BookOpen, \n  ArrowLeft,\n  Compass\n} from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardContent className=\"p-12 text-center\">\n          {/* Comic-style 404 Illustration */}\n          <div className=\"mb-8\">\n            <div className=\"relative mx-auto w-48 h-48 mb-6\">\n              {/* Speech bubble with 404 */}\n              <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 bg-primary text-primary-foreground px-6 py-3 rounded-full text-4xl font-bold shadow-lg\">\n                404\n              </div>\n              \n              {/* Comic book style explosion effect */}\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"w-32 h-32 bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 rounded-full opacity-20 animate-pulse\"></div>\n              </div>\n              \n              {/* Scattered comic elements */}\n              <div className=\"absolute top-8 right-4 text-2xl animate-bounce\">💥</div>\n              <div className=\"absolute bottom-8 left-4 text-2xl animate-bounce\" style={{animationDelay: '0.5s'}}>⭐</div>\n              <div className=\"absolute top-12 left-8 text-xl animate-bounce\" style={{animationDelay: '1s'}}>💫</div>\n              \n              {/* Central book icon */}\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <BookOpen className=\"w-16 h-16 text-muted-foreground\" />\n              </div>\n            </div>\n            \n            {/* Comic-style text */}\n            <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n              Lost in the Panels?\n            </h1>\n            \n            <p className=\"text-xl text-muted-foreground mb-2\">\n              Looks like this page got caught in a plot twist!\n            </p>\n            \n            <p className=\"text-muted-foreground mb-8\">\n              The page you're looking for doesn't exist, but don't worry - \n              there are plenty of amazing stories waiting to be discovered.\n            </p>\n          </div>\n\n          {/* Action buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild size=\"lg\" className=\"min-w-[200px]\">\n              <Link href=\"/\">\n                <Home className=\"w-5 h-5 mr-2\" />\n                Return Home\n              </Link>\n            </Button>\n            \n            <Button asChild variant=\"outline\" size=\"lg\" className=\"min-w-[200px]\">\n              <Link href=\"/browse\">\n                <Compass className=\"w-5 h-5 mr-2\" />\n                Discover Stories\n              </Link>\n            </Button>\n            \n            <Button asChild variant=\"outline\" size=\"lg\" className=\"min-w-[200px]\">\n              <Link href=\"/search\">\n                <Search className=\"w-5 h-5 mr-2\" />\n                Search Content\n              </Link>\n            </Button>\n          </div>\n\n          {/* Fun comic-style elements */}\n          <div className=\"mt-12 pt-8 border-t border-border\">\n            <div className=\"flex justify-center items-center gap-2 text-sm text-muted-foreground\">\n              <span>Error Code:</span>\n              <code className=\"bg-muted px-2 py-1 rounded text-primary font-mono\">\n                CHAPTER_NOT_FOUND_404\n              </code>\n            </div>\n            \n            <p className=\"text-xs text-muted-foreground mt-2\">\n              \"Every great story has plot holes, but this one's a bit too literal!\" 📚\n            </p>\n          </div>\n\n          {/* Back button for navigation history */}\n          <div className=\"mt-6\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => window.history.back()}\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Go Back\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4368},"client/src/pages/profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  User,\n  Settings,\n  Crown,\n  BookOpen,\n  Eye,\n  Star,\n  Calendar,\n  Coins,\n  Bell,\n  Shield,\n  Palette,\n  Globe,\n  Download,\n  Trash2,\n  Edit3,\n  Camera,\n  TrendingUp,\n  Clock,\n  Target,\n  Award,\n} from \"lucide-react\";\nimport type { User as UserType, Transaction } from \"@shared/schema\";\nimport type { UserStats } from \"@/types\";\n\nexport default function Profile() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [profileData, setProfileData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    bio: \"\",\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || !user)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need to log in to view your profile.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [authLoading, isAuthenticated, user, toast]);\n\n  // Initialize profile data when user is loaded\n  useEffect(() => {\n    if (user) {\n      setProfileData({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        bio: \"\", // This would come from user profile if we had a bio field\n      });\n    }\n  }, [user]);\n\n  // Fetch user transactions for stats\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/user/transactions\"],\n    enabled: isAuthenticated && !!user,\n    retry: false,\n  });\n\n  // Fetch bookmarked series for stats\n  const { data: bookmarkedSeries = [], isLoading: bookmarksLoading } = useQuery({\n    queryKey: [\"/api/user/bookmarks\"],\n    enabled: isAuthenticated && !!user,\n    retry: false,\n  });\n\n  // Profile update mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { firstName: string; lastName: string }) => {\n      // This would be a PUT request to update user profile\n      // For now, we'll simulate it since the backend doesn't have this endpoint yet\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return data;\n    },\n    onSuccess: () => {\n      setIsEditing(false);\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveProfile = () => {\n    updateProfileMutation.mutate({\n      firstName: profileData.firstName,\n      lastName: profileData.lastName,\n    });\n  };\n\n  // Calculate user stats\n  const calculateStats = (): UserStats => {\n    const chaptersRead = transactions.filter(t => t.type === 'unlock').length;\n    const coinsSpent = transactions\n      .filter(t => t.amount < 0)\n      .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n    \n    return {\n      readingStreak: 7, // This would be calculated based on daily reading activity\n      chaptersRead,\n      timeSpent: chaptersRead * 15, // Estimate 15 minutes per chapter\n      favoriteGenres: ['Fantasy', 'Romance', 'Action'], // This would be calculated from reading history\n      weeklyGoal: 10,\n      weeklyProgress: Math.min(chaptersRead % 10, 10),\n    };\n  };\n\n  const stats = calculateStats();\n\n  if (authLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n\n        <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"animate-fade-in space-y-6\">\n            <div className=\"flex items-center space-x-4\">\n              <Skeleton className=\"w-24 h-24 rounded-full\" />\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-6 w-48\" />\n                <Skeleton className=\"h-4 w-32\" />\n              </div>\n            </div>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-24\" />\n              ))}\n            </div>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n        <div className=\"animate-fade-in space-y-8\">\n          \n          {/* Profile Header */}\n          <Card className=\"glassmorphism\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col md:flex-row items-start md:items-center space-y-4 md:space-y-0 md:space-x-6\">\n                <div className=\"relative\">\n                  <Avatar className=\"w-24 h-24\">\n                    <AvatarImage src={user.profileImageUrl} alt={user.firstName || \"User\"} />\n                    <AvatarFallback className=\"text-2xl\">\n                      {user.firstName?.[0] || user.email?.[0] || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  {user.isEliteReader && (\n                    <Badge className=\"absolute -top-2 -right-2 bg-accent text-accent-foreground\">\n                      <Crown className=\"w-3 h-3\" />\n                    </Badge>\n                  )}\n                  <Button\n                    size=\"icon\"\n                    variant=\"secondary\"\n                    className=\"absolute -bottom-2 -right-2 w-8 h-8 rounded-full\"\n                  >\n                    <Camera className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"flex-1\">\n                  {isEditing ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"firstName\">First Name</Label>\n                          <Input\n                            id=\"firstName\"\n                            value={profileData.firstName}\n                            onChange={(e) => setProfileData(prev => ({ ...prev, firstName: e.target.value }))}\n                            placeholder=\"Enter first name\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"lastName\">Last Name</Label>\n                          <Input\n                            id=\"lastName\"\n                            value={profileData.lastName}\n                            onChange={(e) => setProfileData(prev => ({ ...prev, lastName: e.target.value }))}\n                            placeholder=\"Enter last name\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          onClick={handleSaveProfile}\n                          disabled={updateProfileMutation.isPending}\n                        >\n                          Save Changes\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => setIsEditing(false)}\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div>\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h1 className=\"text-2xl font-bold text-foreground\">\n                          {user.firstName && user.lastName\n                            ? `${user.firstName} ${user.lastName}`\n                            : user.email}\n                        </h1>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          onClick={() => setIsEditing(true)}\n                        >\n                          <Edit3 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      <p className=\"text-muted-foreground\">{user.email}</p>\n                      <div className=\"flex items-center space-x-4 mt-3\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Coins className=\"w-4 h-4 text-yellow-500\" />\n                          <span className=\"text-sm font-medium\">\n                            {user.coinBalance?.toLocaleString() || 0} coins\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"text-sm text-muted-foreground\">\n                            Joined {new Date(user.createdAt!).toLocaleDateString('en-US', { \n                              year: 'numeric', \n                              month: 'long' \n                            })}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Reading Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Reading Streak</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{stats.readingStreak}</p>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-success\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Chapters Read</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{stats.chaptersRead}</p>\n                  </div>\n                  <BookOpen className=\"w-8 h-8 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Time Spent</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{Math.floor(stats.timeSpent / 60)}h</p>\n                  </div>\n                  <Clock className=\"w-8 h-8 text-accent\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glassmorphism\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Bookmarks</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{bookmarkedSeries.length}</p>\n                  </div>\n                  <Star className=\"w-8 h-8 text-warning\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Weekly Reading Goal */}\n          <Card className=\"glassmorphism\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Target className=\"w-5 h-5\" />\n                <span>Weekly Reading Goal</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">\n                    {stats.weeklyProgress} / {stats.weeklyGoal} chapters this week\n                  </span>\n                  <Badge variant=\"secondary\">\n                    {Math.round((stats.weeklyProgress / stats.weeklyGoal) * 100)}%\n                  </Badge>\n                </div>\n                <Progress \n                  value={(stats.weeklyProgress / stats.weeklyGoal) * 100} \n                  className=\"h-2\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Profile Tabs */}\n          <Tabs defaultValue=\"preferences\" className=\"space-y-6\">\n            <div className=\"overflow-x-auto\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"preferences\">Preferences</TabsTrigger>\n                <TabsTrigger value=\"privacy\">Privacy</TabsTrigger>\n                <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n                <TabsTrigger value=\"account\">Account</TabsTrigger>\n              </TabsList>\n            </div>\n\n            {/* Preferences Tab */}\n            <TabsContent value=\"preferences\" className=\"space-y-6\">\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Palette className=\"w-5 h-5\" />\n                    <span>Appearance</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Theme</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Choose your preferred color theme\n                      </p>\n                    </div>\n                    <Select value={theme} onValueChange={setTheme}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"light\">Light</SelectItem>\n                        <SelectItem value=\"dark\">Dark</SelectItem>\n                        <SelectItem value=\"system\">System</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <p className=\"font-medium mb-3\">Reading Preferences</p>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium\">Auto-scroll novels</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Automatically scroll when reading novels\n                          </p>\n                        </div>\n                        <Switch />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium\">Show reading progress</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Display progress indicators on series cards\n                          </p>\n                        </div>\n                        <Switch defaultChecked />\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm font-medium\">Auto-bookmark</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Automatically bookmark series you start reading\n                          </p>\n                        </div>\n                        <Switch defaultChecked />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Award className=\"w-5 h-5\" />\n                    <span>Favorite Genres</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {stats.favoriteGenres.map((genre) => (\n                      <Badge key={genre} variant=\"secondary\">\n                        {genre}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Privacy Tab */}\n            <TabsContent value=\"privacy\" className=\"space-y-6\">\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Shield className=\"w-5 h-5\" />\n                    <span>Privacy Settings</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Public Profile</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Allow others to see your reading activity\n                      </p>\n                    </div>\n                    <Switch />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Show Reading History</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Display your recently read series publicly\n                      </p>\n                    </div>\n                    <Switch />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Allow Friend Requests</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Let other users send you friend requests\n                      </p>\n                    </div>\n                    <Switch defaultChecked />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Notifications Tab */}\n            <TabsContent value=\"notifications\" className=\"space-y-6\">\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Bell className=\"w-5 h-5\" />\n                    <span>Notification Settings</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">New Chapter Updates</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Get notified when followed series have new chapters\n                      </p>\n                    </div>\n                    <Switch defaultChecked />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Comment Replies</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Get notified when someone replies to your comments\n                      </p>\n                    </div>\n                    <Switch defaultChecked />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Weekly Summary</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Receive a weekly summary of your reading activity\n                      </p>\n                    </div>\n                    <Switch />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Marketing Emails</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Receive promotional emails about new features\n                      </p>\n                    </div>\n                    <Switch />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Account Tab */}\n            <TabsContent value=\"account\" className=\"space-y-6\">\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <User className=\"w-5 h-5\" />\n                    <span>Account Information</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Email Address</Label>\n                      <Input value={user.email || \"\"} disabled className=\"mt-1\" />\n                    </div>\n                    <div>\n                      <Label>Member Since</Label>\n                      <Input \n                        value={new Date(user.createdAt!).toLocaleDateString()}\n                        disabled \n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                  \n                  {user.isCreator && (\n                    <div className=\"p-4 bg-primary/10 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Crown className=\"w-5 h-5 text-primary\" />\n                        <span className=\"font-medium text-primary\">Creator Account</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        You have creator privileges and can publish content.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card className=\"glassmorphism border-destructive/20\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2 text-destructive\">\n                    <Trash2 className=\"w-5 h-5\" />\n                    <span>Danger Zone</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <p className=\"font-medium\">Delete Account</p>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Permanently delete your account and all associated data. This action cannot be undone.\n                    </p>\n                    <Button variant=\"destructive\" size=\"sm\">\n                      Delete Account\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":25473},"client/src/pages/search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport UnifiedSeriesCard from \"@/components/ui/unified-series-card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Search, \n  Filter, \n  BookOpen, \n  Users, \n  User,\n  Star,\n  Eye,\n  Clock\n} from \"lucide-react\";\nimport type { Series, User as UserType } from \"@shared/schema\";\n\ninterface SearchResult {\n  series: Series[];\n  creators: UserType[];\n  groups: any[];\n}\n\nexport default function SearchPage() {\n  const [location] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"all\");\n  const [filters, setFilters] = useState({\n    type: \"\",\n    status: \"\",\n    genre: \"\",\n  });\n\n  // Get query from URL params\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const query = urlParams.get('q');\n    if (query) {\n      setSearchQuery(query);\n    }\n  }, [location]);\n\n  // Search API call\n  const { data: searchResults, isLoading, refetch } = useQuery<SearchResult>({\n    queryKey: ['/api/search', { q: searchQuery, ...filters }],\n    enabled: searchQuery.length > 2,\n    select: (data: any) => ({\n      series: data.series || [],\n      creators: data.creators || [],\n      groups: data.groups || [],\n    }),\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      refetch();\n      // Update URL\n      const url = new URL(window.location.href);\n      url.searchParams.set('q', searchQuery);\n      window.history.replaceState({}, '', url.toString());\n    }\n  };\n\n  const totalResults = searchResults \n    ? searchResults.series.length + searchResults.creators.length + searchResults.groups.length\n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg\">\n              <Search className=\"w-6 h-6 text-white\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Search</h1>\n          </div>\n\n          {/* Search Form */}\n          <form onSubmit={handleSearch} className=\"mb-6\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search for series, creators, or groups...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"text-lg h-12\"\n                />\n              </div>\n              <Button type=\"submit\" size=\"lg\" disabled={!searchQuery.trim()}>\n                <Search className=\"w-4 h-4 mr-2\" />\n                Search\n              </Button>\n            </div>\n          </form>\n\n          {/* Filters */}\n          <div className=\"flex flex-wrap gap-2\">\n            <select\n              value={filters.type}\n              onChange={(e) => setFilters(prev => ({ ...prev, type: e.target.value }))}\n              className=\"px-3 py-1 rounded-md border bg-background text-foreground\"\n            >\n              <option value=\"\">All Types</option>\n              <option value=\"webtoon\">Webtoon</option>\n              <option value=\"manga\">Manga</option>\n              <option value=\"novel\">Novel</option>\n            </select>\n            \n            <select\n              value={filters.status}\n              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}\n              className=\"px-3 py-1 rounded-md border bg-background text-foreground\"\n            >\n              <option value=\"\">All Status</option>\n              <option value=\"ongoing\">Ongoing</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"hiatus\">Hiatus</option>\n            </select>\n\n            <select\n              value={filters.genre}\n              onChange={(e) => setFilters(prev => ({ ...prev, genre: e.target.value }))}\n              className=\"px-3 py-1 rounded-md border bg-background text-foreground\"\n            >\n              <option value=\"\">All Genres</option>\n              <option value=\"Action\">Action</option>\n              <option value=\"Romance\">Romance</option>\n              <option value=\"Fantasy\">Fantasy</option>\n              <option value=\"Drama\">Drama</option>\n              <option value=\"Comedy\">Comedy</option>\n              <option value=\"Horror\">Horror</option>\n              <option value=\"Sci-Fi\">Sci-Fi</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Loading State */}\n        {isLoading && (\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Searching...</p>\n          </div>\n        )}\n\n        {/* No Query State */}\n        {!searchQuery && !isLoading && (\n          <div className=\"text-center py-12\">\n            <Search className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">Find Your Next Read</h2>\n            <p className=\"text-muted-foreground\">\n              Search for series, creators, or groups to discover amazing content\n            </p>\n          </div>\n        )}\n\n        {/* Search Results */}\n        {searchQuery && !isLoading && (\n          <>\n            {totalResults > 0 ? (\n              <>\n                {/* Results Summary */}\n                <div className=\"mb-6\">\n                  <p className=\"text-muted-foreground\">\n                    Found {totalResults} results for \"{searchQuery}\"\n                  </p>\n                </div>\n\n                {/* Results Tabs */}\n                <Tabs value={activeTab} onValueChange={setActiveTab}>\n                  <TabsList className=\"mb-6\">\n                    <TabsTrigger value=\"all\">\n                      All ({totalResults})\n                    </TabsTrigger>\n                    <TabsTrigger value=\"series\">\n                      Series ({searchResults?.series.length || 0})\n                    </TabsTrigger>\n                    <TabsTrigger value=\"creators\">\n                      Creators ({searchResults?.creators.length || 0})\n                    </TabsTrigger>\n                    <TabsTrigger value=\"groups\">\n                      Groups ({searchResults?.groups.length || 0})\n                    </TabsTrigger>\n                  </TabsList>\n\n                  {/* All Results */}\n                  <TabsContent value=\"all\" className=\"space-y-8\">\n                    {searchResults?.series && searchResults.series.length > 0 && (\n                      <section>\n                        <h2 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                          <BookOpen className=\"w-5 h-5\" />\n                          Series\n                        </h2>\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                          {searchResults.series.slice(0, 8).map((series) => (\n                            <UnifiedSeriesCard key={series.id} series={series} />\n                          ))}\n                        </div>\n                      </section>\n                    )}\n\n                    {searchResults?.creators && searchResults.creators.length > 0 && (\n                      <section>\n                        <h2 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                          <User className=\"w-5 h-5\" />\n                          Creators\n                        </h2>\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n                          {searchResults.creators.slice(0, 6).map((creator) => (\n                            <Card key={creator.id} className=\"hover:shadow-lg transition-shadow\">\n                              <CardContent className=\"p-6\">\n                                <div className=\"flex items-center gap-4 mb-4\">\n                                  <Avatar className=\"w-12 h-12\">\n                                    <AvatarImage src={creator.profileImageUrl || \"\"} />\n                                    <AvatarFallback>\n                                      {creator.firstName?.[0] || creator.username?.[0] || \"U\"}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <div className=\"flex-1\">\n                                    <h3 className=\"font-semibold\">\n                                      {creator.firstName && creator.lastName \n                                        ? `${creator.firstName} ${creator.lastName}` \n                                        : creator.username}\n                                    </h3>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      @{creator.username}\n                                    </p>\n                                  </div>\n                                  {creator.isCreator && (\n                                    <Badge variant=\"secondary\">\n                                      <Star className=\"w-3 h-3 mr-1\" />\n                                      Creator\n                                    </Badge>\n                                  )}\n                                </div>\n                                \n                                {creator.creatorBio && (\n                                  <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n                                    {creator.creatorBio}\n                                  </p>\n                                )}\n\n                                <div className=\"flex items-center justify-between text-sm\">\n                                  <div className=\"flex items-center gap-4\">\n                                    <div className=\"flex items-center gap-1\">\n                                      <Users className=\"w-4 h-4\" />\n                                      {creator.followersCount || 0}\n                                    </div>\n                                  </div>\n                                  <Button size=\"sm\" variant=\"outline\">\n                                    Follow\n                                  </Button>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      </section>\n                    )}\n                  </TabsContent>\n\n                  {/* Series Only */}\n                  <TabsContent value=\"series\">\n                    {searchResults?.series && searchResults.series.length > 0 ? (\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                        {searchResults.series.map((series) => (\n                          <UnifiedSeriesCard key={series.id} series={series} />\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-12\">\n                        <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No series found</p>\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  {/* Creators Only */}\n                  <TabsContent value=\"creators\">\n                    {searchResults?.creators && searchResults.creators.length > 0 ? (\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n                        {searchResults.creators.map((creator) => (\n                          <Card key={creator.id} className=\"hover:shadow-lg transition-shadow\">\n                            <CardContent className=\"p-6\">\n                              <div className=\"flex items-center gap-4 mb-4\">\n                                <Avatar className=\"w-12 h-12\">\n                                  <AvatarImage src={creator.profileImageUrl || \"\"} />\n                                  <AvatarFallback>\n                                    {creator.firstName?.[0] || creator.username?.[0] || \"U\"}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div className=\"flex-1\">\n                                  <h3 className=\"font-semibold\">\n                                    {creator.firstName && creator.lastName \n                                      ? `${creator.firstName} ${creator.lastName}` \n                                      : creator.username}\n                                  </h3>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    @{creator.username}\n                                  </p>\n                                </div>\n                              </div>\n                              \n                              {creator.creatorBio && (\n                                <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                                  {creator.creatorBio}\n                                </p>\n                              )}\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-12\">\n                        <User className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No creators found</p>\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  {/* Groups Only */}\n                  <TabsContent value=\"groups\">\n                    <div className=\"text-center py-12\">\n                      <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">Group search coming soon</p>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Search className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h2 className=\"text-xl font-semibold mb-2\">No results found</h2>\n                <p className=\"text-muted-foreground mb-4\">\n                  Try adjusting your search terms or filters\n                </p>\n                <Button variant=\"outline\" onClick={() => setSearchQuery(\"\")}>\n                  Clear Search\n                </Button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15388},"client/src/pages/setup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, Database, User, Settings, AlertCircle, Loader2, CreditCard, Image } from \"lucide-react\";\n// Removed import of apiRequest since we're using fetch directly\n\nconst setupSchema = z.object({\n  databaseUrl: z.string().min(1, \"Database URL is required\"),\n  siteName: z.string().min(1, \"Site name is required\"),\n  adminUsername: z.string().min(3, \"Username must be at least 3 characters\"),\n  adminEmail: z.string().email(\"Valid email is required\"),\n  adminPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  // Optional Stripe configuration\n  stripePublicKey: z.string().optional(),\n  stripeSecretKey: z.string().optional(),\n  // Optional branding\n  logoUrl: z.string().optional(),\n  faviconUrl: z.string().optional(),\n});\n\ntype SetupFormData = z.infer<typeof setupSchema>;\n\ninterface SetupStatus {\n  isSetup: boolean;\n  config?: any;\n}\n\nexport default function SetupPage() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [installationComplete, setInstallationComplete] = useState(false);\n  const [debugInfo, setDebugInfo] = useState<string[]>([]);\n  const [showDebug, setShowDebug] = useState(false);\n\n  // Check setup status\n  const { data: setupStatus, refetch: refetchStatus } = useQuery<SetupStatus>({\n    queryKey: ['/api/setup/status'],\n    refetchInterval: false,\n  });\n\n  const form = useForm<SetupFormData>({\n    resolver: zodResolver(setupSchema),\n    defaultValues: {\n      databaseUrl: \"\",\n      siteName: \"MangaVerse\",\n      adminUsername: \"\",\n      adminEmail: \"\",\n      adminPassword: \"\",\n      stripePublicKey: \"\",\n      stripeSecretKey: \"\",\n      logoUrl: \"\",\n      faviconUrl: \"\",\n    },\n  });\n\n  // Database validation mutation\n  const validateDbMutation = useMutation({\n    mutationFn: async (databaseUrl: string) => {\n      const response = await fetch(\"/api/setup/validate-db\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ databaseUrl }),\n      });\n      return response.json();\n    },\n  });\n\n  // Add debug helper\n  const addDebugInfo = (info: string) => {\n    setDebugInfo(prev => [...prev, `${new Date().toLocaleTimeString()}: ${info}`]);\n  };\n\n  // Installation mutation\n  const installMutation = useMutation({\n    mutationFn: async (data: SetupFormData) => {\n      addDebugInfo(\"Starting installation request...\");\n      \n      const requestBody = {\n        databaseUrl: data.databaseUrl,\n        adminUsername: data.adminUsername,\n        adminPassword: data.adminPassword\n      };\n      \n      addDebugInfo(`Request body: ${JSON.stringify(requestBody, null, 2)}`);\n      \n      const response = await fetch(\"/api/setup/install\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(requestBody),\n      });\n      \n      addDebugInfo(`Response status: ${response.status} ${response.statusText}`);\n      \n      const responseText = await response.text();\n      addDebugInfo(`Response text: ${responseText}`);\n      \n      try {\n        return JSON.parse(responseText);\n      } catch (e) {\n        addDebugInfo(`Failed to parse JSON: ${e}`);\n        throw new Error(`Invalid JSON response: ${responseText}`);\n      }\n    },\n    onSuccess: (result: any) => {\n      addDebugInfo(`Installation result: ${JSON.stringify(result)}`);\n      if (result.success) {\n        setInstallationComplete(true);\n        addDebugInfo(\"✓ Installation successful! Starting status polling...\");\n        \n        // Aggressively poll status until setup is complete\n        let pollCount = 0;\n        const pollInterval = setInterval(async () => {\n          pollCount++;\n          addDebugInfo(`Status poll #${pollCount}...`);\n          \n          const statusResult = await refetchStatus();\n          addDebugInfo(`Status result: ${JSON.stringify(statusResult.data)}`);\n          \n          if (statusResult.data?.isSetup) {\n            addDebugInfo(\"✓ Setup confirmed complete! Redirecting...\");\n            clearInterval(pollInterval);\n            window.location.href = \"/\";\n          } else if (pollCount >= 15) {\n            addDebugInfo(\"⚠ Polling timeout - redirecting anyway\");\n            clearInterval(pollInterval);\n            window.location.href = \"/\";\n          }\n        }, 1000); // Poll every second\n        \n        // Fallback redirect after 20 seconds\n        setTimeout(() => {\n          addDebugInfo(\"⚠ Fallback redirect triggered\");\n          clearInterval(pollInterval);\n          window.location.href = \"/\";\n        }, 20000);\n      }\n    },\n    onError: (error: any) => {\n      addDebugInfo(`Installation error: ${error.message}`);\n      console.error(\"Installation failed:\", error);\n    },\n  });\n\n  const handleDatabaseValidation = async () => {\n    const databaseUrl = form.getValues(\"databaseUrl\");\n    if (!databaseUrl) {\n      form.setError(\"databaseUrl\", { message: \"Database URL is required\" });\n      return;\n    }\n\n    try {\n      const result = await validateDbMutation.mutateAsync(databaseUrl);\n      if ((result as any).valid) {\n        setCurrentStep(2);\n      } else {\n        form.setError(\"databaseUrl\", { message: (result as any).error || \"Invalid database connection\" });\n      }\n    } catch (error) {\n      form.setError(\"databaseUrl\", { message: \"Database validation failed\" });\n    }\n  };\n\n  const handleInstallation = async () => {\n    const values = form.getValues();\n    const isValid = await form.trigger();\n    if (!isValid) return;\n\n    try {\n      await installMutation.mutateAsync(values);\n    } catch (error) {\n      console.error(\"Installation failed:\", error);\n    }\n  };\n\n  if (setupStatus?.isSetup) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n            <CardTitle>Setup Complete</CardTitle>\n            <CardDescription>\n              Your platform is already configured and ready to use.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={() => (window.location.href = \"/\")} className=\"w-full\">\n              Go to Platform\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (installationComplete) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n            <CardTitle>Installation Complete!</CardTitle>\n            <CardDescription>\n              Your MangaVerse platform has been successfully installed and configured.\n              Redirecting you to the homepage...\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Progress value={100} className=\"w-full\" />\n            <p className=\"text-sm text-muted-foreground text-center mt-2\">\n              You can now log in with your admin credentials.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">MangaVerse Setup</h1>\n          <p className=\"text-muted-foreground\">\n            Welcome! Let's set up your content publishing platform.\n          </p>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={`flex items-center ${currentStep >= 1 ? 'text-primary' : 'text-muted-foreground'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep >= 1 ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n                <Database className=\"w-4 h-4\" />\n              </div>\n              <span className=\"ml-2 font-medium text-sm\">Database</span>\n            </div>\n            <div className=\"w-6 h-px bg-border\" />\n            <div className={`flex items-center ${currentStep >= 2 ? 'text-primary' : 'text-muted-foreground'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep >= 2 ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n                <User className=\"w-4 h-4\" />\n              </div>\n              <span className=\"ml-2 font-medium text-sm\">Admin</span>\n            </div>\n            <div className=\"w-6 h-px bg-border\" />\n            <div className={`flex items-center ${currentStep >= 3 ? 'text-primary' : 'text-muted-foreground'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep >= 3 ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n                <CreditCard className=\"w-4 h-4\" />\n              </div>\n              <span className=\"ml-2 font-medium text-sm\">Stripe</span>\n            </div>\n            <div className=\"w-6 h-px bg-border\" />\n            <div className={`flex items-center ${currentStep >= 4 ? 'text-primary' : 'text-muted-foreground'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep >= 4 ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n                <Image className=\"w-4 h-4\" />\n              </div>\n              <span className=\"ml-2 font-medium text-sm\">Branding</span>\n            </div>\n            <div className=\"w-6 h-px bg-border\" />\n            <div className={`flex items-center ${currentStep >= 5 ? 'text-primary' : 'text-muted-foreground'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentStep >= 5 ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n                <Settings className=\"w-4 h-4\" />\n              </div>\n              <span className=\"ml-2 font-medium text-sm\">Install</span>\n            </div>\n          </div>\n        </div>\n\n        <Card className=\"w-full max-w-2xl mx-auto\">\n          <CardHeader>\n            <CardTitle>\n              {currentStep === 1 && \"Step 1: Database Configuration\"}\n              {currentStep === 2 && \"Step 2: Admin Account Setup\"}\n              {currentStep === 3 && \"Step 3: Payment Processing (Optional)\"}\n              {currentStep === 4 && \"Step 4: Site Branding (Optional)\"}\n              {currentStep === 5 && \"Step 5: Installation Confirmation\"}\n            </CardTitle>\n            <CardDescription>\n              {currentStep === 1 && \"Configure your PostgreSQL database connection\"}\n              {currentStep === 2 && \"Create your administrator account\"}\n              {currentStep === 3 && \"Set up Stripe for premium content and payments\"}\n              {currentStep === 4 && \"Upload your logo and customize site appearance\"}\n              {currentStep === 5 && \"Review settings and complete installation\"}\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {currentStep === 1 && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"databaseUrl\">Database URL</Label>\n                  <Input\n                    id=\"databaseUrl\"\n                    data-testid=\"input-database-url\"\n                    placeholder=\"postgresql://username:password@host:port/database\"\n                    {...form.register(\"databaseUrl\")}\n                    className={form.formState.errors.databaseUrl ? \"border-destructive\" : \"\"}\n                  />\n                  {form.formState.errors.databaseUrl && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.databaseUrl.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"siteName\">Site Name</Label>\n                  <Input\n                    id=\"siteName\"\n                    data-testid=\"input-site-name\"\n                    placeholder=\"MangaVerse\"\n                    {...form.register(\"siteName\")}\n                  />\n                </div>\n\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Need a database?</strong> We recommend using{\" \"}\n                    <a href=\"https://neon.tech\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">\n                      Neon\n                    </a>\n                    ,{\" \"}\n                    <a href=\"https://supabase.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">\n                      Supabase\n                    </a>\n                    , or{\" \"}\n                    <a href=\"https://planetscale.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">\n                      PlanetScale\n                    </a>{\" \"}\n                    for free PostgreSQL hosting.\n                  </AlertDescription>\n                </Alert>\n\n                <Button\n                  data-testid=\"button-validate-database\"\n                  onClick={handleDatabaseValidation}\n                  disabled={validateDbMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {validateDbMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Validating Database...\n                    </>\n                  ) : (\n                    \"Validate & Continue\"\n                  )}\n                </Button>\n\n                {validateDbMutation.error && (\n                  <Alert variant=\"destructive\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Database validation failed. Please check your connection string.\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </div>\n            )}\n\n            {currentStep === 2 && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"adminUsername\">Admin Username</Label>\n                  <Input\n                    id=\"adminUsername\"\n                    data-testid=\"input-admin-username\"\n                    placeholder=\"admin\"\n                    {...form.register(\"adminUsername\")}\n                    className={form.formState.errors.adminUsername ? \"border-destructive\" : \"\"}\n                  />\n                  {form.formState.errors.adminUsername && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.adminUsername.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"adminEmail\">Admin Email</Label>\n                  <Input\n                    id=\"adminEmail\"\n                    data-testid=\"input-admin-email\"\n                    type=\"email\"\n                    placeholder=\"admin@example.com\"\n                    {...form.register(\"adminEmail\")}\n                    className={form.formState.errors.adminEmail ? \"border-destructive\" : \"\"}\n                  />\n                  {form.formState.errors.adminEmail && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.adminEmail.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"adminPassword\">Admin Password</Label>\n                  <Input\n                    id=\"adminPassword\"\n                    data-testid=\"input-admin-password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    {...form.register(\"adminPassword\")}\n                    className={form.formState.errors.adminPassword ? \"border-destructive\" : \"\"}\n                  />\n                  {form.formState.errors.adminPassword && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.adminPassword.message}\n                    </p>\n                  )}\n                </div>\n\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    This admin account will have full access to manage the platform, \n                    including creator permissions and system settings.\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"flex space-x-3\">\n                  <Button variant=\"outline\" onClick={() => setCurrentStep(1)} className=\"flex-1\">\n                    Back\n                  </Button>\n                  <Button\n                    data-testid=\"button-continue-to-stripe\"\n                    onClick={() => setCurrentStep(3)}\n                    className=\"flex-1\"\n                  >\n                    Continue\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {currentStep === 3 && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center mb-4\">\n                  <CreditCard className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                  <h3 className=\"font-medium\">Stripe Payment Integration</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Enable premium content and monetization features\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"stripePublicKey\">Stripe Publishable Key (Optional)</Label>\n                    <Input\n                      id=\"stripePublicKey\"\n                      placeholder=\"pk_test_...\"\n                      {...form.register(\"stripePublicKey\")}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Starts with pk_test_ or pk_live_\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"stripeSecretKey\">Stripe Secret Key (Optional)</Label>\n                    <Input\n                      id=\"stripeSecretKey\"\n                      type=\"password\"\n                      placeholder=\"sk_test_...\"\n                      {...form.register(\"stripeSecretKey\")}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Starts with sk_test_ or sk_live_\n                    </p>\n                  </div>\n                </div>\n\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Optional:</strong> You can skip this step and configure Stripe later in the admin panel. \n                    Get your API keys from{\" \"}\n                    <a href=\"https://dashboard.stripe.com/apikeys\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">\n                      Stripe Dashboard\n                    </a>\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"flex space-x-3\">\n                  <Button variant=\"outline\" onClick={() => setCurrentStep(2)} className=\"flex-1\">\n                    Back\n                  </Button>\n                  <Button\n                    onClick={() => setCurrentStep(4)}\n                    className=\"flex-1\"\n                  >\n                    Continue\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {currentStep === 4 && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center mb-4\">\n                  <Image className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                  <h3 className=\"font-medium\">Site Branding</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Customize your platform's appearance\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"logoUrl\">Logo URL (Optional)</Label>\n                    <Input\n                      id=\"logoUrl\"\n                      placeholder=\"https://example.com/logo.png\"\n                      {...form.register(\"logoUrl\")}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Direct link to your logo image (PNG, JPG, or SVG)\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"faviconUrl\">Favicon URL (Optional)</Label>\n                    <Input\n                      id=\"faviconUrl\"\n                      placeholder=\"https://example.com/favicon.ico\"\n                      {...form.register(\"faviconUrl\")}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Direct link to your favicon (ICO, PNG, or SVG)\n                    </p>\n                  </div>\n                </div>\n\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Optional:</strong> You can skip this step and upload your branding assets later \n                    through the admin panel. Make sure your images are publicly accessible URLs.\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"flex space-x-3\">\n                  <Button variant=\"outline\" onClick={() => setCurrentStep(3)} className=\"flex-1\">\n                    Back\n                  </Button>\n                  <Button\n                    onClick={() => setCurrentStep(5)}\n                    className=\"flex-1\"\n                  >\n                    Continue\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {currentStep === 5 && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-muted p-4 rounded-lg space-y-2\">\n                  <h4 className=\"font-medium\">Installation Summary</h4>\n                  <div className=\"text-sm space-y-1\">\n                    <p><strong>Site Name:</strong> {form.getValues(\"siteName\")}</p>\n                    <p><strong>Database:</strong> Connected and validated</p>\n                    <p><strong>Admin Username:</strong> {form.getValues(\"adminUsername\")}</p>\n                    <p><strong>Admin Email:</strong> {form.getValues(\"adminEmail\")}</p>\n                    {form.getValues(\"stripePublicKey\") && (\n                      <p><strong>Stripe:</strong> Configured for payments</p>\n                    )}\n                    {form.getValues(\"logoUrl\") && (\n                      <p><strong>Logo:</strong> Custom branding configured</p>\n                    )}\n                  </div>\n                </div>\n\n                <Alert>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Ready to install! This will create the required database tables, \n                    set up your admin account, and configure the platform.\n                  </AlertDescription>\n                </Alert>\n\n                {installMutation.error && (\n                  <Alert variant=\"destructive\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      {installMutation.error instanceof Error \n                        ? installMutation.error.message \n                        : \"Installation failed. Please try again.\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"flex space-x-3\">\n                  <Button variant=\"outline\" onClick={() => setCurrentStep(4)} className=\"flex-1\">\n                    Back\n                  </Button>\n                  <Button\n                    data-testid=\"button-install-now\"\n                    onClick={handleInstallation}\n                    disabled={installMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    {installMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Installing...\n                      </>\n                    ) : (\n                      \"Install Now\"\n                    )}\n                  </Button>\n                </div>\n\n                {/* Debug Panel */}\n                <div className=\"mt-4\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => setShowDebug(!showDebug)}\n                    className=\"w-full mb-2\"\n                  >\n                    {showDebug ? \"Hide\" : \"Show\"} Debug Info\n                  </Button>\n                  \n                  {showDebug && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={async () => {\n                            addDebugInfo(\"Testing simple install endpoint...\");\n                            try {\n                              const response = await fetch(\"/api/setup/simple-install\", {\n                                method: \"POST\",\n                                headers: { \"Content-Type\": \"application/json\" },\n                                body: JSON.stringify({\n                                  databaseUrl: form.getValues(\"databaseUrl\"),\n                                  adminUsername: form.getValues(\"adminUsername\"),\n                                  adminPassword: form.getValues(\"adminPassword\")\n                                }),\n                              });\n                              const text = await response.text();\n                              addDebugInfo(`Simple install response: ${response.status} - ${text}`);\n                              \n                              // If simple install worked, offer to use it for actual installation\n                              if (response.ok) {\n                                const result = JSON.parse(text);\n                                if (result.success) {\n                                  addDebugInfo(\"✓ Simple install successful! This can be used for actual installation.\");\n                                }\n                              }\n                            } catch (e) {\n                              addDebugInfo(`Simple install error: ${e}`);\n                            }\n                          }}\n                        >\n                          Test Simple Install\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={async () => {\n                            addDebugInfo(\"Testing basic test endpoint...\");\n                            try {\n                              const response = await fetch(\"/api/setup/test-install\", {\n                                method: \"POST\",\n                                headers: { \"Content-Type\": \"application/json\" },\n                                body: JSON.stringify({\n                                  databaseUrl: form.getValues(\"databaseUrl\"),\n                                  adminUsername: form.getValues(\"adminUsername\"),\n                                  adminPassword: form.getValues(\"adminPassword\")\n                                }),\n                              });\n                              const text = await response.text();\n                              addDebugInfo(`Test install response: ${response.status} - ${text}`);\n                            } catch (e) {\n                              addDebugInfo(`Test install error: ${e}`);\n                            }\n                          }}\n                        >\n                          Test Basic Install\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"secondary\"\n                          onClick={async () => {\n                            addDebugInfo(\"Using simple install for actual setup...\");\n                            try {\n                              const response = await fetch(\"/api/setup/simple-install\", {\n                                method: \"POST\",\n                                headers: { \"Content-Type\": \"application/json\" },\n                                body: JSON.stringify({\n                                  databaseUrl: form.getValues(\"databaseUrl\"),\n                                  adminUsername: form.getValues(\"adminUsername\"),\n                                  adminPassword: form.getValues(\"adminPassword\")\n                                }),\n                              });\n                              const result = await response.json();\n                              addDebugInfo(`Simple setup result: ${JSON.stringify(result)}`);\n                              \n                              if (result.success) {\n                                addDebugInfo(\"✓ Simple setup complete! Redirecting...\");\n                                setTimeout(() => {\n                                  window.location.href = \"/\";\n                                }, 2000);\n                              }\n                            } catch (e) {\n                              addDebugInfo(`Simple setup error: ${e}`);\n                            }\n                          }}\n                        >\n                          Use Simple Setup\n                        </Button>\n                      </div>\n                      \n                      {debugInfo.length > 0 && (\n                        <div className=\"bg-muted p-3 rounded text-xs max-h-40 overflow-y-auto\">\n                          <div className=\"font-mono space-y-1\">\n                            {debugInfo.map((info, index) => (\n                              <div key={index} className=\"text-muted-foreground\">\n                                {info}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":31428},"client/src/pages/trending.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport UnifiedSeriesCard from \"@/components/ui/unified-series-card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Flame, TrendingUp, Users, Star, Crown, Eye, BookOpen } from \"lucide-react\";\nimport type { Series, User } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Trending() {\n  const [timeframe, setTimeframe] = useState<\"today\" | \"week\" | \"month\">(\"week\");\n  const [, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Follow creator mutation\n  const followMutation = useMutation({\n    mutationFn: async (followingId: string) => {\n      return apiRequest('/api/follow', 'POST', { followingId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/creators/trending'] });\n      toast({\n        title: \"Followed\",\n        description: \"You are now following this creator\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to follow creator\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreatorFollow = (creatorId: string) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please log in to follow creators\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    followMutation.mutate(creatorId);\n  };\n\n  // Fetch trending series\n  const { data: trendingSeries = [], isLoading: seriesLoading } = useQuery<Series[]>({\n    queryKey: [\"/api/series/trending\", { timeframe, limit: 20 }]\n  });\n\n  // Fetch trending creators\n  const { data: trendingCreators = [], isLoading: creatorsLoading } = useQuery<User[]>({\n    queryKey: [\"/api/creators/trending\", { timeframe, limit: 12 }]\n  });\n\n  // Fetch rising series (new and gaining traction)\n  const { data: risingSeries = [], isLoading: risingLoading } = useQuery<Series[]>({\n    queryKey: [\"/api/series/rising\", { timeframe, limit: 12 }]\n  });\n\n  const formatNumber = (num: number) => {\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n    return num.toString();\n  };\n\n  if (seriesLoading || creatorsLoading || risingLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-muted rounded w-64\"></div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {Array.from({ length: 12 }).map((_, i) => (\n                <div key={i} className=\"h-80 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        \n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"p-2 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg\">\n              <Flame className=\"w-6 h-6 text-white\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Trending</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Discover what's hot right now across all content types\n          </p>\n        </div>\n\n        {/* Timeframe Selector */}\n        <div className=\"mb-8\">\n          <Tabs value={timeframe} onValueChange={(value) => setTimeframe(value as \"today\" | \"week\" | \"month\")}>\n            <TabsList>\n              <TabsTrigger value=\"today\">Today</TabsTrigger>\n              <TabsTrigger value=\"week\">This Week</TabsTrigger>\n              <TabsTrigger value=\"month\">This Month</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={timeframe} className=\"space-y-8 mt-6\">\n              \n              {/* Top Trending Series */}\n              <section>\n                <div className=\"flex items-center gap-2 mb-6\">\n                  <TrendingUp className=\"w-5 h-5 text-primary\" />\n                  <h2 className=\"text-2xl font-bold\">Top Trending Series</h2>\n                </div>\n                \n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 md:gap-6\">\n                  {trendingSeries.slice(0, 8).map((series, index) => (\n                    <div key={series.id} className=\"relative\">\n                      <UnifiedSeriesCard series={series} />\n                      <Badge \n                        className=\"absolute -top-2 -left-2 bg-gradient-to-r from-orange-500 to-red-500 text-white border-0\"\n                      >\n                        #{index + 1}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </section>\n\n              {/* Creator Spotlight */}\n              <section>\n                <div className=\"flex items-center gap-2 mb-6\">\n                  <Star className=\"w-5 h-5 text-primary\" />\n                  <h2 className=\"text-2xl font-bold\">Creator Spotlight</h2>\n                </div>\n                \n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {trendingCreators.map((creator, index) => (\n                    <Card key={creator.id} className=\"hover:shadow-lg transition-shadow duration-300 cursor-pointer\"\n                          onClick={() => navigate(`/user/${encodeURIComponent(creator.username)}`)}\n                    >\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"relative\">\n                              <Avatar className=\"w-12 h-12\">\n                                <AvatarImage src={creator.profileImageUrl || \"\"} alt={creator.firstName || \"Creator\"} />\n                                <AvatarFallback>\n                                  {creator.firstName?.[0] || creator.email?.[0] || \"C\"}\n                                </AvatarFallback>\n                              </Avatar>\n                              <Badge \n                                className=\"absolute -top-1 -right-1 h-5 w-5 p-0 bg-gradient-to-r from-orange-500 to-red-500 text-white border-0\"\n                              >\n                                #{index + 1}\n                              </Badge>\n                            </div>\n                            <div>\n                              <h3 className=\"font-semibold\">{creator.creatorDisplayName || creator.firstName || \"Creator\"}</h3>\n                              <div className=\"flex items-center gap-1\">\n                                {creator.isEliteReader && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    <Crown className=\"w-3 h-3 mr-1\" />\n                                    Elite\n                                  </Badge>\n                                )}\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  <Star className=\"w-3 h-3 mr-1\" />\n                                  Creator\n                                </Badge>\n                              </div>\n                            </div>\n                          </div>\n                          {user && user.id !== creator.id && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={(e) => {\n                                e.stopPropagation(); // Prevent card click\n                                handleCreatorFollow(creator.id);\n                              }}\n                            >\n                              Follow\n                            </Button>\n                          )}\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n                          {creator.creatorBio || \"Creating amazing content for our community.\"}\n                        </p>\n                        <div className=\"grid grid-cols-3 gap-4 text-center\">\n                          <div>\n                            <p className=\"text-lg font-bold\">{formatNumber(creator.followersCount || 0)}</p>\n                            <p className=\"text-xs text-muted-foreground\">Followers</p>\n                          </div>\n                          <div>\n                            <p className=\"text-lg font-bold\">{formatNumber(0)}</p>\n                            <p className=\"text-xs text-muted-foreground\">Views</p>\n                          </div>\n                          <div>\n                            <p className=\"text-lg font-bold\">0</p>\n                            <p className=\"text-xs text-muted-foreground\">Series</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </section>\n\n              {/* Rising Stars */}\n              <section>\n                <div className=\"flex items-center gap-2 mb-6\">\n                  <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                  <h2 className=\"text-2xl font-bold\">Rising Stars</h2>\n                  <Badge variant=\"outline\" className=\"ml-2\">New & Growing</Badge>\n                </div>\n                \n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 md:gap-6\">\n                  {risingSeries.map((series) => (\n                    <div key={series.id} className=\"relative\">\n                      <UnifiedSeriesCard series={series} />\n                      <Badge \n                        className=\"absolute top-2 left-2 bg-green-500 text-white border-0\"\n                      >\n                        Rising\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </section>\n\n              {/* Quick Stats */}\n              <section>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"flex items-center justify-center mb-2\">\n                        <Eye className=\"w-8 h-8 text-blue-500\" />\n                      </div>\n                      <p className=\"text-2xl font-bold\">{formatNumber(trendingSeries.reduce((sum, s) => sum + (s.viewCount || 0), 0))}</p>\n                      <p className=\"text-sm text-muted-foreground\">Total Views</p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"flex items-center justify-center mb-2\">\n                        <BookOpen className=\"w-8 h-8 text-green-500\" />\n                      </div>\n                      <p className=\"text-2xl font-bold\">{trendingSeries.length}</p>\n                      <p className=\"text-sm text-muted-foreground\">Trending Series</p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"flex items-center justify-center mb-2\">\n                        <Users className=\"w-8 h-8 text-purple-500\" />\n                      </div>\n                      <p className=\"text-2xl font-bold\">{trendingCreators.length}</p>\n                      <p className=\"text-sm text-muted-foreground\">Active Creators</p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"flex items-center justify-center mb-2\">\n                        <Flame className=\"w-8 h-8 text-orange-500\" />\n                      </div>\n                      <p className=\"text-2xl font-bold\">{risingSeries.length}</p>\n                      <p className=\"text-sm text-muted-foreground\">Rising Stars</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </section>\n\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":13170},"client/src/types/index.ts":{"content":"export interface SeriesCardProps {\n  id: string;\n  title: string;\n  author: string;\n  coverImageUrl?: string;\n  type: 'webtoon' | 'manga' | 'novel';\n  status: 'ongoing' | 'completed' | 'hiatus';\n  rating: number;\n  chapterCount: number;\n  viewCount: number;\n  isNew?: boolean;\n  isPremium?: boolean;\n  isHot?: boolean;\n  isCompleted?: boolean;\n  readingProgress?: number;\n  onClick?: () => void;\n}\n\nexport interface CreatorCardProps {\n  id: string;\n  name: string;\n  bio: string;\n  avatarUrl?: string;\n  type: 'creator' | 'group';\n  followersCount: number;\n  seriesCount: number;\n  isElite?: boolean;\n  isRising?: boolean;\n  isStaffPick?: boolean;\n  onFollow?: () => void;\n  onView?: () => void;\n}\n\nexport interface AnalyticsData {\n  totalViews: number;\n  followers: number;\n  coinsEarned: number;\n  activeSeries: number;\n  monthlyGrowth?: {\n    views: number;\n    followers: number;\n    coins: number;\n  };\n}\n\nexport interface ReaderSettings {\n  fontSize: number;\n  lineHeight: number;\n  theme: 'light' | 'dark' | 'sepia';\n  autoScroll: boolean;\n  scrollSpeed: number;\n}\n\nexport interface ChapterContent {\n  type: 'webtoon' | 'manga' | 'novel';\n  pages?: string[]; // Image URLs for webtoon/manga\n  text?: string; // Text content for novels\n}\n\nexport interface NavigationItem {\n  id: string;\n  label: string;\n  icon: string;\n  path: string;\n  isActive?: boolean;\n  badge?: number;\n}\n\nexport interface FilterOptions {\n  type?: 'all' | 'webtoon' | 'manga' | 'novel';\n  status?: 'all' | 'ongoing' | 'completed' | 'hiatus';\n  genre?: string;\n  sort?: 'trending' | 'newest' | 'rating' | 'views';\n}\n\nexport interface UserStats {\n  readingStreak: number;\n  chaptersRead: number;\n  timeSpent: number;\n  favoriteGenres: string[];\n  weeklyGoal: number;\n  weeklyProgress: number;\n}\n\nexport interface NotificationItem {\n  id: string;\n  type: 'chapter_update' | 'comment_reply' | 'follow' | 'system';\n  title: string;\n  message: string;\n  timestamp: Date;\n  isRead: boolean;\n  actionUrl?: string;\n}\n","size_bytes":1987},"client/src/types/userSettings.ts":{"content":"export interface UserSettings {\n  // Notification preferences\n  notifications: {\n    newChapters: boolean;\n    comments: boolean;\n    likes: boolean;\n    follows: boolean;\n    marketing: boolean;\n  };\n  \n  // Reading preferences\n  reading: {\n    layout: 'vertical' | 'horizontal';\n    pageMode: 'single' | 'double';\n    fontSize: number;\n    theme: 'light' | 'dark' | 'sepia';\n    autoScroll: boolean;\n    scrollSpeed: number;\n  };\n  \n  // Content preferences\n  content: {\n    showMature: boolean;\n    preferredLanguages: string[];\n    hideCompleted: boolean;\n    showSpoilers: boolean;\n  };\n  \n  // Privacy settings\n  privacy: {\n    showActivity: boolean;\n    showLibrary: boolean;\n    allowFollows: boolean;\n    showReadingHistory: boolean;\n    profileVisibility: 'public' | 'friends' | 'private';\n  };\n}\n\nexport const defaultUserSettings: UserSettings = {\n  notifications: {\n    newChapters: true,\n    comments: true,\n    likes: true,\n    follows: true,\n    marketing: false,\n  },\n  reading: {\n    layout: 'vertical',\n    pageMode: 'single',\n    fontSize: 16,\n    theme: 'light',\n    autoScroll: false,\n    scrollSpeed: 1,\n  },\n  content: {\n    showMature: false,\n    preferredLanguages: ['en'],\n    hideCompleted: false,\n    showSpoilers: false,\n  },\n  privacy: {\n    showActivity: true,\n    showLibrary: true,\n    allowFollows: true,\n    showReadingHistory: true,\n    profileVisibility: 'public',\n  },\n};","size_bytes":1409},"client/src/components/creator/analytics-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface AnalyticsCardProps {\n  title: string;\n  value: string | number;\n  change?: number;\n  changeLabel?: string;\n  icon: React.ReactNode;\n  color?: 'primary' | 'secondary' | 'accent' | 'success' | 'warning' | 'destructive';\n}\n\nexport default function AnalyticsCard({\n  title,\n  value,\n  change,\n  changeLabel,\n  icon,\n  color = 'primary',\n}: AnalyticsCardProps) {\n  const formatValue = (val: string | number) => {\n    if (typeof val === 'number') {\n      if (val >= 1000000) {\n        return `${(val / 1000000).toFixed(1)}M`;\n      } else if (val >= 1000) {\n        return `${(val / 1000).toFixed(1)}K`;\n      }\n      return val.toLocaleString();\n    }\n    return val;\n  };\n\n  const getColorClasses = (color: string) => {\n    switch (color) {\n      case 'primary':\n        return 'bg-primary/10 text-primary';\n      case 'secondary':\n        return 'bg-secondary/10 text-secondary';\n      case 'accent':\n        return 'bg-accent/10 text-accent';\n      case 'success':\n        return 'bg-success/10 text-success';\n      case 'warning':\n        return 'bg-warning/10 text-warning';\n      case 'destructive':\n        return 'bg-destructive/10 text-destructive';\n      default:\n        return 'bg-primary/10 text-primary';\n    }\n  };\n\n  return (\n    <Card className=\"glassmorphism\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n            <p className=\"text-2xl font-bold text-foreground\">\n              {formatValue(value)}\n            </p>\n          </div>\n          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${getColorClasses(color)}`}>\n            {icon}\n          </div>\n        </div>\n        \n        {change !== undefined && (\n          <div className=\"mt-4 flex items-center\">\n            {change > 0 ? (\n              <div className=\"flex items-center text-success\">\n                <TrendingUp className=\"w-4 h-4 mr-1\" />\n                <span className=\"text-sm font-medium\">+{change}%</span>\n              </div>\n            ) : change < 0 ? (\n              <div className=\"flex items-center text-destructive\">\n                <TrendingDown className=\"w-4 h-4 mr-1\" />\n                <span className=\"text-sm font-medium\">{change}%</span>\n              </div>\n            ) : (\n              <span className=\"text-sm text-muted-foreground\">No change</span>\n            )}\n            {changeLabel && (\n              <span className=\"text-muted-foreground text-sm ml-2\">\n                {changeLabel}\n              </span>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2884},"client/src/components/creator/creator-card.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Users,\n  BookOpen,\n  Crown,\n  TrendingUp,\n  Star,\n} from \"lucide-react\";\nimport type { CreatorCardProps } from \"@/types\";\n\nexport default function CreatorCard({\n  id,\n  name,\n  bio,\n  avatarUrl,\n  type,\n  followersCount,\n  seriesCount,\n  isElite,\n  isRising,\n  isStaffPick,\n  onFollow,\n  onView,\n}: CreatorCardProps) {\n  const [isFollowing, setIsFollowing] = useState(false);\n\n  const formatFollowerCount = (count: number) => {\n    if (count >= 1000000) {\n      return `${(count / 1000000).toFixed(1)}M`;\n    } else if (count >= 1000) {\n      return `${(count / 1000).toFixed(1)}K`;\n    }\n    return count.toString();\n  };\n\n  const handleFollow = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsFollowing(!isFollowing);\n    if (onFollow) {\n      onFollow();\n    }\n  };\n\n  const handleView = () => {\n    if (onView) {\n      onView();\n    }\n  };\n\n  return (\n    <Card \n      className=\"glassmorphism hover-scale cursor-pointer\"\n      onClick={handleView}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-4\">\n          <Avatar className=\"w-12 h-12 mr-3\">\n            <AvatarImage src={avatarUrl} alt={name} />\n            <AvatarFallback>\n              {type === 'group' ? (\n                <Users className=\"w-6 h-6\" />\n              ) : (\n                name.charAt(0).toUpperCase()\n              )}\n            </AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-foreground\">{name}</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {type === 'group' ? 'Translation Group' : 'Creator'}\n            </p>\n          </div>\n          \n          <div className=\"ml-auto\">\n            {isElite && (\n              <Badge className=\"bg-accent text-accent-foreground\">\n                <Crown className=\"w-3 h-3 mr-1\" />\n                Elite\n              </Badge>\n            )}\n            {isRising && (\n              <Badge className=\"bg-success text-success-foreground\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                Rising\n              </Badge>\n            )}\n            {isStaffPick && (\n              <Badge className=\"bg-warning text-warning-foreground\">\n                <Star className=\"w-3 h-3 mr-1\" />\n                Staff Pick\n              </Badge>\n            )}\n          </div>\n        </div>\n        \n        <p className=\"text-muted-foreground text-sm mb-4 line-clamp-3\">\n          {bio}\n        </p>\n        \n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-1\">\n              <Users className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-muted-foreground\">\n                {formatFollowerCount(followersCount)}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <BookOpen className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-muted-foreground\">\n                {seriesCount} series\n              </span>\n            </div>\n          </div>\n          \n          <Button\n            size=\"sm\"\n            variant={isFollowing ? \"secondary\" : \"default\"}\n            onClick={handleFollow}\n            className=\"transition-colors\"\n          >\n            {isFollowing ? 'Following' : type === 'group' ? 'Join Group' : 'Follow'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3848},"client/src/components/editor/novel-editor.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Eye, Edit, Save, Bold, Italic, List, Quote, Code } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\ninterface NovelEditorProps {\n  title: string;\n  content: string;\n  onTitleChange: (title: string) => void;\n  onContentChange: (content: string) => void;\n  onSave: () => void;\n  isSaving?: boolean;\n}\n\nexport default function NovelEditor({\n  title,\n  content,\n  onTitleChange,\n  onContentChange,\n  onSave,\n  isSaving = false,\n}: NovelEditorProps) {\n  const [activeTab, setActiveTab] = useState(\"edit\");\n  \n  const insertMarkdown = (before: string, after: string = \"\") => {\n    const textarea = document.querySelector('#novel-content') as HTMLTextAreaElement;\n    if (!textarea) return;\n    \n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = content.substring(start, end);\n    const replacement = before + selectedText + after;\n    \n    const newContent = content.substring(0, start) + replacement + content.substring(end);\n    onContentChange(newContent);\n    \n    // Set cursor position after insertion\n    setTimeout(() => {\n      textarea.focus();\n      const newCursorPos = start + before.length + selectedText.length;\n      textarea.setSelectionRange(newCursorPos, newCursorPos);\n    }, 0);\n  };\n\n  const formatButtons = [\n    { icon: Bold, label: \"Bold\", action: () => insertMarkdown(\"**\", \"**\") },\n    { icon: Italic, label: \"Italic\", action: () => insertMarkdown(\"*\", \"*\") },\n    { icon: Quote, label: \"Quote\", action: () => insertMarkdown(\"\\n> \", \"\") },\n    { icon: List, label: \"List\", action: () => insertMarkdown(\"\\n- \", \"\") },\n    { icon: Code, label: \"Code\", action: () => insertMarkdown(\"`\", \"`\") },\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Chapter Title */}\n      <div>\n        <Label htmlFor=\"chapter-title\">Chapter Title</Label>\n        <Input\n          id=\"chapter-title\"\n          value={title}\n          onChange={(e) => onTitleChange(e.target.value)}\n          placeholder=\"Enter chapter title...\"\n          className=\"mt-1\"\n        />\n      </div>\n\n      {/* Editor Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <div className=\"flex items-center justify-between\">\n          <TabsList>\n            <TabsTrigger value=\"edit\" className=\"flex items-center space-x-2\">\n              <Edit className=\"w-4 h-4\" />\n              <span>Edit</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"preview\" className=\"flex items-center space-x-2\">\n              <Eye className=\"w-4 h-4\" />\n              <span>Preview</span>\n            </TabsTrigger>\n          </TabsList>\n          \n          <Button \n            onClick={onSave} \n            disabled={isSaving || !title.trim() || !content.trim()}\n            className=\"flex items-center space-x-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            <span>{isSaving ? 'Saving...' : 'Save Chapter'}</span>\n          </Button>\n        </div>\n\n        <TabsContent value=\"edit\" className=\"mt-4\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <CardTitle className=\"text-sm\">Markdown Editor</CardTitle>\n                <div className=\"flex items-center space-x-1\">\n                  {formatButtons.map((button, index) => (\n                    <Button\n                      key={index}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={button.action}\n                      className=\"h-8 w-8 p-0\"\n                      title={button.label}\n                    >\n                      <button.icon className=\"w-3 h-3\" />\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Textarea\n                id=\"novel-content\"\n                value={content}\n                onChange={(e) => onContentChange(e.target.value)}\n                placeholder=\"Write your novel chapter here using Markdown...\n\nExample:\n# Chapter Heading\nThis is a paragraph with **bold text** and *italic text*.\n\n> This is a quote block\n\n- Bullet point 1\n- Bullet point 2\n\n1. Numbered list item\n2. Another item\n\n`Inline code` or code blocks:\n\n```\nCode block\n```\n\n---\n\nUse --- for horizontal rules to separate sections.\n\"\n                className=\"min-h-[500px] font-mono text-sm resize-none\"\n                style={{ fontFamily: 'ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, monospace' }}\n              />\n              <div className=\"mt-2 text-xs text-muted-foreground\">\n                {content.split(/\\s+/).filter(word => word.length > 0).length} words • {content.split('\\n').length} lines\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"preview\" className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>{title || \"Chapter Title\"}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[500px] w-full pr-4\">\n                <div className=\"prose prose-lg max-w-none dark:prose-invert\">\n                  <ReactMarkdown \n                    remarkPlugins={[remarkGfm]}\n                    components={{\n                      h1: ({ children }) => <h1 className=\"text-2xl font-bold mb-4\">{children}</h1>,\n                      h2: ({ children }) => <h2 className=\"text-xl font-semibold mb-3\">{children}</h2>,\n                      h3: ({ children }) => <h3 className=\"text-lg font-medium mb-2\">{children}</h3>,\n                      p: ({ children }) => <p className=\"mb-4 leading-relaxed\">{children}</p>,\n                      blockquote: ({ children }) => (\n                        <blockquote className=\"border-l-4 border-muted pl-4 italic my-4 text-muted-foreground\">\n                          {children}\n                        </blockquote>\n                      ),\n                      code: ({ children }) => (\n                        <code className=\"bg-muted px-1.5 py-0.5 rounded text-sm font-mono\">\n                          {children}\n                        </code>\n                      ),\n                      pre: ({ children }) => (\n                        <pre className=\"bg-muted p-4 rounded-lg overflow-x-auto my-4\">\n                          {children}\n                        </pre>\n                      ),\n                    }}\n                  >\n                    {content || \"*No content yet. Switch to Edit tab to start writing.*\"}\n                  </ReactMarkdown>\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":7245},"client/src/components/layout/layout.tsx":{"content":"import { Navigation } from \"./navigation\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <main>{children}</main>\n    </div>\n  );\n}","size_bytes":280},"client/src/components/layout/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Home,\n  Bookmark,\n  PlusCircle,\n  User,\n  Search,\n} from \"lucide-react\";\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n  const { isAuthenticated } = useAuth();\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const navItems = [\n    {\n      id: \"home\",\n      label: \"Home\",\n      icon: Home,\n      path: \"/\",\n      isActive: location === \"/\",\n    },\n    {\n      id: \"search\",\n      label: \"Search\",\n      icon: Search,\n      path: \"/search\",\n      isActive: location.startsWith(\"/search\"),\n    },\n    {\n      id: \"library\",\n      label: \"Library\",\n      icon: Bookmark,\n      path: \"/library\",\n      isActive: location === \"/library\",\n    },\n    {\n      id: \"create\",\n      label: \"Create\",\n      icon: PlusCircle,\n      path: \"/creator/upload\",\n      isActive: location === \"/creator/upload\",\n    },\n    {\n      id: \"profile\",\n      label: \"Profile\",\n      icon: User,\n      path: \"/profile\",\n      isActive: location === \"/profile\",\n    },\n  ];\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 md:hidden bg-background border-t border-border z-40\">\n      <div className=\"flex justify-around items-center py-2\">\n        {navItems.map((item) => {\n          const IconComponent = item.icon;\n          return (\n            <Button\n              key={item.id}\n              variant=\"ghost\"\n              size=\"sm\"\n              asChild\n              className={`flex flex-col items-center p-2 h-auto space-y-1 ${\n                item.isActive ? \"text-primary\" : \"text-muted-foreground\"\n              }`}\n            >\n              <Link href={item.path}>\n                <IconComponent className=\"w-5 h-5\" />\n                <span className=\"text-xs\">{item.label}</span>\n              </Link>\n            </Button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2005},"client/src/components/layout/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Search,\n  Moon,\n  Sun,\n  Settings,\n  User,\n  BookOpen,\n  Coins,\n  Crown,\n  LogOut,\n  Home,\n  Compass,\n  PlusCircle,\n  Flame,\n  UserPlus,\n  Star,\n  Zap,\n  Shield,\n} from \"lucide-react\";\n\nexport function Navigation() {\n  const [location] = useLocation();\n  const { user, isAuthenticated, logout, isLoggingOut } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      // Navigate to search results\n      window.location.href = `/search?q=${encodeURIComponent(searchQuery)}`;\n    }\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-background text-foreground transition-colors duration-300 backdrop-blur-lg border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-center items-center h-16 relative\">\n          {/* Logo - Positioned on left */}\n          <div className=\"absolute left-0 flex items-center\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <BookOpen className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold gradient-text\">\n                ContentHub\n              </span>\n            </Link>\n          </div>\n\n          {/* Navigation Menu - Centered */}\n          <div className=\"flex-1 flex justify-center items-center space-x-8\">\n            <div className=\"hidden lg:flex items-center space-x-6\">\n              <Link href=\"/\" className={`flex items-center gap-2 text-sm font-medium transition-colors hover:text-primary ${location === \"/\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                <Home className=\"w-4 h-4\" />\n                Home\n              </Link>\n              <Link href=\"/browse\" className={`flex items-center gap-2 text-sm font-medium transition-colors hover:text-primary ${location === \"/browse\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                <Compass className=\"w-4 h-4\" />\n                Browse\n              </Link>\n              <Link href=\"/trending\" className={`flex items-center gap-2 text-sm font-medium transition-colors hover:text-primary ${location === \"/trending\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                <Flame className=\"w-4 h-4\" />\n                Trending\n              </Link>\n              {isAuthenticated && user?.isCreator && (\n                <Link href=\"/creator/dashboard\" className={`flex items-center gap-2 text-sm font-medium transition-colors hover:text-primary ${location.startsWith(\"/creator\") ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                  <PlusCircle className=\"w-4 h-4\" />\n                  Create\n                </Link>\n              )}\n            </div>\n            \n            {/* Search Bar */}\n            <div className=\"hidden md:flex w-full max-w-md\">\n              <form onSubmit={handleSearch} className=\"relative w-full\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search series, creators...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-4 bg-background/50 border-border focus:border-primary\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              </form>\n            </div>\n          </div>\n\n          {/* User Actions - Positioned on right */}\n          <div className=\"absolute right-0 flex items-center space-x-4\">\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n            >\n              {theme === \"dark\" ? (\n                <Sun className=\"w-4 h-4\" />\n              ) : (\n                <Moon className=\"w-4 h-4\" />\n              )}\n            </Button>\n\n            {isAuthenticated ? (\n              <>\n                {/* Coins Balance */}\n                <Button \n                  variant=\"ghost\" \n                  className=\"hidden sm:flex items-center space-x-1 bg-yellow-100 dark:bg-yellow-900/30 px-3 py-1 rounded-full hover:bg-yellow-200 dark:hover:bg-yellow-900/50 transition-colors\"\n                  asChild\n                >\n                  <Link href=\"/coins\">\n                    <Coins className=\"w-4 h-4 text-yellow-600\" />\n                    <span className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">\n                      {user?.coinBalance?.toLocaleString() || 0}\n                    </span>\n                  </Link>\n                </Button>\n\n                {/* User Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={user?.profileImageUrl || \"\"} alt={user?.firstName || \"User\"} />\n                        <AvatarFallback>\n                          {user?.firstName?.[0] || user?.email?.[0] || \"U\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      {user?.isEliteReader && (\n                        <Badge className=\"absolute -top-1 -right-1 h-4 w-4 p-0 bg-accent\">\n                          <Crown className=\"h-3 w-3\" />\n                        </Badge>\n                      )}\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                    <div className=\"flex items-center justify-start gap-2 p-2\">\n                      <div className=\"flex flex-col space-y-1 leading-none\">\n                        <div className=\"flex items-center gap-2\">\n                          <p className=\"font-medium\">\n                            {user?.firstName && user?.lastName\n                              ? `${user.firstName} ${user.lastName}`\n                              : user?.email}\n                          </p>\n                          {/* Role Badges */}\n                          {user?.isCreator && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              <Star className=\"w-3 h-3 mr-1\" />\n                              Creator\n                            </Badge>\n                          )}\n                          {user?.isEliteReader && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              <Crown className=\"w-3 h-3 mr-1\" />\n                              Elite\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                          {user?.email}\n                        </p>\n                        <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                          <Coins className=\"w-3 h-3\" />\n                          {user?.coinBalance?.toLocaleString() || 0} coins\n                        </div>\n                      </div>\n                    </div>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        Profile\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/library\">\n                        <BookOpen className=\"mr-2 h-4 w-4\" />\n                        Library\n                      </Link>\n                    </DropdownMenuItem>\n                    {user?.isCreator ? (\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/creator/dashboard\">\n                          <Settings className=\"mr-2 h-4 w-4\" />\n                          Creator Dashboard\n                        </Link>\n                      </DropdownMenuItem>\n                    ) : (\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/become-creator\">\n                          <UserPlus className=\"mr-2 h-4 w-4\" />\n                          🖊️ Become a Creator\n                        </Link>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={logout} disabled={isLoggingOut}>\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>{isLoggingOut ? \"Logging out...\" : \"Log out\"}</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <Button asChild>\n                <Link href=\"/auth\">\n                  Sign In\n                </Link>\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":9865},"client/src/components/library/ContinueReadingSection.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useContinueReading } from \"@/hooks/useUserSettings\";\nimport { PlayCircle, Clock, BookOpen } from \"lucide-react\";\n\nexport default function ContinueReadingSection() {\n  const { data: continueReading, isLoading, error } = useContinueReading();\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <h2 className=\"text-2xl font-bold\">Continue Reading</h2>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, index) => (\n            <Card key={index} className=\"overflow-hidden\">\n              <Skeleton className=\"h-48 w-full\" />\n              <CardContent className=\"p-4\">\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-3 w-2/3 mb-2\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !continueReading?.length) {\n    return (\n      <div className=\"text-center py-12\">\n        <BookOpen className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">No Reading History</h3>\n        <p className=\"text-muted-foreground mb-4\">\n          Start reading some series to see your progress here!\n        </p>\n        <Button asChild>\n          <Link href=\"/browse\">Browse Series</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  const formatLastRead = (date: Date) => {\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - new Date(date).getTime());\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffTime / (1000 * 60));\n\n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else if (diffMinutes > 0) {\n      return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;\n    } else {\n      return 'Just now';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold flex items-center space-x-2\">\n          <PlayCircle className=\"w-6 h-6\" />\n          <span>Continue Reading</span>\n        </h2>\n        <Badge variant=\"secondary\">{continueReading.length} Series</Badge>\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n        {continueReading.map((item) => (\n          <Card key={`${item.seriesId}-${item.lastChapterId}`} className=\"overflow-hidden hover:shadow-lg transition-shadow group\">\n            <div className=\"relative\">\n              <img\n                src={item.seriesCover || '/placeholder-cover.jpg'}\n                alt={item.seriesTitle}\n                className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n              />\n              <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n                <Button asChild size=\"sm\" className=\"bg-white/90 text-black hover:bg-white\">\n                  <Link href={`/reader/${item.seriesId}/${item.lastChapterId}`}>\n                    <PlayCircle className=\"w-4 h-4 mr-2\" />\n                    Continue\n                  </Link>\n                </Button>\n              </div>\n              \n              {/* Progress Bar */}\n              <div className=\"absolute bottom-0 left-0 right-0 bg-black/60 p-2\">\n                <div className=\"w-full bg-white/20 rounded-full h-1\">\n                  <div \n                    className=\"bg-primary h-1 rounded-full transition-all duration-300\" \n                    style={{ width: `${Math.min(item.progress, 100)}%` }}\n                  />\n                </div>\n                <div className=\"text-xs text-white mt-1 flex justify-between\">\n                  <span>Ch. {item.lastChapterNumber}</span>\n                  <span>{Math.round(item.progress)}%</span>\n                </div>\n              </div>\n            </div>\n            \n            <CardContent className=\"p-4\">\n              <h3 className=\"font-semibold text-sm mb-1 line-clamp-2 group-hover:text-primary transition-colors\">\n                {item.seriesTitle}\n              </h3>\n              <p className=\"text-xs text-muted-foreground mb-2 line-clamp-1\">\n                {item.lastChapterTitle}\n              </p>\n              <div className=\"flex items-center text-xs text-muted-foreground\">\n                <Clock className=\"w-3 h-3 mr-1\" />\n                <span>{formatLastRead(item.lastReadAt)}</span>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {continueReading.length > 8 && (\n        <div className=\"text-center\">\n          <Button variant=\"outline\" asChild>\n            <Link href=\"/library/history\">View All Reading History</Link>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5360},"client/src/components/reader/manga-reader.tsx":{"content":"import { useEffect, useState, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  SkipBack,\n  SkipForward,\n  Settings,\n  ZoomIn,\n  ZoomOut,\n  RotateCcw,\n  ImageIcon,\n  AlertCircle,\n} from \"lucide-react\";\nimport type { ReaderSettings } from \"@/types\";\n\ninterface MangaReaderProps {\n  pages: string[];\n  onProgressChange?: (progress: number) => void;\n  onPreviousChapter?: () => void;\n  onNextChapter?: () => void;\n  hasPrevious?: boolean;\n  hasNext?: boolean;\n  settings?: ReaderSettings;\n}\n\ntype ReadingMode = 'single' | 'double' | 'webtoon';\ntype ReadingDirection = 'ltr' | 'rtl';\n\nexport default function MangaReader({\n  pages,\n  onProgressChange,\n  onPreviousChapter,\n  onNextChapter,\n  hasPrevious = false,\n  hasNext = false,\n  settings = {\n    fontSize: 16,\n    lineHeight: 1.6,\n    theme: 'light',\n    autoScroll: false,\n    scrollSpeed: 1,\n  },\n}: MangaReaderProps) {\n  const [currentPage, setCurrentPage] = useState(0);\n  const [readingMode, setReadingMode] = useState<ReadingMode>('single');\n  const [readingDirection, setReadingDirection] = useState<ReadingDirection>('ltr');\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [showSettings, setShowSettings] = useState(false);\n  const [loadedImages, setLoadedImages] = useState<Set<number>>(new Set());\n  const [failedImages, setFailedImages] = useState<Set<number>>(new Set());\n  const [fitToWidth, setFitToWidth] = useState(true);\n\n  // Preload images\n  useEffect(() => {\n    const preloadRange = 3; // Preload 3 pages ahead and behind\n    const start = Math.max(0, currentPage - preloadRange);\n    const end = Math.min(pages.length - 1, currentPage + preloadRange);\n\n    for (let i = start; i <= end; i++) {\n      if (!loadedImages.has(i) && !failedImages.has(i)) {\n        const img = new Image();\n        img.onload = () => {\n          setLoadedImages(prev => new Set(Array.from(prev).concat([i])));\n        };\n        img.onerror = () => {\n          setFailedImages(prev => new Set(Array.from(prev).concat([i])));\n        };\n        img.src = pages[i];\n      }\n    }\n  }, [currentPage, pages, loadedImages, failedImages]);\n\n  // Update progress when page changes\n  useEffect(() => {\n    const progress = pages.length > 0 ? ((currentPage + 1) / pages.length) * 100 : 0;\n    if (onProgressChange) {\n      onProgressChange(progress);\n    }\n  }, [currentPage, pages.length, onProgressChange]);\n\n  // Navigation functions\n  const goToNextPage = useCallback(() => {\n    if (readingMode === 'double') {\n      setCurrentPage(prev => Math.min(pages.length - 1, prev + 2));\n    } else {\n      setCurrentPage(prev => Math.min(pages.length - 1, prev + 1));\n    }\n  }, [pages.length, readingMode]);\n\n  const goToPreviousPage = useCallback(() => {\n    if (readingMode === 'double') {\n      setCurrentPage(prev => Math.max(0, prev - 2));\n    } else {\n      setCurrentPage(prev => Math.max(0, prev - 1));\n    }\n  }, [readingMode]);\n\n  const goToPage = (pageNumber: number) => {\n    setCurrentPage(Math.max(0, Math.min(pages.length - 1, pageNumber)));\n  };\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'ArrowLeft':\n          e.preventDefault();\n          if (readingDirection === 'rtl') {\n            goToNextPage();\n          } else {\n            goToPreviousPage();\n          }\n          break;\n        case 'ArrowRight':\n          e.preventDefault();\n          if (readingDirection === 'rtl') {\n            goToPreviousPage();\n          } else {\n            goToNextPage();\n          }\n          break;\n        case 'Home':\n          e.preventDefault();\n          goToPage(0);\n          break;\n        case 'End':\n          e.preventDefault();\n          goToPage(pages.length - 1);\n          break;\n        case ' ': // Spacebar\n          e.preventDefault();\n          goToNextPage();\n          break;\n        case 'Escape':\n          setShowSettings(false);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [goToNextPage, goToPreviousPage, readingDirection, pages.length]);\n\n  // Zoom functions\n  const zoomIn = () => setZoomLevel(prev => Math.min(3, prev + 0.25));\n  const zoomOut = () => setZoomLevel(prev => Math.max(0.5, prev - 0.25));\n  const resetZoom = () => setZoomLevel(1);\n\n  // Click navigation\n  const handlePageClick = (e: React.MouseEvent) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const width = rect.width;\n    \n    if (clickX < width * 0.3) {\n      // Left third - previous page\n      if (readingDirection === 'rtl') {\n        goToNextPage();\n      } else {\n        goToPreviousPage();\n      }\n    } else if (clickX > width * 0.7) {\n      // Right third - next page\n      if (readingDirection === 'rtl') {\n        goToPreviousPage();\n      } else {\n        goToNextPage();\n      }\n    }\n    // Middle third - do nothing (for UI interactions)\n  };\n\n  const renderPage = (pageIndex: number) => {\n    if (pageIndex >= pages.length || pageIndex < 0) return null;\n\n    return (\n      <div \n        key={pageIndex}\n        className=\"relative flex-shrink-0\"\n        style={{\n          transform: `scale(${zoomLevel})`,\n          transformOrigin: 'center',\n        }}\n      >\n        {loadedImages.has(pageIndex) ? (\n          <img\n            src={pages[pageIndex]}\n            alt={`Page ${pageIndex + 1}`}\n            className={`max-h-full ${fitToWidth ? 'w-full' : 'h-full'} object-contain`}\n            style={{\n              cursor: 'pointer',\n              userSelect: 'none',\n            }}\n            onClick={handlePageClick}\n            draggable={false}\n          />\n        ) : failedImages.has(pageIndex) ? (\n          <div \n            className=\"w-full h-full bg-muted flex items-center justify-center min-h-[600px]\"\n            onClick={handlePageClick}\n          >\n            <div className=\"text-center\">\n              <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground mb-2\">Failed to load page</p>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setFailedImages(prev => {\n                    const newSet = new Set(prev);\n                    newSet.delete(pageIndex);\n                    return newSet;\n                  });\n                }}\n              >\n                Retry\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <Skeleton className=\"w-full min-h-[600px]\" />\n        )}\n      </div>\n    );\n  };\n\n  if (!pages || pages.length === 0) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">No pages available</p>\n        </div>\n      </div>\n    );\n  }\n\n  const isFirstPage = currentPage === 0;\n  const isLastPage = currentPage >= pages.length - 1;\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background overflow-hidden\"\n         style={{ overscrollBehavior: 'none' }}>\n      {/* Reader Controls */}\n      <div className=\"absolute top-20 right-4 z-10 space-y-2\">\n        <Button\n          variant=\"secondary\"\n          size=\"icon\"\n          onClick={() => setShowSettings(!showSettings)}\n          className=\"bg-background/80 backdrop-blur-sm\"\n        >\n          <Settings className=\"w-4 h-4\" />\n        </Button>\n        \n        {showSettings && (\n          <Card className=\"w-64 bg-background/95 backdrop-blur-sm\">\n            <CardContent className=\"p-4 space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Reading Mode</Label>\n                <Select value={readingMode} onValueChange={(value: ReadingMode) => setReadingMode(value)}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"single\">Single Page</SelectItem>\n                    <SelectItem value=\"double\">Double Page</SelectItem>\n                    <SelectItem value=\"webtoon\">Webtoon</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium\">Reading Direction</Label>\n                <Select value={readingDirection} onValueChange={(value: ReadingDirection) => setReadingDirection(value)}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"ltr\">Left to Right</SelectItem>\n                    <SelectItem value=\"rtl\">Right to Left</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"fit-width\"\n                  checked={fitToWidth}\n                  onCheckedChange={setFitToWidth}\n                />\n                <Label htmlFor=\"fit-width\" className=\"text-sm\">Fit to Width</Label>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">Zoom: {Math.round(zoomLevel * 100)}%</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={zoomOut}>\n                    <ZoomOut className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={resetZoom}>\n                    <RotateCcw className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" onClick={zoomIn}>\n                    <ZoomIn className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Main Reader Area */}\n      <div className=\"flex-1 flex items-center justify-center overflow-hidden\">\n        {/* Previous Chapter Button */}\n        {isFirstPage && hasPrevious && (\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={onPreviousChapter}\n            className=\"absolute left-4 top-1/2 transform -translate-y-1/2 z-10\"\n          >\n            <SkipBack className=\"w-4 h-4 mr-2\" />\n            Previous Chapter\n          </Button>\n        )}\n\n        {/* Page Content */}\n        <div className=\"flex items-center justify-center h-full w-full\">\n          {readingMode === 'double' && currentPage < pages.length - 1 ? (\n            <div className=\"flex items-center justify-center space-x-4 h-full\">\n              {readingDirection === 'rtl' ? (\n                <>\n                  {renderPage(currentPage + 1)}\n                  {renderPage(currentPage)}\n                </>\n              ) : (\n                <>\n                  {renderPage(currentPage)}\n                  {renderPage(currentPage + 1)}\n                </>\n              )}\n            </div>\n          ) : (\n            renderPage(currentPage)\n          )}\n        </div>\n\n        {/* Next Chapter Button */}\n        {isLastPage && hasNext && (\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={onNextChapter}\n            className=\"absolute right-4 top-1/2 transform -translate-y-1/2 z-10\"\n          >\n            Next Chapter\n            <SkipForward className=\"w-4 h-4 ml-2\" />\n          </Button>\n        )}\n      </div>\n\n      {/* Navigation Controls */}\n      <div className=\"absolute bottom-20 left-1/2 transform -translate-x-1/2 z-10\">\n        <div className=\"flex items-center space-x-2 bg-background/90 backdrop-blur-sm rounded-full px-4 py-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goToPreviousPage}\n            disabled={isFirstPage}\n          >\n            <ChevronLeft className=\"w-4 h-4\" />\n          </Button>\n          \n          <span className=\"text-sm font-medium px-3\">\n            {currentPage + 1} / {pages.length}\n          </span>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={goToNextPage}\n            disabled={isLastPage}\n          >\n            <ChevronRight className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13037},"client/src/components/reader/novel-reader.tsx":{"content":"import { useEffect, useRef, useState, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport {\n  Settings,\n  Type,\n  Palette,\n  Play,\n  Pause,\n  SkipBack,\n  SkipForward,\n  BookOpen,\n  AlignLeft,\n} from \"lucide-react\";\nimport type { ReaderSettings } from \"@/types\";\n\ninterface NovelReaderProps {\n  content: string;\n  onProgressChange?: (progress: number) => void;\n  settings?: ReaderSettings;\n  onSettingsChange?: (settings: ReaderSettings) => void;\n}\n\nexport default function NovelReader({\n  content,\n  onProgressChange,\n  settings = {\n    fontSize: 16,\n    lineHeight: 1.6,\n    theme: 'light',\n    autoScroll: false,\n    scrollSpeed: 1,\n  },\n  onSettingsChange,\n}: NovelReaderProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [showSettings, setShowSettings] = useState(false);\n  const [currentProgress, setCurrentProgress] = useState(0);\n  const [estimatedReadingTime, setEstimatedReadingTime] = useState(0);\n  const [wordsRead, setWordsRead] = useState(0);\n  const [isAutoScrolling, setIsAutoScrolling] = useState(false);\n\n  // Calculate reading time and word count\n  useEffect(() => {\n    if (content) {\n      const words = content.trim().split(/\\s+/).length;\n      const readingTime = Math.ceil(words / 250); // Assume 250 WPM reading speed\n      setEstimatedReadingTime(readingTime);\n    }\n  }, [content]);\n\n  // Handle scroll progress tracking\n  const handleScroll = useCallback(() => {\n    if (!containerRef.current || !contentRef.current) return;\n\n    const container = containerRef.current;\n    const scrollTop = container.scrollTop;\n    const scrollHeight = container.scrollHeight - container.clientHeight;\n    const progress = scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0;\n    \n    setCurrentProgress(progress);\n    \n    // Calculate words read based on scroll position\n    if (content) {\n      const totalWords = content.trim().split(/\\s+/).length;\n      const wordsRead = Math.floor((progress / 100) * totalWords);\n      setWordsRead(wordsRead);\n    }\n    \n    if (onProgressChange) {\n      onProgressChange(progress);\n    }\n  }, [content, onProgressChange]);\n\n  // Auto-scroll functionality\n  useEffect(() => {\n    if (!settings.autoScroll || !isAutoScrolling || !containerRef.current) return;\n\n    const interval = setInterval(() => {\n      if (containerRef.current) {\n        const scrollAmount = settings.scrollSpeed * 0.5; // Slower scroll for reading\n        containerRef.current.scrollBy({ top: scrollAmount, behavior: 'smooth' });\n        \n        // Stop auto-scroll at the end\n        const { scrollTop, scrollHeight, clientHeight } = containerRef.current;\n        if (scrollTop + clientHeight >= scrollHeight - 10) {\n          setIsAutoScrolling(false);\n        }\n      }\n    }, 50);\n\n    return () => clearInterval(interval);\n  }, [settings.autoScroll, settings.scrollSpeed, isAutoScrolling]);\n\n  // Add scroll event listener\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    container.addEventListener('scroll', handleScroll, { passive: true });\n    return () => container.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!containerRef.current) return;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          e.preventDefault();\n          containerRef.current.scrollBy({ top: -100, behavior: 'smooth' });\n          break;\n        case 'ArrowDown':\n          e.preventDefault();\n          containerRef.current.scrollBy({ top: 100, behavior: 'smooth' });\n          break;\n        case 'PageUp':\n          e.preventDefault();\n          containerRef.current.scrollBy({ \n            top: -containerRef.current.clientHeight * 0.8, \n            behavior: 'smooth' \n          });\n          break;\n        case 'PageDown':\n          e.preventDefault();\n          containerRef.current.scrollBy({ \n            top: containerRef.current.clientHeight * 0.8, \n            behavior: 'smooth' \n          });\n          break;\n        case 'Home':\n          e.preventDefault();\n          containerRef.current.scrollTo({ top: 0, behavior: 'smooth' });\n          break;\n        case 'End':\n          e.preventDefault();\n          containerRef.current.scrollTo({ \n            top: containerRef.current.scrollHeight, \n            behavior: 'smooth' \n          });\n          break;\n        case ' ': // Spacebar for auto-scroll toggle\n          e.preventDefault();\n          setIsAutoScrolling(prev => !prev);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  // Update settings\n  const updateSettings = (newSettings: Partial<ReaderSettings>) => {\n    const updated = { ...settings, ...newSettings };\n    if (onSettingsChange) {\n      onSettingsChange(updated);\n    }\n  };\n\n  // We'll use ReactMarkdown for proper markdown rendering\n\n  const getThemeClasses = () => {\n    switch (settings.theme) {\n      case 'dark':\n        return 'bg-gray-900 text-gray-100';\n      case 'sepia':\n        return 'bg-yellow-50 text-yellow-900';\n      default:\n        return 'bg-white text-gray-900';\n    }\n  };\n\n  if (!content) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">No content available</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Reader Controls */}\n      <div className=\"absolute top-20 right-4 z-10 space-y-2\">\n        <Button\n          variant=\"secondary\"\n          size=\"icon\"\n          onClick={() => setShowSettings(!showSettings)}\n          className=\"bg-background/80 backdrop-blur-sm\"\n        >\n          <Settings className=\"w-4 h-4\" />\n        </Button>\n        \n        {showSettings && (\n          <Card className=\"w-80 bg-background/95 backdrop-blur-sm\">\n            <CardContent className=\"p-4 space-y-6\">\n              {/* Font Size */}\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">\n                  Font Size: {settings.fontSize}px\n                </Label>\n                <Slider\n                  value={[settings.fontSize]}\n                  onValueChange={([value]) => updateSettings({ fontSize: value })}\n                  min={12}\n                  max={24}\n                  step={1}\n                  className=\"w-full\"\n                />\n              </div>\n              \n              {/* Line Height */}\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">\n                  Line Height: {settings.lineHeight}\n                </Label>\n                <Slider\n                  value={[settings.lineHeight]}\n                  onValueChange={([value]) => updateSettings({ lineHeight: value })}\n                  min={1.2}\n                  max={2.0}\n                  step={0.1}\n                  className=\"w-full\"\n                />\n              </div>\n              \n              {/* Theme */}\n              <div>\n                <Label className=\"text-sm font-medium\">Theme</Label>\n                <Select \n                  value={settings.theme} \n                  onValueChange={(value: 'light' | 'dark' | 'sepia') => \n                    updateSettings({ theme: value })\n                  }\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"light\">Light</SelectItem>\n                    <SelectItem value=\"dark\">Dark</SelectItem>\n                    <SelectItem value=\"sepia\">Sepia</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {/* Auto-scroll Settings */}\n              <div>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Switch\n                    id=\"auto-scroll\"\n                    checked={settings.autoScroll}\n                    onCheckedChange={(checked) => updateSettings({ autoScroll: checked })}\n                  />\n                  <Label htmlFor=\"auto-scroll\" className=\"text-sm\">Auto-scroll</Label>\n                </div>\n                \n                {settings.autoScroll && (\n                  <div>\n                    <Label className=\"text-sm font-medium mb-2 block\">\n                      Scroll Speed: {settings.scrollSpeed}x\n                    </Label>\n                    <Slider\n                      value={[settings.scrollSpeed]}\n                      onValueChange={([value]) => updateSettings({ scrollSpeed: value })}\n                      min={0.5}\n                      max={3}\n                      step={0.1}\n                      className=\"w-full\"\n                    />\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Reading Stats */}\n      <div className=\"absolute top-20 left-4 z-10\">\n        <Card className=\"bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center space-x-4 text-sm\">\n              <div className=\"flex items-center space-x-1\">\n                <Type className=\"w-4 h-4\" />\n                <span>{wordsRead} / {content.trim().split(/\\s+/).length} words</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <AlignLeft className=\"w-4 h-4\" />\n                <span>{Math.round(currentProgress)}%</span>\n              </div>\n              <div>\n                <span>{estimatedReadingTime} min read</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Auto-scroll Controls */}\n      {settings.autoScroll && (\n        <div className=\"absolute bottom-20 left-1/2 transform -translate-x-1/2 z-10\">\n          <div className=\"flex items-center space-x-2 bg-background/90 backdrop-blur-sm rounded-full px-4 py-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsAutoScrolling(!isAutoScrolling)}\n            >\n              {isAutoScrolling ? (\n                <Pause className=\"w-4 h-4\" />\n              ) : (\n                <Play className=\"w-4 h-4\" />\n              )}\n            </Button>\n            <span className=\"text-sm font-medium\">\n              {isAutoScrolling ? 'Pause' : 'Play'} Auto-scroll\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div \n        ref={containerRef}\n        className={`flex-1 overflow-y-auto overflow-x-hidden transition-colors duration-300 ${getThemeClasses()}`}\n        style={{\n          fontSize: `${settings.fontSize}px`,\n          lineHeight: settings.lineHeight,\n          overscrollBehavior: 'none',\n          WebkitOverflowScrolling: 'touch',\n        }}\n      >\n        <div className=\"max-w-4xl mx-auto px-6 py-8\">\n          <div \n            ref={contentRef}\n            className=\"prose prose-lg max-w-none dark:prose-invert\"\n            style={{\n              fontSize: 'inherit',\n              lineHeight: 'inherit',\n            }}\n          >\n            <ReactMarkdown \n              remarkPlugins={[remarkGfm]}\n              components={{\n                h1: ({ children }) => (\n                  <h1 style={{ fontSize: `${settings.fontSize + 8}px`, lineHeight: settings.lineHeight }}>\n                    {children}\n                  </h1>\n                ),\n                h2: ({ children }) => (\n                  <h2 style={{ fontSize: `${settings.fontSize + 4}px`, lineHeight: settings.lineHeight }}>\n                    {children}\n                  </h2>\n                ),\n                h3: ({ children }) => (\n                  <h3 style={{ fontSize: `${settings.fontSize + 2}px`, lineHeight: settings.lineHeight }}>\n                    {children}\n                  </h3>\n                ),\n                p: ({ children }) => (\n                  <p style={{ fontSize: 'inherit', lineHeight: 'inherit' }}>\n                    {children}\n                  </p>\n                ),\n                blockquote: ({ children }) => (\n                  <blockquote className=\"border-l-4 border-muted pl-4 italic my-4 text-muted-foreground\">\n                    {children}\n                  </blockquote>\n                ),\n                code: ({ children }) => (\n                  <code className=\"bg-muted px-1.5 py-0.5 rounded text-sm font-mono\">\n                    {children}\n                  </code>\n                ),\n                pre: ({ children }) => (\n                  <pre className=\"bg-muted p-4 rounded-lg overflow-x-auto my-4\">\n                    {children}\n                  </pre>\n                ),\n              }}\n            >\n              {content}\n            </ReactMarkdown>\n          </div>\n          \n          {/* End of chapter indicator */}\n          <div className=\"py-8 text-center\">\n            <div className=\"bg-muted/50 rounded-lg p-6\">\n              <p className=\"text-lg font-semibold mb-2\">End of Chapter</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {wordsRead} words read • {Math.round(currentProgress)}% complete\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14045},"client/src/components/reader/webtoon-reader.tsx":{"content":"import { useEffect, useRef, useState, useCallback } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, ImageIcon } from \"lucide-react\";\nimport type { ReaderSettings } from \"@/types\";\n\ninterface WebtoonReaderProps {\n  pages: string[];\n  onProgressChange?: (progress: number) => void;\n  settings?: ReaderSettings;\n}\n\nexport default function WebtoonReader({\n  pages,\n  onProgressChange,\n  settings = {\n    fontSize: 16,\n    lineHeight: 1.6,\n    theme: 'light',\n    autoScroll: false,\n    scrollSpeed: 1,\n  },\n}: WebtoonReaderProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [loadedImages, setLoadedImages] = useState<Set<number>>(new Set());\n  const [failedImages, setFailedImages] = useState<Set<number>>(new Set());\n  const [currentProgress, setCurrentProgress] = useState(0);\n\n  // Preload images for better performance\n  useEffect(() => {\n    const preloadImages = () => {\n      pages.forEach((page, index) => {\n        if (!loadedImages.has(index) && !failedImages.has(index)) {\n          const img = new Image();\n          img.onload = () => {\n            setLoadedImages(prev => new Set(Array.from(prev).concat([index])));\n          };\n          img.onerror = () => {\n            setFailedImages(prev => new Set(Array.from(prev).concat([index])));\n          };\n          img.src = page;\n        }\n      });\n    };\n\n    if (pages.length > 0) {\n      preloadImages();\n    }\n  }, [pages, loadedImages, failedImages]);\n\n  // Handle scroll progress tracking\n  const handleScroll = useCallback(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    const scrollTop = container.scrollTop;\n    const scrollHeight = container.scrollHeight - container.clientHeight;\n    const progress = scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0;\n    \n    setCurrentProgress(progress);\n    \n    if (onProgressChange) {\n      onProgressChange(progress);\n    }\n  }, [onProgressChange]);\n\n  // Auto-scroll functionality\n  useEffect(() => {\n    if (!settings.autoScroll || !containerRef.current) return;\n\n    const interval = setInterval(() => {\n      if (containerRef.current) {\n        const scrollAmount = settings.scrollSpeed * 2; // Adjust scroll speed\n        containerRef.current.scrollBy({ top: scrollAmount, behavior: 'smooth' });\n      }\n    }, 100);\n\n    return () => clearInterval(interval);\n  }, [settings.autoScroll, settings.scrollSpeed]);\n\n  // Add scroll event listener\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    container.addEventListener('scroll', handleScroll, { passive: true });\n    return () => container.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!containerRef.current) return;\n\n      switch (e.key) {\n        case 'ArrowUp':\n          e.preventDefault();\n          containerRef.current.scrollBy({ top: -100, behavior: 'smooth' });\n          break;\n        case 'ArrowDown':\n          e.preventDefault();\n          containerRef.current.scrollBy({ top: 100, behavior: 'smooth' });\n          break;\n        case 'PageUp':\n          e.preventDefault();\n          containerRef.current.scrollBy({ \n            top: -containerRef.current.clientHeight * 0.8, \n            behavior: 'smooth' \n          });\n          break;\n        case 'PageDown':\n          e.preventDefault();\n          containerRef.current.scrollBy({ \n            top: containerRef.current.clientHeight * 0.8, \n            behavior: 'smooth' \n          });\n          break;\n        case 'Home':\n          e.preventDefault();\n          containerRef.current.scrollTo({ top: 0, behavior: 'smooth' });\n          break;\n        case 'End':\n          e.preventDefault();\n          containerRef.current.scrollTo({ \n            top: containerRef.current.scrollHeight, \n            behavior: 'smooth' \n          });\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  if (!pages || pages.length === 0) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">No content available</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      ref={containerRef}\n      className=\"h-screen overflow-y-auto overflow-x-hidden bg-background\"\n      style={{\n        scrollBehavior: 'smooth',\n        overscrollBehavior: 'none',\n        WebkitOverflowScrolling: 'touch',\n      }}\n    >\n      <div className=\"max-w-4xl mx-auto\">\n        {pages.map((page, index) => (\n          <div key={index} className=\"relative\">\n            {loadedImages.has(index) ? (\n              <img\n                src={page}\n                alt={`Page ${index + 1}`}\n                className=\"w-full h-auto block\"\n                style={{\n                  maxWidth: '100%',\n                  height: 'auto',\n                }}\n                loading=\"lazy\"\n              />\n            ) : failedImages.has(index) ? (\n              <div \n                className=\"w-full bg-muted flex items-center justify-center\"\n                style={{ minHeight: '400px' }}\n              >\n                <div className=\"text-center\">\n                  <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">Failed to load image</p>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"mt-2\"\n                    onClick={() => {\n                      setFailedImages(prev => {\n                        const newSet = new Set(prev);\n                        newSet.delete(index);\n                        return newSet;\n                      });\n                    }}\n                  >\n                    Retry\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <Skeleton \n                className=\"w-full\"\n                style={{ minHeight: '400px' }}\n              />\n            )}\n            \n            {/* Page number indicator */}\n            <div className=\"absolute top-4 right-4 bg-black/50 text-white px-2 py-1 rounded text-xs\">\n              {index + 1} / {pages.length}\n            </div>\n          </div>\n        ))}\n        \n        {/* End of chapter indicator */}\n        <div className=\"py-8 text-center\">\n          <div className=\"bg-muted/50 rounded-lg p-6 mx-4\">\n            <p className=\"text-lg font-semibold mb-2\">End of Chapter</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Progress: {Math.round(currentProgress)}%\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7039},"client/src/components/series/series-card.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Star,\n  Eye,\n  BookOpen,\n  Play,\n  Crown,\n  Flame,\n  CheckCircle,\n  Sparkles,\n} from \"lucide-react\";\nimport type { SeriesCardProps } from \"@/types\";\n\nexport default function SeriesCard({\n  id,\n  title,\n  author,\n  coverImageUrl,\n  type,\n  status,\n  rating,\n  chapterCount,\n  viewCount,\n  isNew,\n  isPremium,\n  isHot,\n  isCompleted,\n  readingProgress = 0,\n  onClick,\n}: SeriesCardProps) {\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [imageError, setImageError] = useState(false);\n\n  const formatViewCount = (count: number) => {\n    if (count >= 1000000) {\n      return `${(count / 1000000).toFixed(1)}M`;\n    } else if (count >= 1000) {\n      return `${(count / 1000).toFixed(1)}K`;\n    }\n    return count.toString();\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'webtoon':\n        return 'bg-purple-500/90 text-white';\n      case 'manga':\n        return 'bg-blue-500/90 text-white';\n      case 'novel':\n        return 'bg-green-500/90 text-white';\n      default:\n        return 'bg-gray-500/90 text-white';\n    }\n  };\n\n  const handleCardClick = () => {\n    if (onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <Card \n      className=\"group cursor-pointer series-card overflow-hidden border-0 bg-transparent\"\n      onClick={handleCardClick}\n    >\n      <div className=\"relative\">\n        {/* Cover Image */}\n        <div className=\"relative aspect-3-4 overflow-hidden rounded-xl bg-muted\">\n          {!imageError && coverImageUrl ? (\n            <>\n              <img\n                src={coverImageUrl}\n                alt={`${title} cover`}\n                className={`w-full h-full object-cover transition-all duration-300 group-hover:scale-105 ${\n                  imageLoaded ? 'opacity-100' : 'opacity-0'\n                }`}\n                onLoad={() => setImageLoaded(true)}\n                onError={() => setImageError(true)}\n              />\n              {!imageLoaded && (\n                <div className=\"absolute inset-0 bg-muted animate-pulse\" />\n              )}\n            </>\n          ) : (\n            <div className=\"w-full h-full bg-gradient-to-br from-muted to-muted-foreground/20 flex items-center justify-center\">\n              <BookOpen className=\"w-12 h-12 text-muted-foreground\" />\n            </div>\n          )}\n\n          {/* Reading Progress Ring */}\n          {readingProgress > 0 && (\n            <div className=\"absolute top-2 right-2\">\n              <div className=\"relative w-8 h-8\">\n                <svg className=\"progress-ring w-8 h-8\" viewBox=\"0 0 100 100\">\n                  <circle\n                    className=\"stroke-white/30\"\n                    strokeWidth=\"8\"\n                    fill=\"transparent\"\n                    r=\"45\"\n                    cx=\"50\"\n                    cy=\"50\"\n                  />\n                  <circle\n                    className=\"stroke-primary\"\n                    strokeWidth=\"8\"\n                    fill=\"transparent\"\n                    r=\"45\"\n                    cx=\"50\"\n                    cy=\"50\"\n                    style={{\n                      strokeDasharray: 283,\n                      strokeDashoffset: 283 - (283 * readingProgress) / 100,\n                    }}\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-xs font-bold text-white\">\n                    {Math.round(readingProgress)}%\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Status Badges - Glassmorphism style */}\n          <div className=\"absolute top-2 left-2 flex flex-col gap-1\">\n            <Badge className={`${getTypeColor(type)} backdrop-blur-md bg-opacity-90 shadow-lg border-0 rounded-full px-3 py-1 font-semibold text-xs hover:shadow-xl transition-all duration-200`}>\n              {type.charAt(0).toUpperCase() + type.slice(1)}\n            </Badge>\n            \n            {isNew && (\n              <Badge className=\"bg-emerald-500/90 text-white backdrop-blur-md shadow-lg border-0 rounded-full px-3 py-1 font-semibold text-xs hover:bg-emerald-600/90 hover:shadow-xl transition-all duration-200\">\n                <Sparkles className=\"w-3 h-3 mr-1\" />\n                New\n              </Badge>\n            )}\n            \n            {isPremium && (\n              <Badge className=\"bg-amber-500/90 text-white backdrop-blur-md shadow-lg border-0 rounded-full px-3 py-1 font-semibold text-xs hover:bg-amber-600/90 hover:shadow-xl transition-all duration-200\">\n                <Crown className=\"w-3 h-3 mr-1\" />\n                Premium\n              </Badge>\n            )}\n            \n            {isHot && (\n              <Badge className=\"bg-red-500/90 text-white backdrop-blur-md shadow-lg border-0 rounded-full px-3 py-1 font-semibold text-xs hover:bg-red-600/90 hover:shadow-xl transition-all duration-200\">\n                <Flame className=\"w-3 h-3 mr-1\" />\n                Hot\n              </Badge>\n            )}\n            \n            {isCompleted && (\n              <Badge className=\"bg-blue-500/90 text-white backdrop-blur-md shadow-lg border-0 rounded-full px-3 py-1 font-semibold text-xs hover:bg-blue-600/90 hover:shadow-xl transition-all duration-200\">\n                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                Complete\n              </Badge>\n            )}\n          </div>\n\n          {/* Hover Overlay */}\n          <div className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-xl flex items-center justify-center\">\n            <div className=\"text-center\">\n              <Button size=\"sm\" className=\"mb-2\">\n                <Play className=\"w-4 h-4 mr-2\" />\n                {readingProgress > 0 ? 'Continue Reading' : 'Start Reading'}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Series Info */}\n        <div className=\"mt-3 space-y-2\">\n          <h3 className=\"font-semibold text-foreground line-clamp-2 group-hover:text-primary transition-colors\">\n            {title}\n          </h3>\n          \n          <p className=\"text-sm text-muted-foreground\">by {author}</p>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-1\">\n                <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                <span className=\"text-muted-foreground\">{rating}</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-1\">\n                <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-muted-foreground\">\n                  {formatViewCount(viewCount)}\n                </span>\n              </div>\n            </div>\n            \n            <span className=\"text-muted-foreground\">\n              {chapterCount} {type === 'novel' ? 'chapters' : type === 'webtoon' ? 'episodes' : 'chapters'}\n            </span>\n          </div>\n\n          {/* Reading Progress Bar */}\n          {readingProgress > 0 && (\n            <div className=\"space-y-1\">\n              <Progress value={readingProgress} className=\"h-1\" />\n              <p className=\"text-xs text-muted-foreground\">\n                {Math.round(readingProgress)}% completed\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":7774},"client/src/components/series/series-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport UnifiedSeriesCard from \"@/components/ui/unified-series-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Series } from \"@shared/schema\";\nimport type { FilterOptions } from \"@/types\";\n\ninterface SeriesGridProps {\n  filters?: FilterOptions;\n  featured?: boolean;\n  trending?: boolean;\n  limit?: number;\n  title?: string;\n  showFilters?: boolean;\n}\n\nexport default function SeriesGrid({\n  filters = {},\n  featured = false,\n  trending = false,\n  limit,\n  title,\n  showFilters = false,\n}: SeriesGridProps) {\n  const [, navigate] = useLocation();\n\n  const queryKey = trending \n    ? ['/api/series/trending', { limit }]\n    : ['/api/series', filters];\n\n  const { data: series = [], isLoading, error } = useQuery<Series[]>({\n    queryKey,\n    enabled: true,\n  });\n\n  const handleSeriesClick = (seriesId: string) => {\n    navigate(`/series/${seriesId}`);\n  };\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">Failed to load series. Please try again.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {title && (\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-foreground\">{title}</h2>\n          {showFilters && (\n            <div className=\"flex items-center space-x-2\">\n              {/* Filter buttons can be added here */}\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4 md:gap-6\">\n        {isLoading\n          ? Array.from({ length: limit || 12 }).map((_, index) => (\n              <div key={index} className=\"space-y-3\">\n                <Skeleton className=\"aspect-3-4 w-full rounded-xl\" />\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-3 w-2/3\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                </div>\n              </div>\n            ))\n          : series.map((item) => (\n              <UnifiedSeriesCard\n                key={item.id}\n                series={item}\n                onClick={() => handleSeriesClick(item.id)}\n              />\n            ))}\n      </div>\n\n      {series.length === 0 && !isLoading && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground text-lg\">No series found.</p>\n          <p className=\"text-muted-foreground text-sm mt-2\">\n            Try adjusting your filters or check back later for new content.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2717},"client/src/components/settings/ProfileSettingsPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useUserSettings } from \"@/hooks/useUserSettings\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Bell, \n  Book, \n  Eye, \n  Shield, \n  Save,\n  Smartphone,\n  Monitor,\n  Sun,\n  Moon,\n  Palette\n} from \"lucide-react\";\n\nexport default function ProfileSettingsPanel() {\n  const { settings, updateSettings, updateSetting, isUpdating } = useUserSettings();\n  const { toast } = useToast();\n  const [localSettings, setLocalSettings] = useState(settings);\n\n  const handleSaveSettings = () => {\n    updateSettings(localSettings);\n    toast({\n      title: \"Settings Updated\",\n      description: \"Your preferences have been saved successfully.\",\n    });\n  };\n\n  const handleToggleSetting = (key: string, value: boolean) => {\n    updateSetting({ key, value });\n    toast({\n      title: \"Setting Updated\",\n      description: \"Your preference has been updated.\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Notification Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Bell className=\"w-5 h-5\" />\n            <span>Notifications</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"new-chapters\">New Chapter Notifications</Label>\n            <Switch\n              id=\"new-chapters\"\n              checked={settings.notifications.newChapters}\n              onCheckedChange={(checked) => handleToggleSetting('notifications.newChapters', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"comments\">Comment Notifications</Label>\n            <Switch\n              id=\"comments\"\n              checked={settings.notifications.comments}\n              onCheckedChange={(checked) => handleToggleSetting('notifications.comments', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"likes\">Like Notifications</Label>\n            <Switch\n              id=\"likes\"\n              checked={settings.notifications.likes}\n              onCheckedChange={(checked) => handleToggleSetting('notifications.likes', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"follows\">Follow Notifications</Label>\n            <Switch\n              id=\"follows\"\n              checked={settings.notifications.follows}\n              onCheckedChange={(checked) => handleToggleSetting('notifications.follows', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"marketing\">Marketing Emails</Label>\n            <Switch\n              id=\"marketing\"\n              checked={settings.notifications.marketing}\n              onCheckedChange={(checked) => handleToggleSetting('notifications.marketing', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reading Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Book className=\"w-5 h-5\" />\n            <span>Reading Preferences</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label>Reading Layout</Label>\n            <Select\n              value={settings.reading.layout}\n              onValueChange={(value: 'vertical' | 'horizontal') => \n                handleToggleSetting('reading.layout', value)\n              }\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"vertical\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Smartphone className=\"w-4 h-4\" />\n                    <span>Vertical (Mobile)</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"horizontal\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Monitor className=\"w-4 h-4\" />\n                    <span>Horizontal (Desktop)</span>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Page Display Mode</Label>\n            <Select\n              value={settings.reading.pageMode}\n              onValueChange={(value: 'single' | 'double') => \n                handleToggleSetting('reading.pageMode', value)\n              }\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"single\">Single Page</SelectItem>\n                <SelectItem value=\"double\">Double Page</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Reading Theme</Label>\n            <Select\n              value={settings.reading.theme}\n              onValueChange={(value: 'light' | 'dark' | 'sepia') => \n                handleToggleSetting('reading.theme', value)\n              }\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"light\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Sun className=\"w-4 h-4\" />\n                    <span>Light</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"dark\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Moon className=\"w-4 h-4\" />\n                    <span>Dark</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"sepia\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Palette className=\"w-4 h-4\" />\n                    <span>Sepia</span>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Font Size: {settings.reading.fontSize}px</Label>\n            <Slider\n              value={[settings.reading.fontSize]}\n              onValueChange={([value]) => handleToggleSetting('reading.fontSize', value)}\n              min={12}\n              max={24}\n              step={1}\n              className=\"w-full\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"auto-scroll\">Auto Scroll</Label>\n            <Switch\n              id=\"auto-scroll\"\n              checked={settings.reading.autoScroll}\n              onCheckedChange={(checked) => handleToggleSetting('reading.autoScroll', checked)}\n            />\n          </div>\n\n          {settings.reading.autoScroll && (\n            <div className=\"space-y-2\">\n              <Label>Scroll Speed: {settings.reading.scrollSpeed}x</Label>\n              <Slider\n                value={[settings.reading.scrollSpeed]}\n                onValueChange={([value]) => handleToggleSetting('reading.scrollSpeed', value)}\n                min={0.5}\n                max={3}\n                step={0.1}\n                className=\"w-full\"\n              />\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Content Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Eye className=\"w-5 h-5\" />\n            <span>Content Preferences</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Label htmlFor=\"show-mature\">Show Mature Content</Label>\n              <p className=\"text-sm text-muted-foreground\">Display content marked as mature/NSFW</p>\n            </div>\n            <Switch\n              id=\"show-mature\"\n              checked={settings.content.showMature}\n              onCheckedChange={(checked) => handleToggleSetting('content.showMature', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"hide-completed\">Hide Completed Series</Label>\n            <Switch\n              id=\"hide-completed\"\n              checked={settings.content.hideCompleted}\n              onCheckedChange={(checked) => handleToggleSetting('content.hideCompleted', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show-spoilers\">Show Spoilers</Label>\n            <Switch\n              id=\"show-spoilers\"\n              checked={settings.content.showSpoilers}\n              onCheckedChange={(checked) => handleToggleSetting('content.showSpoilers', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Privacy Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Shield className=\"w-5 h-5\" />\n            <span>Privacy Settings</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label>Profile Visibility</Label>\n            <Select\n              value={settings.privacy.profileVisibility}\n              onValueChange={(value: 'public' | 'friends' | 'private') => \n                handleToggleSetting('privacy.profileVisibility', value)\n              }\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"public\">Public - Anyone can view</SelectItem>\n                <SelectItem value=\"friends\">Friends Only</SelectItem>\n                <SelectItem value=\"private\">Private - Only me</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show-activity\">Show Activity</Label>\n            <Switch\n              id=\"show-activity\"\n              checked={settings.privacy.showActivity}\n              onCheckedChange={(checked) => handleToggleSetting('privacy.showActivity', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show-library\">Show Library</Label>\n            <Switch\n              id=\"show-library\"\n              checked={settings.privacy.showLibrary}\n              onCheckedChange={(checked) => handleToggleSetting('privacy.showLibrary', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"allow-follows\">Allow Follows</Label>\n            <Switch\n              id=\"allow-follows\"\n              checked={settings.privacy.allowFollows}\n              onCheckedChange={(checked) => handleToggleSetting('privacy.allowFollows', checked)}\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"show-reading-history\">Show Reading History</Label>\n            <Switch\n              id=\"show-reading-history\"\n              checked={settings.privacy.showReadingHistory}\n              onCheckedChange={(checked) => handleToggleSetting('privacy.showReadingHistory', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12248},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Lock, ArrowRight } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}\n\nexport function ProtectedRoute({ children, fallback }: ProtectedRouteProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[50vh]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    if (fallback) {\n      return <>{fallback}</>;\n    }\n\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-md mx-auto\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto mb-4 h-12 w-12 rounded-full bg-muted flex items-center justify-center\">\n                <Lock className=\"h-6 w-6 text-muted-foreground\" />\n              </div>\n              <CardTitle>Sign In Required</CardTitle>\n              <CardDescription>\n                You need to be signed in to access this feature\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button \n                onClick={() => {\n                  const currentPath = window.location.pathname;\n                  setLocation(`/auth?returnTo=${encodeURIComponent(currentPath)}`);\n                }}\n                className=\"w-full\"\n              >\n                Sign In\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setLocation(\"/\")}\n                className=\"w-full\"\n              >\n                Continue as Guest\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":2181},"client/src/components/ui/quick-actions.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  Plus,\n  ScrollText,\n  BookOpen,\n  PenTool,\n} from \"lucide-react\";\n\nexport default function QuickActions() {\n  const [, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (!isAuthenticated || !user?.isCreator) {\n    return null;\n  }\n\n  const actions = [\n    {\n      id: 'webtoon',\n      label: 'Create Webtoon',\n      icon: ScrollText,\n      color: 'bg-accent hover:bg-accent/90',\n      onClick: () => navigate('/creator/upload?type=webtoon'),\n    },\n    {\n      id: 'manga',\n      label: 'Create Manga',\n      icon: BookOpen,\n      color: 'bg-secondary hover:bg-secondary/90',\n      onClick: () => navigate('/creator/upload?type=manga'),\n    },\n    {\n      id: 'novel',\n      label: 'Write Novel',\n      icon: PenTool,\n      color: 'bg-primary hover:bg-primary/90',\n      onClick: () => navigate('/creator/upload?type=novel'),\n    },\n  ];\n\n  const toggleActions = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleActionClick = (action: typeof actions[0]) => {\n    action.onClick();\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"fixed bottom-24 md:bottom-8 right-4 z-30\">\n      <div className=\"relative\">\n        {/* Action Menu */}\n        <div \n          className={`absolute bottom-16 right-0 space-y-2 transition-all duration-300 ${\n            isOpen \n              ? 'opacity-100 pointer-events-auto translate-y-0' \n              : 'opacity-0 pointer-events-none translate-y-4'\n          }`}\n        >\n          {actions.map((action) => {\n            const IconComponent = action.icon;\n            return (\n              <Button\n                key={action.id}\n                size=\"icon\"\n                className={`w-12 h-12 rounded-full shadow-lg transition-transform hover:scale-110 ${action.color}`}\n                onClick={() => handleActionClick(action)}\n                title={action.label}\n              >\n                <IconComponent className=\"w-5 h-5\" />\n              </Button>\n            );\n          })}\n        </div>\n\n        {/* Main FAB */}\n        <Button\n          size=\"icon\"\n          className={`w-14 h-14 rounded-full shadow-lg transition-all duration-300 bg-gradient-to-r from-primary to-secondary hover:scale-110 ${\n            isOpen ? 'rotate-45' : 'rotate-0'\n          }`}\n          onClick={toggleActions}\n        >\n          <Plus className=\"w-6 h-6 text-white\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2622},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/series-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Eye, Heart, BookOpen, Star, Clock, User } from \"lucide-react\";\nimport { format, isValid, parseISO } from \"date-fns\";\nimport type { Series } from \"@shared/schema\";\n\ninterface SeriesCardProps {\n  series: Series;\n  layout?: \"grid\" | \"list\";\n}\n\nexport function SeriesCard({ series, layout = \"grid\" }: SeriesCardProps) {\n  const formatNumber = (num: number) => {\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n    return num.toString();\n  };\n\n  const formatDate = (date: string | Date | null | undefined) => {\n    if (!date) return \"Unknown\";\n    try {\n      const parsedDate = typeof date === 'string' ? parseISO(date) : date;\n      return isValid(parsedDate) ? format(parsedDate, 'MMM d, yyyy') : \"Unknown\";\n    } catch {\n      return \"Unknown\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"ongoing\":\n        return \"bg-green-500\";\n      case \"completed\":\n        return \"bg-blue-500\";\n      case \"hiatus\":\n        return \"bg-yellow-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"webtoon\":\n        return \"🎨\";\n      case \"manga\":\n        return \"📖\";\n      case \"novel\":\n        return \"✍️\";\n      default:\n        return \"📚\";\n    }\n  };\n\n  if (layout === \"list\") {\n    return (\n      <Card className=\"hover:shadow-md transition-shadow duration-200\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex gap-4\">\n            {/* Cover Image */}\n            <div className=\"w-20 h-24 flex-shrink-0 bg-muted rounded-md overflow-hidden\">\n              {series.coverImageUrl ? (\n                <img\n                  src={series.coverImageUrl}\n                  alt={series.title}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center text-2xl\">\n                  {getTypeIcon(series.type)}\n                </div>\n              )}\n            </div>\n\n            {/* Content */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-start justify-between mb-2\">\n                <div className=\"flex-1 min-w-0\">\n                  <Link href={`/series/${series.id}`}>\n                    <h3 className=\"font-semibold text-foreground hover:text-primary cursor-pointer truncate\">\n                      {series.title}\n                    </h3>\n                  </Link>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {series.type}\n                    </Badge>\n                    <Badge \n                      variant=\"outline\" \n                      className={`text-xs ${getStatusColor(series.status || 'ongoing')} text-white border-0`}\n                    >\n                      {series.status || 'ongoing'}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              <p className=\"text-sm text-muted-foreground line-clamp-2 mb-3\">\n                {series.description || \"No description available.\"}\n              </p>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    <Eye className=\"w-3 h-3\" />\n                    {formatNumber(series.viewCount || 0)}\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <BookOpen className=\"w-3 h-3\" />\n                    {series.chapterCount || 0} chapters\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"w-3 h-3\" />\n                    {series.rating || \"0.0\"}\n                  </div>\n                </div>\n                \n                <Button size=\"sm\" variant=\"outline\" asChild>\n                  <Link href={`/series/${series.id}`}>\n                    Read Now\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"group hover:shadow-lg transition-all duration-300 overflow-hidden\">\n      <div className=\"relative\">\n        {/* Cover Image */}\n        <div className=\"aspect-[3/4] bg-muted overflow-hidden\">\n          {series.coverImageUrl ? (\n            <img\n              src={series.coverImageUrl}\n              alt={series.title}\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center text-4xl\">\n              {getTypeIcon(series.type)}\n            </div>\n          )}\n        </div>\n\n        {/* Status Badge */}\n        <Badge \n          className={`absolute top-2 left-2 ${getStatusColor(series.status || 'ongoing')} text-white border-0`}\n        >\n          {series.status || 'ongoing'}\n        </Badge>\n\n        {/* NSFW Badge */}\n        {series.isNSFW && (\n          <Badge variant=\"destructive\" className=\"absolute top-2 right-2\">\n            18+\n          </Badge>\n        )}\n\n        {/* Overlay on hover */}\n        <div className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center\">\n          <Button asChild>\n            <Link href={`/series/${series.id}`}>\n              Read Now\n            </Link>\n          </Button>\n        </div>\n      </div>\n\n      <CardContent className=\"p-4\">\n        {/* Title and Type */}\n        <div className=\"mb-2\">\n          <Link href={`/series/${series.id}`}>\n            <h3 className=\"font-semibold text-foreground hover:text-primary cursor-pointer line-clamp-2 min-h-[2.5rem]\">\n              {series.title}\n            </h3>\n          </Link>\n          <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n            {series.type}\n          </Badge>\n        </div>\n\n        {/* Description */}\n        <p className=\"text-sm text-muted-foreground line-clamp-2 mb-3 min-h-[2.5rem]\">\n          {series.description || \"No description available.\"}\n        </p>\n\n        {/* Genres */}\n        {series.genres && series.genres.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            {series.genres.slice(0, 2).map((genre) => (\n              <Badge key={genre} variant=\"outline\" className=\"text-xs\">\n                {genre}\n              </Badge>\n            ))}\n            {series.genres.length > 2 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{series.genres.length - 2}\n              </Badge>\n            )}\n          </div>\n        )}\n\n        {/* Stats */}\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex items-center gap-1\">\n              <Eye className=\"w-3 h-3\" />\n              {formatNumber(series.viewCount || 0)}\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <BookOpen className=\"w-3 h-3\" />\n              {series.chapterCount || 0}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-1\">\n            <Star className=\"w-3 h-3 text-yellow-500\" />\n            <span>{series.rating || \"0.0\"}</span>\n          </div>\n        </div>\n\n        {/* Author info */}\n        <div className=\"flex items-center gap-2 mt-3 pt-3 border-t\">\n          <Avatar className=\"w-6 h-6\">\n            <AvatarImage src=\"\" alt=\"Author\" />\n            <AvatarFallback className=\"bg-primary/10 text-xs\">\n              <User className=\"w-3 h-3\" />\n            </AvatarFallback>\n          </Avatar>\n          <span className=\"text-xs text-muted-foreground truncate\">\n            Author\n          </span>\n          <div className=\"ml-auto flex items-center gap-1 text-xs text-muted-foreground\">\n            <Clock className=\"w-3 h-3\" />\n            {series.updatedAt ? (\n              new Date(series.updatedAt).toLocaleDateString()\n            ) : (\n              \"Recently\"\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8723},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"storyverse-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1611},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/unified-series-card.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Star,\n  Eye,\n  BookOpen,\n  Play,\n  Heart,\n  Bookmark,\n} from \"lucide-react\";\nimport type { Series, User } from \"@shared/schema\";\n\ninterface UnifiedSeriesCardProps {\n  series: Series & { author?: User };\n  showProgress?: boolean;\n  readingProgress?: number;\n  onClick?: () => void;\n}\n\nexport default function UnifiedSeriesCard({\n  series,\n  showProgress = false,\n  readingProgress = 0,\n  onClick,\n}: UnifiedSeriesCardProps) {\n  const [, navigate] = useLocation();\n\n  const formatViewCount = (count: number) => {\n    if (count >= 1000000) {\n      return `${(count / 1000000).toFixed(1)}M`;\n    } else if (count >= 1000) {\n      return `${(count / 1000).toFixed(1)}K`;\n    }\n    return count.toString();\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'webtoon':\n        return 'bg-purple-500 text-white';\n      case 'manga':\n        return 'bg-blue-500 text-white';\n      case 'novel':\n        return 'bg-green-500 text-white';\n      default:\n        return 'bg-gray-500 text-white';\n    }\n  };\n\n  const handleCardClick = () => {\n    if (onClick) {\n      onClick();\n    } else {\n      navigate(`/series/${series.id}`);\n    }\n  };\n\n  return (\n    <Card \n      className=\"group cursor-pointer overflow-hidden border-0 bg-transparent hover:scale-105 transition-transform duration-200\"\n      onClick={handleCardClick}\n    >\n      <div className=\"relative\">\n        {/* Cover Image */}\n        <div className=\"relative aspect-3-4 overflow-hidden rounded-xl bg-muted\">\n          {series.coverImageUrl ? (\n            <img\n              src={series.coverImageUrl}\n              alt={series.title}\n              className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n              loading=\"lazy\"\n            />\n          ) : (\n            <div className=\"w-full h-full bg-gradient-to-br from-muted to-muted-foreground/20 flex items-center justify-center\">\n              <BookOpen className=\"w-12 h-12 text-muted-foreground\" />\n            </div>\n          )}\n          \n          {/* Type Badge - Only show series type on covers */}\n          <div className=\"absolute top-2 left-2\">\n            <Badge className={`${getTypeColor(series.type || 'unknown')} backdrop-blur-sm bg-opacity-90 shadow-lg border-0 rounded-full px-3 py-1 font-semibold text-xs hover:shadow-xl transition-all duration-200`}>\n              {series.type ? series.type.charAt(0).toUpperCase() + series.type.slice(1) : \"Unknown\"}\n            </Badge>\n          </div>\n\n          {/* NSFW Badge if applicable */}\n          {series.isNSFW && (\n            <div className=\"absolute top-2 right-2\">\n              <Badge variant=\"destructive\" className=\"rounded-full px-3 py-1 text-xs font-semibold\">\n                18+\n              </Badge>\n            </div>\n          )}\n\n          {/* Hover Actions */}\n          <div className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\n            <Button size=\"sm\" className=\"bg-white text-black hover:bg-white/90\">\n              <Play className=\"w-4 h-4 mr-2\" />\n              Read Now\n            </Button>\n          </div>\n        </div>\n\n        {/* Reading Progress */}\n        {showProgress && readingProgress > 0 && (\n          <div className=\"absolute bottom-0 left-0 right-0 px-2 pb-2\">\n            <Progress value={readingProgress} className=\"h-1\" />\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"p-3 space-y-2\">\n        <h3 className=\"font-semibold text-sm leading-tight line-clamp-2 text-foreground\">\n          {series.title}\n        </h3>\n        \n        {/* Stats */}\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-1\">\n              <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n              <span>{series.rating || 0}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Eye className=\"w-3 h-3\" />\n              <span>{formatViewCount(series.viewCount || 0)}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <BookOpen className=\"w-3 h-3\" />\n              <span>{series.chapterCount || 0}</span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Author */}\n        <p className=\"text-xs text-muted-foreground truncate\">\n          by {series.author?.username || series.author?.firstName || series.author?.creatorDisplayName || \"Unknown\"}\n        </p>\n      </div>\n    </Card>\n  );\n}","size_bytes":4921},"client/src/pages/creator/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Eye,\n  Users,\n  DollarSign,\n  TrendingUp,\n  BookOpen,\n  Star,\n  Target,\n  Zap,\n  Award,\n  Clock\n} from \"lucide-react\";\nimport { format, parseISO, subDays, subWeeks } from \"date-fns\";\n\ninterface AnalyticsData {\n  totalViews: number;\n  followers: number;\n  coinsEarned: number;\n  activeSeries: number;\n  weeklyViews: number;\n  monthlyViews: number;\n  adRevenue: {\n    totalImpressions: number;\n    totalClicks: number;\n    ctr: number;\n    revenue: number;\n    weeklyRevenue: number;\n    monthlyRevenue: number;\n    dailyStats: Array<{\n      date: string;\n      impressions: number;\n      clicks: number;\n      revenue: number;\n    }>;\n  };\n  seriesStats: Array<{\n    id: string;\n    title: string;\n    coverImageUrl: string | null;\n    views: number;\n    followers: number;\n    rating: string | null;\n    chapters: number;\n    revenue: number;\n    adImpressions: number;\n  }>;\n}\n\nexport default function CreatorAnalytics() {\n  const { user, isAuthenticated } = useAuth();\n\n  const { data: analytics, isLoading } = useQuery<AnalyticsData>({\n    queryKey: ['/api/creator/analytics'],\n    enabled: isAuthenticated && user?.isCreator,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <TrendingUp className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Analytics Data</h3>\n            <p className=\"text-muted-foreground\">\n              Start creating content to see your analytics.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const hasAdRevenue = user?.followersCount && user.followersCount >= 1000;\n  const canEarnPremium = user?.followersCount && user.followersCount >= 500;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Creator Analytics</h1>\n          <p className=\"text-muted-foreground\">\n            Track your content performance and revenue streams\n          </p>\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total Views</p>\n                  <p className=\"text-2xl font-bold\">{analytics.totalViews.toLocaleString()}</p>\n                  <p className=\"text-xs text-green-600\">+{analytics.weeklyViews.toLocaleString()} this week</p>\n                </div>\n                <Eye className=\"w-8 h-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Followers</p>\n                  <p className=\"text-2xl font-bold\">{analytics.followers.toLocaleString()}</p>\n                  {canEarnPremium && (\n                    <Badge className=\"mt-1 bg-purple-500\">Premium Eligible</Badge>\n                  )}\n                </div>\n                <Users className=\"w-8 h-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Coins Earned</p>\n                  <p className=\"text-2xl font-bold\">{analytics.coinsEarned.toLocaleString()}</p>\n                  <p className=\"text-xs text-muted-foreground\">${(analytics.coinsEarned * 0.01).toFixed(2)} USD</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Active Series</p>\n                  <p className=\"text-2xl font-bold\">{analytics.activeSeries}</p>\n                  <p className=\"text-xs text-muted-foreground\">Publishing content</p>\n                </div>\n                <BookOpen className=\"w-8 h-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"series\">Series Performance</TabsTrigger>\n            {hasAdRevenue && <TabsTrigger value=\"ads\">Ad Revenue</TabsTrigger>}\n            <TabsTrigger value=\"earnings\">Earnings</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    Growth Metrics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm\">Weekly Views</span>\n                      <span className=\"text-sm font-medium\">{analytics.weeklyViews.toLocaleString()}</span>\n                    </div>\n                    <Progress value={Math.min((analytics.weeklyViews / 10000) * 100, 100)} />\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm\">Monthly Views</span>\n                      <span className=\"text-sm font-medium\">{analytics.monthlyViews.toLocaleString()}</span>\n                    </div>\n                    <Progress value={Math.min((analytics.monthlyViews / 50000) * 100, 100)} />\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm\">Followers Progress</span>\n                      <span className=\"text-sm font-medium\">{analytics.followers.toLocaleString()}</span>\n                    </div>\n                    <Progress value={Math.min((analytics.followers / 10000) * 100, 100)} />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Award className=\"w-5 h-5\" />\n                    Milestones & Achievements\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-3 h-3 rounded-full ${analytics.followers >= 500 ? 'bg-green-500' : 'bg-gray-300'}`} />\n                    <span className=\"text-sm\">500+ Followers - Premium Chapters</span>\n                    {analytics.followers >= 500 && <Badge className=\"bg-green-500\">Unlocked</Badge>}\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-3 h-3 rounded-full ${analytics.followers >= 1000 ? 'bg-green-500' : 'bg-gray-300'}`} />\n                    <span className=\"text-sm\">1000+ Followers - Ad Monetization</span>\n                    {analytics.followers >= 1000 && <Badge className=\"bg-green-500\">Unlocked</Badge>}\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-3 h-3 rounded-full ${analytics.followers >= 5000 ? 'bg-green-500' : 'bg-gray-300'}`} />\n                    <span className=\"text-sm\">5000+ Followers - Featured Creator</span>\n                    {analytics.followers >= 5000 && <Badge className=\"bg-green-500\">Unlocked</Badge>}\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`w-3 h-3 rounded-full ${analytics.totalViews >= 100000 ? 'bg-green-500' : 'bg-gray-300'}`} />\n                    <span className=\"text-sm\">100K+ Views - Popular Creator</span>\n                    {analytics.totalViews >= 100000 && <Badge className=\"bg-green-500\">Unlocked</Badge>}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Series Performance Tab */}\n          <TabsContent value=\"series\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Series Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {analytics.seriesStats.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {analytics.seriesStats.map((series) => (\n                      <div key={series.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-4\">\n                          <img \n                            src={series.coverImageUrl || ''} \n                            alt={series.title}\n                            className=\"w-12 h-16 object-cover rounded\"\n                          />\n                          <div>\n                            <h4 className=\"font-medium\">{series.title}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {series.chapters} chapters • ★ {series.rating || \"0.0\"}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium\">{series.views.toLocaleString()} views</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {series.followers.toLocaleString()} followers\n                          </p>\n                          <p className=\"text-sm text-green-600\">\n                            ${series.revenue.toFixed(2)} earned\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    No series data available\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Ad Revenue Tab */}\n          {hasAdRevenue && (\n            <TabsContent value=\"ads\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Impressions</p>\n                        <p className=\"text-2xl font-bold\">{analytics.adRevenue.totalImpressions.toLocaleString()}</p>\n                      </div>\n                      <Eye className=\"w-8 h-8 text-blue-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Click-Through Rate</p>\n                        <p className=\"text-2xl font-bold\">{analytics.adRevenue.ctr.toFixed(2)}%</p>\n                      </div>\n                      <Target className=\"w-8 h-8 text-green-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Ad Revenue</p>\n                        <p className=\"text-2xl font-bold\">${analytics.adRevenue.revenue.toFixed(2)}</p>\n                        <p className=\"text-xs text-green-600\">+${analytics.adRevenue.weeklyRevenue.toFixed(2)} this week</p>\n                      </div>\n                      <DollarSign className=\"w-8 h-8 text-yellow-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"w-5 h-5\" />\n                    Daily Ad Performance (Last 7 Days)\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {analytics.adRevenue.dailyStats.slice(-7).map((day, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">{format(parseISO(day.date), 'MMM dd')}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {day.impressions.toLocaleString()} impressions\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium\">${day.revenue.toFixed(2)}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {day.clicks} clicks\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n\n          {/* Earnings Tab */}\n          <TabsContent value=\"earnings\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Revenue Breakdown</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span>Premium Chapters</span>\n                    <span className=\"font-medium\">${(analytics.coinsEarned * 0.01).toFixed(2)}</span>\n                  </div>\n                  \n                  {hasAdRevenue && (\n                    <div className=\"flex justify-between items-center\">\n                      <span>Ad Revenue</span>\n                      <span className=\"font-medium\">${analytics.adRevenue.revenue.toFixed(2)}</span>\n                    </div>\n                  )}\n                  \n                  <hr />\n                  \n                  <div className=\"flex justify-between items-center font-bold\">\n                    <span>Total Earnings</span>\n                    <span>${((analytics.coinsEarned * 0.01) + (hasAdRevenue ? analytics.adRevenue.revenue : 0)).toFixed(2)}</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Earning Potential</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    <p className=\"mb-2\">Next milestone rewards:</p>\n                    \n                    {!canEarnPremium && (\n                      <div className=\"mb-3\">\n                        <p>• 500 followers: Unlock premium chapters</p>\n                        <Progress value={(analytics.followers / 500) * 100} className=\"mt-1\" />\n                        <p className=\"text-xs mt-1\">{500 - analytics.followers} followers to go</p>\n                      </div>\n                    )}\n                    \n                    {!hasAdRevenue && (\n                      <div className=\"mb-3\">\n                        <p>• 1,000 followers: Enable ad monetization</p>\n                        <Progress value={(analytics.followers / 1000) * 100} className=\"mt-1\" />\n                        <p className=\"text-xs mt-1\">{1000 - analytics.followers} followers to go</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":17642},"client/src/pages/creator/create-chapter.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Upload, \n  Image as ImageIcon, \n  X, \n  ArrowLeft, \n  Save, \n  Eye,\n  GripVertical,\n  Plus\n} from \"lucide-react\";\n\ninterface UploadedImage {\n  id: string;\n  file: File;\n  preview: string;\n  order: number;\n}\n\nexport default function CreateChapter() {\n  const { seriesId } = useParams<{ seriesId: string }>();\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [chapterNumber, setChapterNumber] = useState(1);\n  const [status, setStatus] = useState<'free' | 'premium'>('free');\n  const [coinPrice, setCoinPrice] = useState(0);\n  const [uploadedImages, setUploadedImages] = useState<UploadedImage[]>([]);\n  const [isDragging, setIsDragging] = useState(false);\n\n  // Fetch series data\n  const { data: series } = useQuery({\n    queryKey: [\"/api/series\", seriesId],\n    enabled: !!seriesId,\n  });\n\n  // Fetch existing chapters to determine next chapter number\n  const { data: chapters = [] } = useQuery({\n    queryKey: [\"/api/series\", seriesId, \"chapters\"],\n    enabled: !!seriesId,\n  });\n\n  // Update chapter number when chapters data changes\n  useState(() => {\n    if (chapters.length > 0) {\n      const maxChapter = Math.max(...chapters.map((ch: any) => ch.chapterNumber));\n      setChapterNumber(maxChapter + 1);\n    }\n  });\n\n  const createChapterMutation = useMutation({\n    mutationFn: async () => {\n      const formData = new FormData();\n      formData.append('title', title);\n      formData.append('description', description);\n      formData.append('chapterNumber', chapterNumber.toString());\n      formData.append('seriesId', seriesId!);\n      formData.append('status', status);\n      formData.append('coinPrice', coinPrice.toString());\n      \n      // Add images in order\n      uploadedImages.forEach((img, index) => {\n        formData.append('images', img.file);\n        formData.append('imageOrder', index.toString());\n      });\n\n      return fetch('/api/chapters', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Chapter created successfully!\",\n        description: \"Your chapter has been published.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/series\", seriesId, \"chapters\"] });\n      navigate(`/series/${seriesId}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error creating chapter\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (files: FileList | null) => {\n    if (!files) return;\n    \n    Array.from(files).forEach((file) => {\n      if (file.type.startsWith('image/')) {\n        const id = Math.random().toString(36).substr(2, 9);\n        const preview = URL.createObjectURL(file);\n        \n        setUploadedImages(prev => [...prev, {\n          id,\n          file,\n          preview,\n          order: prev.length\n        }]);\n      }\n    });\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    handleFileUpload(e.dataTransfer.files);\n  };\n\n  const removeImage = (id: string) => {\n    setUploadedImages(prev => prev.filter(img => img.id !== id));\n  };\n\n  const moveImage = (fromIndex: number, toIndex: number) => {\n    const items = Array.from(uploadedImages);\n    const [reorderedItem] = items.splice(fromIndex, 1);\n    items.splice(toIndex, 0, reorderedItem);\n\n    // Update order\n    const updatedItems = items.map((item, index) => ({\n      ...item,\n      order: index\n    }));\n\n    setUploadedImages(updatedItems);\n  };\n\n  const canCreatePremium = series && ((series as any).bookmarkCount || 0) >= 500;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => navigate(`/series/${seriesId}`)}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Series\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Create New Chapter</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Series: {(series as any)?.title}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              Preview\n            </Button>\n            <Button \n              onClick={() => createChapterMutation.mutate()}\n              disabled={!title.trim() || uploadedImages.length === 0 || createChapterMutation.isPending}\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {createChapterMutation.isPending ? 'Publishing...' : 'Publish Chapter'}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* Chapter Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Chapter Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"chapterNumber\">Chapter Number</Label>\n                  <Input\n                    id=\"chapterNumber\"\n                    type=\"number\"\n                    value={chapterNumber}\n                    onChange={(e) => setChapterNumber(parseInt(e.target.value) || 1)}\n                    min={1}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"title\">Chapter Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    placeholder=\"Enter chapter title\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Description (Optional)</Label>\n                <Textarea\n                  id=\"description\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  placeholder=\"Brief description of the chapter\"\n                  rows={3}\n                />\n              </div>\n\n              {/* Premium Options */}\n              <div className=\"space-y-3\">\n                <Label>Publishing Options</Label>\n                <div className=\"flex items-center space-x-4\">\n                  <Button\n                    variant={status === 'free' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setStatus('free')}\n                  >\n                    Free Chapter\n                  </Button>\n                  <Button\n                    variant={status === 'premium' ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setStatus('premium')}\n                    disabled={!canCreatePremium}\n                  >\n                    Premium Chapter\n                  </Button>\n                  {!canCreatePremium && (\n                    <Badge variant=\"secondary\">\n                      Need 500+ follows for premium chapters\n                    </Badge>\n                  )}\n                </div>\n                \n                {status === 'premium' && (\n                  <div className=\"mt-2\">\n                    <Label htmlFor=\"coinPrice\">Coin Price</Label>\n                    <Input\n                      id=\"coinPrice\"\n                      type=\"number\"\n                      value={coinPrice}\n                      onChange={(e) => setCoinPrice(parseInt(e.target.value) || 0)}\n                      min={1}\n                      max={100}\n                      placeholder=\"Enter coin price (1-100)\"\n                    />\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Image Upload */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Chapter Images</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* Upload Area */}\n              <div\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  isDragging \n                    ? 'border-primary bg-primary/5' \n                    : 'border-muted-foreground/25'\n                }`}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n              >\n                <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">Upload Chapter Images</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Drag and drop images here, or click to select files\n                </p>\n                <input\n                  type=\"file\"\n                  multiple\n                  accept=\"image/*\"\n                  onChange={(e) => handleFileUpload(e.target.files)}\n                  className=\"hidden\"\n                  id=\"file-upload\"\n                />\n                <Button asChild variant=\"outline\">\n                  <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Select Images\n                  </label>\n                </Button>\n              </div>\n\n              {/* Image Preview Grid */}\n              {uploadedImages.length > 0 && (\n                <div className=\"mt-6\">\n                  <h4 className=\"text-sm font-medium mb-3\">\n                    Uploaded Images ({uploadedImages.length})\n                  </h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                    {uploadedImages.map((image, index) => (\n                      <div key={image.id} className=\"relative group\">\n                        <div className=\"aspect-square bg-muted rounded-lg overflow-hidden\">\n                          <img\n                            src={image.preview}\n                            alt={`Chapter image ${index + 1}`}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <div className=\"absolute top-2 left-2 flex space-x-1\">\n                          {index > 0 && (\n                            <Button\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              className=\"opacity-0 group-hover:opacity-100 transition-opacity p-1 h-6 w-6\"\n                              onClick={() => moveImage(index, index - 1)}\n                            >\n                              ←\n                            </Button>\n                          )}\n                          {index < uploadedImages.length - 1 && (\n                            <Button\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              className=\"opacity-0 group-hover:opacity-100 transition-opacity p-1 h-6 w-6\"\n                              onClick={() => moveImage(index, index + 1)}\n                            >\n                              →\n                            </Button>\n                          )}\n                        </div>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity p-1 h-6 w-6\"\n                          onClick={() => removeImage(image.id)}\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </Button>\n                        <Badge className=\"absolute bottom-2 left-2 text-xs\">\n                          {index + 1}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":13300},"client/src/pages/creator/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport AnalyticsCard from \"@/components/creator/analytics-card\";\nimport UnifiedSeriesCard from \"@/components/ui/unified-series-card\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Eye,\n  Users,\n  Coins,\n  BookOpen,\n  Plus,\n  TrendingUp,\n  Calendar,\n  MessageCircle,\n  Star,\n  BarChart3,\n  Settings,\n} from \"lucide-react\";\nimport type { Series } from \"@shared/schema\";\nimport type { AnalyticsData } from \"@/types\";\n\nexport default function CreatorDashboard() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || !user)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need to log in to access the creator dashboard.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [authLoading, isAuthenticated, user, toast]);\n\n  // Fetch creator series\n  const { data: creatorSeries = [], isLoading: seriesLoading } = useQuery<Series[]>({\n    queryKey: [\"/api/creator/series\"],\n    enabled: isAuthenticated && !!user,\n    retry: false,\n  });\n\n  // Fetch analytics\n  const { data: analytics, isLoading: analyticsLoading } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/creator/analytics\"],\n    enabled: isAuthenticated && !!user,\n    retry: false,\n  });\n\n  // Fetch recent activity\n  const { data: recentActivity = [], isLoading: activityLoading } = useQuery<any[]>({\n    queryKey: [\"/api/creator/activity\"],\n    enabled: isAuthenticated && !!user,\n    retry: false,\n  });\n\n  const handleCreateNewSeries = () => {\n    navigate(\"/creator/upload\");\n  };\n\n  const handleSeriesClick = (seriesId: string) => {\n    navigate(`/creator/series/${seriesId}/manage`);\n  };\n\n  if (authLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"animate-fade-in space-y-6\">\n            <Skeleton className=\"h-8 w-64\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-32\" />\n              ))}\n            </div>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  if (!user.isCreator) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Creator Access Required</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              You need to be a creator to access this dashboard.\n            </p>\n            <Button onClick={() => navigate(\"/\")}>\n              Back to Home\n            </Button>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n        <div className=\"animate-fade-in space-y-8\">\n          \n          {/* Dashboard Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">Creator Dashboard</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage your content and track performance\n              </p>\n            </div>\n            <Button onClick={handleCreateNewSeries} size=\"lg\">\n              <Plus className=\"w-5 h-5 mr-2\" />\n              New Series\n            </Button>\n          </div>\n\n          {/* Analytics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {analyticsLoading ? (\n              Array.from({ length: 4 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-32\" />\n              ))\n            ) : (\n              <>\n                <AnalyticsCard\n                  title=\"Total Views\"\n                  value={analytics?.totalViews || 0}\n                  change={12.5}\n                  changeLabel=\"from last month\"\n                  icon={<Eye className=\"w-6 h-6\" />}\n                  color=\"primary\"\n                />\n                <AnalyticsCard\n                  title=\"Followers\"\n                  value={analytics?.followers || 0}\n                  change={8.2}\n                  changeLabel=\"from last month\"\n                  icon={<Users className=\"w-6 h-6\" />}\n                  color=\"accent\"\n                />\n                <AnalyticsCard\n                  title=\"Coins Earned\"\n                  value={analytics?.coinsEarned || 0}\n                  change={15.3}\n                  changeLabel=\"from last month\"\n                  icon={<Coins className=\"w-6 h-6\" />}\n                  color=\"warning\"\n                />\n                <AnalyticsCard\n                  title=\"Active Series\"\n                  value={analytics?.activeSeries || 0}\n                  changeLabel=\"2 ongoing, 1 completed\"\n                  icon={<BookOpen className=\"w-6 h-6\" />}\n                  color=\"secondary\"\n                />\n              </>\n            )}\n          </div>\n\n          {/* Content Tabs */}\n          <Tabs defaultValue=\"series\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"series\">\n                My Series ({creatorSeries.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"analytics\">\n                Analytics\n              </TabsTrigger>\n              <TabsTrigger value=\"activity\">\n                Recent Activity\n              </TabsTrigger>\n              <TabsTrigger value=\"settings\">\n                Settings\n              </TabsTrigger>\n            </TabsList>\n\n            {/* My Series Tab */}\n            <TabsContent value=\"series\" className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-xl font-semibold\">Your Series</h2>\n                <Button variant=\"outline\" onClick={handleCreateNewSeries}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create New\n                </Button>\n              </div>\n\n              {seriesLoading ? (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {Array.from({ length: 6 }).map((_, i) => (\n                    <div key={i} className=\"space-y-3\">\n                      <Skeleton className=\"aspect-3-4 w-full rounded-xl\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-3 w-2/3\" />\n                    </div>\n                  ))}\n                </div>\n              ) : creatorSeries.length > 0 ? (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {creatorSeries.map((series) => (\n                    <UnifiedSeriesCard\n                      key={series.id}\n                      series={series}\n                      onClick={() => handleSeriesClick(series.id)}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <Card className=\"glassmorphism\">\n                  <CardContent className=\"p-12 text-center\">\n                    <BookOpen className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No series yet</h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Create your first series to start sharing your stories with the world.\n                    </p>\n                    <Button onClick={handleCreateNewSeries}>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Your First Series\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            {/* Analytics Tab */}\n            <TabsContent value=\"analytics\" className=\"space-y-6\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <Card className=\"glassmorphism\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      <span>Views Over Time</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                      <p>Chart visualization would go here</p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glassmorphism\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"w-5 h-5\" />\n                      <span>Popular Series</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {creatorSeries.slice(0, 3).map((series, index) => (\n                        <div key={series.id} className=\"flex items-center space-x-3\">\n                          <Badge variant=\"secondary\">#{index + 1}</Badge>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-medium truncate\">{series.title}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {series.viewCount || 0} views\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Recent Activity Tab */}\n            <TabsContent value=\"activity\" className=\"space-y-6\">\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle>Recent Activity</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {recentActivity.length > 0 ? (\n                      recentActivity.map((activity: any) => (\n                        <div key={activity.id} className=\"flex items-center space-x-4 p-3 hover:bg-muted/50 rounded-lg transition-colors\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                            <MessageCircle className=\"w-5 h-5 text-primary\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-foreground\">\n                              {activity.message || \"Activity update\"}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {activity.timestamp || \"Recently\"}\n                            </p>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No recent activity.</p>\n                        <p className=\"text-sm text-muted-foreground mt-2\">\n                          Activity will appear here as you publish content and engage with readers.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Settings Tab */}\n            <TabsContent value=\"settings\" className=\"space-y-6\">\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Settings className=\"w-5 h-5\" />\n                    <span>Creator Settings</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"text-lg font-medium mb-4\">Monetization</h3>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">Premium Chapters</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Allow readers to unlock chapters with coins\n                            </p>\n                          </div>\n                          <Badge variant=\"secondary\">Available</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">Ad Revenue</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Show ads on your content to earn revenue\n                            </p>\n                          </div>\n                          <Badge variant=\"secondary\">Enabled</Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h3 className=\"text-lg font-medium mb-4\">Notifications</h3>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">New Comments</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Get notified when readers comment on your work\n                            </p>\n                          </div>\n                          <Badge variant=\"secondary\">On</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">New Followers</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Get notified when someone follows you\n                            </p>\n                          </div>\n                          <Badge variant=\"secondary\">On</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":15797},"client/src/pages/creator/series-create-chapter.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  ArrowLeft, \n  Upload, \n  X, \n  Image as ImageIcon, \n  FileText, \n  Save, \n  Eye,\n  Coins,\n  AlertTriangle\n} from \"lucide-react\";\nimport type { Series } from \"@shared/schema\";\n\nconst chapterSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(200, \"Title too long\"),\n  chapterNumber: z.number().min(1, \"Chapter number must be at least 1\"),\n  content: z.string().optional(),\n  coinPrice: z.number().min(0, \"Price cannot be negative\").max(100, \"Price too high\"),\n  isPremium: z.boolean(),\n});\n\ntype ChapterFormData = z.infer<typeof chapterSchema>;\n\nexport default function CreateChapter() {\n  const { seriesId } = useParams<{ seriesId: string }>();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [uploading, setUploading] = useState(false);\n\n  // Fetch series data\n  const { data: series, isLoading: seriesLoading } = useQuery<Series & { author: any }>({\n    queryKey: [\"/api/series\", seriesId],\n    enabled: !!seriesId,\n  });\n\n  // Get next chapter number\n  const { data: chapters = [] } = useQuery<any[]>({\n    queryKey: [\"/api/series\", seriesId, \"chapters\"],\n    enabled: !!seriesId,\n  });\n\n  const nextChapterNumber = chapters.length > 0 \n    ? Math.max(...chapters.map((c) => c.chapterNumber)) + 1 \n    : 1;\n\n  const form = useForm<ChapterFormData>({\n    resolver: zodResolver(chapterSchema),\n    defaultValues: {\n      title: \"\",\n      chapterNumber: nextChapterNumber,\n      content: \"\",\n      coinPrice: 0,\n      isPremium: false,\n    },\n  });\n\n  // Create chapter mutation\n  const createChapterMutation = useMutation({\n    mutationFn: async (data: ChapterFormData) => {\n      setUploading(true);\n      const formData = new FormData();\n      \n      // Add form fields\n      formData.append(\"title\", data.title);\n      formData.append(\"chapterNumber\", data.chapterNumber.toString());\n      formData.append(\"coinPrice\", data.coinPrice.toString());\n      \n      // Add content based on series type\n      if (series?.type === \"novel\") {\n        formData.append(\"content\", data.content || \"\");\n      } else {\n        // Add uploaded files for webtoon/manga\n        uploadedFiles.forEach((file) => {\n          formData.append(\"pages\", file);\n        });\n      }\n\n      const response = await fetch(`/api/series/${seriesId}/chapters`, {\n        method: \"POST\",\n        body: formData,\n      });\n      if (!response.ok) throw new Error('Failed to create chapter');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/series\", seriesId, \"chapters\"] });\n      toast({\n        title: \"Success\",\n        description: \"Chapter created successfully!\",\n      });\n      navigate(`/creator/series/${seriesId}/manage`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create chapter\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setUploading(false);\n    },\n  });\n\n  // File upload handlers\n  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const validFiles = files.filter(file => \n      file.type.startsWith('image/') && file.size <= 10 * 1024 * 1024 // 10MB limit\n    );\n    \n    if (validFiles.length !== files.length) {\n      toast({\n        title: \"Invalid files\",\n        description: \"Only image files under 10MB are allowed\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setUploadedFiles(prev => [...prev, ...validFiles]);\n  }, [toast]);\n\n  const removeFile = useCallback((index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  }, []);\n\n  const onSubmit = (data: ChapterFormData) => {\n    // Validate content based on series type\n    if (series?.type === \"novel\" && !data.content?.trim()) {\n      toast({\n        title: \"Content required\",\n        description: \"Novel chapters must have text content\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (series?.type !== \"novel\" && uploadedFiles.length === 0) {\n      toast({\n        title: \"Images required\",\n        description: \"Webtoon and manga chapters must have at least one image\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createChapterMutation.mutate(data);\n  };\n\n  if (seriesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"animate-fade-in space-y-6\">\n            <Skeleton className=\"h-8 w-64\" />\n            <Skeleton className=\"h-32 w-full\" />\n            <Skeleton className=\"h-48 w-full\" />\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  if (!series) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Series Not Found</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              The series you're trying to add a chapter to doesn't exist or you don't have permission.\n            </p>\n            <Button onClick={() => navigate(\"/creator/dashboard\")}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  const canSetPremium = (series.bookmarkCount || 0) >= 500;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n        \n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" onClick={() => navigate(`/creator/series/${seriesId}/manage`)}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Series\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">Create New Chapter</h1>\n              <p className=\"text-muted-foreground\">{series.title}</p>\n            </div>\n          </div>\n          <Badge className=\"capitalize\">\n            {series.type}\n          </Badge>\n        </div>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          \n          {/* Basic Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Chapter Information</CardTitle>\n              <CardDescription>Basic details for your new chapter</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"chapterNumber\">Chapter Number</Label>\n                  <Input\n                    id=\"chapterNumber\"\n                    type=\"number\"\n                    min=\"1\"\n                    {...form.register(\"chapterNumber\", { valueAsNumber: true })}\n                  />\n                  {form.formState.errors.chapterNumber && (\n                    <p className=\"text-sm text-destructive\">\n                      {form.formState.errors.chapterNumber.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Chapter Title</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Enter chapter title...\"\n                    {...form.register(\"title\")}\n                  />\n                  {form.formState.errors.title && (\n                    <p className=\"text-sm text-destructive\">\n                      {form.formState.errors.title.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              {/* Premium Settings */}\n              <div className=\"space-y-4 p-4 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"isPremium\">Premium Chapter</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Charge coins to read this chapter\n                    </p>\n                    {!canSetPremium && (\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <AlertTriangle className=\"w-4 h-4 text-warning\" />\n                        <p className=\"text-sm text-warning\">Need 500+ followers for premium chapters</p>\n                      </div>\n                    )}\n                  </div>\n                  <Switch\n                    id=\"isPremium\"\n                    disabled={!canSetPremium}\n                    {...form.register(\"isPremium\")}\n                  />\n                </div>\n                \n                {form.watch(\"isPremium\") && canSetPremium && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"coinPrice\">Coin Price</Label>\n                    <div className=\"flex items-center space-x-2\">\n                      <Input\n                        id=\"coinPrice\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        placeholder=\"0\"\n                        className=\"max-w-32\"\n                        {...form.register(\"coinPrice\", { valueAsNumber: true })}\n                      />\n                      <Coins className=\"w-4 h-4 text-yellow-600\" />\n                      <span className=\"text-sm text-muted-foreground\">coins</span>\n                    </div>\n                    {form.formState.errors.coinPrice && (\n                      <p className=\"text-sm text-destructive\">\n                        {form.formState.errors.coinPrice.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Content Upload */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                {series.type === \"novel\" ? (\n                  <FileText className=\"w-5 h-5\" />\n                ) : (\n                  <ImageIcon className=\"w-5 h-5\" />\n                )}\n                <span>\n                  {series.type === \"novel\" ? \"Chapter Content\" : \"Chapter Pages\"}\n                </span>\n              </CardTitle>\n              <CardDescription>\n                {series.type === \"novel\" \n                  ? \"Write your chapter content using markdown formatting\"\n                  : \"Upload images for your chapter pages in reading order\"\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              \n              {series.type === \"novel\" ? (\n                <div className=\"space-y-2\">\n                  <Textarea\n                    placeholder=\"Write your chapter content here...\"\n                    rows={12}\n                    className=\"font-mono\"\n                    {...form.register(\"content\")}\n                  />\n                  {form.formState.errors.content && (\n                    <p className=\"text-sm text-destructive\">\n                      {form.formState.errors.content.message}\n                    </p>\n                  )}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* File Upload */}\n                  <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-8 text-center\">\n                    <input\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*\"\n                      onChange={handleFileUpload}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                    />\n                    <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                      <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-lg font-medium\">Upload Chapter Pages</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Select multiple images or drag and drop\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Supported: JPG, PNG, WebP (max 10MB each)\n                      </p>\n                    </label>\n                  </div>\n\n                  {/* Uploaded Files */}\n                  {uploadedFiles.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <Label>Uploaded Pages ({uploadedFiles.length})</Label>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                        {uploadedFiles.map((file, index) => (\n                          <div key={index} className=\"relative group\">\n                            <div className=\"aspect-[3/4] bg-muted rounded-lg overflow-hidden\">\n                              <img\n                                src={URL.createObjectURL(file)}\n                                alt={`Page ${index + 1}`}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                            <button\n                              type=\"button\"\n                              onClick={() => removeFile(index)}\n                              className=\"absolute -top-2 -right-2 w-6 h-6 bg-destructive text-destructive-foreground rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\"\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </button>\n                            <p className=\"text-xs text-center mt-1 text-muted-foreground\">\n                              Page {index + 1}\n                            </p>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Actions */}\n          <div className=\"flex items-center justify-between\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => navigate(`/creator/series/${seriesId}/manage`)}\n            >\n              Cancel\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\"\n                onClick={() => navigate(`/series/${seriesId}`)}\n              >\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Preview Series\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createChapterMutation.isPending || uploading}\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {createChapterMutation.isPending ? \"Creating...\" : \"Create Chapter\"}\n              </Button>\n            </div>\n          </div>\n\n          {/* Upload Progress */}\n          {uploading && (\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Upload className=\"w-5 h-5 text-primary animate-pulse\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">Creating chapter...</p>\n                    <Progress value={66} className=\"h-2 mt-1\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </form>\n\n      </main>\n      <MobileNav />\n    </div>\n  );\n}","size_bytes":17014},"client/src/pages/creator/series-manage.tsx":{"content":"import React, { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  ArrowLeft, \n  Plus, \n  Edit, \n  Trash2, \n  Eye, \n  Calendar, \n  BookOpen, \n  Users, \n  DollarSign,\n  Upload,\n  Save,\n  Settings,\n  Heart,\n  MessageCircle,\n  Star,\n  GripVertical,\n  MoreVertical,\n  Copy,\n  Archive,\n  TrendingUp,\n  BarChart3\n} from \"lucide-react\";\nimport type { Series, Chapter } from \"@shared/schema\";\n\nexport default function SeriesManage() {\n  const { seriesId } = useParams<{ seriesId: string }>();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [chapterOrder, setChapterOrder] = useState<Chapter[]>([]);\n  const [isEditingMetadata, setIsEditingMetadata] = useState(false);\n  const [metadataForm, setMetadataForm] = useState({\n    title: \"\",\n    description: \"\",\n    status: \"\",\n    genres: [] as string[],\n    tags: [] as string[]\n  });\n\n  // Fetch series data\n  const { data: series, isLoading: seriesLoading } = useQuery<Series & { author: any }>({\n    queryKey: [`/api/series/${seriesId}`],\n    enabled: !!seriesId,\n  });\n\n  // Fetch chapters\n  const { data: chapters = [], isLoading: chaptersLoading } = useQuery<Chapter[]>({\n    queryKey: [`/api/series/${seriesId}/chapters`],\n    enabled: !!seriesId,\n  });\n\n  // Update chapter order when chapters data changes\n  React.useEffect(() => {\n    if (chapters && chapters.length > 0) {\n      setChapterOrder(chapters);\n    }\n  }, [chapters]);\n\n  // Initialize metadata form when series loads\n  if (series && !isEditingMetadata && metadataForm.title === \"\") {\n    setMetadataForm({\n      title: series.title || \"\",\n      description: series.description || \"\",\n      status: series.status || \"\",\n      genres: series.genres || [],\n      tags: series.tags || []\n    });\n  }\n\n  // Series update mutation\n  const updateSeriesMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await fetch(`/api/series/${seriesId}`, {\n        method: \"PATCH\",\n        body: data,\n      });\n      if (!response.ok) throw new Error('Failed to update series');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/series/${seriesId}`] });\n      toast({\n        title: \"Success\",\n        description: \"Series updated successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update series\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete chapter mutation\n  const deleteChapterMutation = useMutation({\n    mutationFn: async (chapterId: string) => {\n      const response = await fetch(`/api/chapters/${chapterId}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) throw new Error('Failed to delete chapter');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/series/${seriesId}/chapters`] });\n      toast({\n        title: \"Success\",\n        description: \"Chapter deleted successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete chapter\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Drag and drop handlers\n  const handleDragEnd = async (result: any) => {\n    if (!result.destination) return;\n\n    const items = Array.from(chapterOrder);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    setChapterOrder(items);\n\n    // Update chapter order in backend\n    try {\n      await apiRequest(\"POST\", `/api/series/${seriesId}/reorder-chapters`, {\n        chapterIds: items.map(chapter => chapter.id)\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/series/${seriesId}/chapters`] });\n      toast({\n        title: \"Chapters reordered\",\n        description: \"Chapter order updated successfully!\",\n      });\n    } catch (error) {\n      // Revert on error\n      setChapterOrder(chapters);\n      toast({\n        title: \"Error\",\n        description: \"Failed to reorder chapters\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  if (seriesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"animate-fade-in space-y-6\">\n            <Skeleton className=\"h-8 w-64\" />\n            <Skeleton className=\"h-32 w-full\" />\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Skeleton className=\"h-48\" />\n              <Skeleton className=\"h-48\" />\n              <Skeleton className=\"h-48\" />\n            </div>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  if (!series) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Series Not Found</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              The series you're trying to manage doesn't exist or you don't have permission to edit it.\n            </p>\n            <Button onClick={() => navigate(\"/creator/dashboard\")}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Modern Header Section */}\n      <div className=\"bg-gradient-to-r from-primary/10 to-accent/10 border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <Button variant=\"ghost\" onClick={() => navigate(\"/creator/dashboard\")} className=\"mb-2\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Dashboard\n              </Button>\n              <div>\n                <div className=\"flex items-center space-x-3 mb-2\">\n                  <h1 className=\"text-4xl font-bold text-foreground\">{series.title}</h1>\n                  <Badge className={`capitalize ${series.status === 'ongoing' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}`}>\n                    {series.status}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n                  <span className=\"flex items-center space-x-1\">\n                    <BookOpen className=\"w-4 h-4\" />\n                    <span>{chapters.length} chapters</span>\n                  </span>\n                  <span className=\"flex items-center space-x-1\">\n                    <Eye className=\"w-4 h-4\" />\n                    <span>{series.viewCount?.toLocaleString() || 0} views</span>\n                  </span>\n                  <span className=\"flex items-center space-x-1\">\n                    <Users className=\"w-4 h-4\" />\n                    <span>{series.bookmarkCount || 0} followers</span>\n                  </span>\n                  <span className=\"flex items-center space-x-1\">\n                    <Star className=\"w-4 h-4\" />\n                    <span>{series.rating || 0}/5 rating</span>\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"outline\" onClick={() => navigate(`/series/${seriesId}`)}>\n                <Eye className=\"w-4 h-4 mr-2\" />\n                View Public\n              </Button>\n              <Button onClick={() => navigate(`/creator/series/${seriesId}/create-chapter`)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Chapter\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mobile-nav-spacing\">\n        {/* Modern Tab Navigation */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-8\">\n          <div className=\"border-b\">\n            <TabsList className=\"grid w-full grid-cols-4 bg-transparent border-none\">\n              <TabsTrigger \n                value=\"overview\" \n                className=\"data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none\"\n              >\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Overview\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"chapters\"\n                className=\"data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none\"\n              >\n                <BookOpen className=\"w-4 h-4 mr-2\" />\n                Chapters ({chapterOrder.length})\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"analytics\"\n                className=\"data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none\"\n              >\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Analytics\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"settings\"\n                className=\"data-[state=active]:bg-transparent data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none\"\n              >\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Settings\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              \n              {/* Stats Cards */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Views</CardTitle>\n                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{series.viewCount?.toLocaleString() || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">All time views</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Followers</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{series.bookmarkCount?.toLocaleString() || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">Users following</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Chapters</CardTitle>\n                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{chapters.length}</div>\n                  <p className=\"text-xs text-muted-foreground\">Published chapters</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Series Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Series Information</CardTitle>\n                <CardDescription>Basic details about your series</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Type</Label>\n                    <Badge className=\"w-fit\">\n                      {series.type ? series.type.charAt(0).toUpperCase() + series.type.slice(1) : \"Unknown\"}\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Status</Label>\n                    <Badge variant=\"outline\" className=\"w-fit\">\n                      {series.status ? series.status.charAt(0).toUpperCase() + series.status.slice(1) : \"Unknown\"}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Description</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {series.description || \"No description available\"}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Chapters Tab with Drag and Drop */}\n          <TabsContent value=\"chapters\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Chapters</h2>\n                <p className=\"text-sm text-muted-foreground\">Drag chapters to reorder them</p>\n              </div>\n              <Button onClick={() => navigate(`/creator/series/${seriesId}/create-chapter`)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add New Chapter\n              </Button>\n            </div>\n\n            {chaptersLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 3 }).map((_, index) => (\n                  <Skeleton key={index} className=\"h-20 w-full\" />\n                ))}\n              </div>\n            ) : chapterOrder.length > 0 ? (\n              <DragDropContext onDragEnd={handleDragEnd}>\n                <Droppable droppableId=\"chapters\">\n                  {(provided, snapshot) => (\n                    <div\n                      {...provided.droppableProps}\n                      ref={provided.innerRef}\n                      className={`space-y-4 transition-colors ${\n                        snapshot.isDraggingOver ? 'bg-accent/10 rounded-lg p-4' : ''\n                      }`}\n                    >\n                      {chapterOrder.map((chapter: Chapter, index: number) => (\n                        <Draggable key={chapter.id} draggableId={chapter.id} index={index}>\n                          {(provided, snapshot) => (\n                            <Card\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              className={`transition-all ${\n                                snapshot.isDragging \n                                  ? 'shadow-lg rotate-1 scale-105' \n                                  : 'hover:shadow-md'\n                              }`}\n                            >\n                              <CardContent className=\"p-6\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center space-x-4\">\n                                    <div \n                                      {...provided.dragHandleProps}\n                                      className=\"cursor-grab active:cursor-grabbing\"\n                                    >\n                                      <GripVertical className=\"w-5 h-5 text-muted-foreground hover:text-foreground\" />\n                                    </div>\n                                    \n                                    {/* Chapter Preview Image */}\n                                    <div className=\"w-16 h-20 bg-muted rounded-md overflow-hidden flex-shrink-0\">\n                                      {chapter.previewImage || (chapter.images && chapter.images.length > 0) ? (\n                                        <img \n                                          src={chapter.previewImage || chapter.images?.[0]} \n                                          alt={`Chapter ${chapter.chapterNumber} preview`}\n                                          className=\"w-full h-full object-cover\"\n                                        />\n                                      ) : (\n                                        <div className=\"w-full h-full flex items-center justify-center\">\n                                          <BookOpen className=\"w-6 h-6 text-muted-foreground\" />\n                                        </div>\n                                      )}\n                                    </div>\n                                    \n                                    <div>\n                                      <div className=\"flex items-center space-x-2 mb-1\">\n                                        <span className=\"text-sm font-medium text-primary\">#{chapter.chapterNumber}</span>\n                                        <h3 className=\"font-semibold\">{chapter.title}</h3>\n                                        {chapter.status === 'premium' && (\n                                          <Badge variant=\"outline\" className=\"text-xs\">\n                                            Premium\n                                          </Badge>\n                                        )}\n                                      </div>\n                                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                        <span className=\"flex items-center space-x-1\">\n                                          <Eye className=\"w-4 h-4\" />\n                                          <span>{chapter.viewCount?.toLocaleString() || 0}</span>\n                                        </span>\n                                        <span className=\"flex items-center space-x-1\">\n                                          <Heart className=\"w-4 h-4\" />\n                                          <span>{chapter.likeCount || 0}</span>\n                                        </span>\n                                        <span className=\"flex items-center space-x-1\">\n                                          <MessageCircle className=\"w-4 h-4\" />\n                                          <span>0</span>\n                                        </span>\n                                        {chapter.coinPrice && chapter.coinPrice > 0 && (\n                                          <span className=\"flex items-center space-x-1\">\n                                            <DollarSign className=\"w-4 h-4\" />\n                                            <span>{chapter.coinPrice}</span>\n                                          </span>\n                                        )}\n                                        <span className=\"flex items-center space-x-1\">\n                                          <Calendar className=\"w-4 h-4\" />\n                                          <span>{formatDate(chapter.createdAt!)}</span>\n                                        </span>\n                                      </div>\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"flex items-center space-x-2\">\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => navigate(`/reader/${seriesId}/${chapter.id}`)}\n                                    >\n                                      <Eye className=\"w-4 h-4\" />\n                                    </Button>\n                                    <Button variant=\"ghost\" size=\"sm\">\n                                      <Edit className=\"w-4 h-4\" />\n                                    </Button>\n                                    <Dialog>\n                                      <DialogTrigger asChild>\n                                        <Button variant=\"ghost\" size=\"sm\">\n                                          <MoreVertical className=\"w-4 h-4\" />\n                                        </Button>\n                                      </DialogTrigger>\n                                      <DialogContent>\n                                        <DialogHeader>\n                                          <DialogTitle>Chapter Actions</DialogTitle>\n                                        </DialogHeader>\n                                        <div className=\"grid gap-2\">\n                                          <Button variant=\"outline\" className=\"justify-start\">\n                                            <Copy className=\"w-4 h-4 mr-2\" />\n                                            Duplicate Chapter\n                                          </Button>\n                                          <Button variant=\"outline\" className=\"justify-start\">\n                                            <Archive className=\"w-4 h-4 mr-2\" />\n                                            Archive Chapter\n                                          </Button>\n                                          <Button \n                                            variant=\"destructive\" \n                                            className=\"justify-start\"\n                                            onClick={() => deleteChapterMutation.mutate(chapter.id)}\n                                            disabled={deleteChapterMutation.isPending}\n                                          >\n                                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                                            Delete Chapter\n                                          </Button>\n                                        </div>\n                                      </DialogContent>\n                                    </Dialog>\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </DragDropContext>\n            ) : (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No chapters yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">Start building your series by creating your first chapter.</p>\n                  <Button onClick={() => navigate(`/creator/series/${seriesId}/create-chapter`)}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create First Chapter\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Analytics Coming Soon</CardTitle>\n                <CardDescription>Detailed analytics and insights for your series</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-12 text-center\">\n                <div className=\"text-muted-foreground\">\n                  <p>Advanced analytics features are currently under development.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Series Settings</CardTitle>\n                <CardDescription>Update your series information and settings</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-muted-foreground\">\n                  <p>Series editing features are currently under development.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n      </main>\n      <MobileNav />\n    </div>\n  );\n}","size_bytes":25702},"client/src/pages/creator/upload.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Upload,\n  Image as ImageIcon,\n  FileText,\n  BookOpen,\n  ScrollText,\n  PenTool,\n  X,\n  Plus,\n  Eye,\n  Save,\n  ArrowLeft,\n  AlertCircle,\n} from \"lucide-react\";\n\ntype ContentType = 'webtoon' | 'manga' | 'novel';\n\ninterface SeriesFormData {\n  title: string;\n  description: string;\n  type: ContentType;\n  genres: string[];\n  tags: string[];\n  isNSFW: boolean;\n  coverImage?: File;\n}\n\ninterface ChapterFormData {\n  title: string;\n  chapterNumber: number;\n  content: File[] | string;\n  status: 'free' | 'premium';\n  coinPrice: number;\n}\n\nconst GENRES = [\n  'Action', 'Adventure', 'Comedy', 'Drama', 'Fantasy', 'Horror',\n  'Mystery', 'Romance', 'Sci-Fi', 'Slice of Life', 'Thriller', 'Supernatural'\n];\n\nexport default function CreatorUpload() {\n  const [, navigate] = useLocation();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<'series' | 'chapter'>('series');\n  const [contentType, setContentType] = useState<ContentType>('webtoon');\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  // Series form state\n  const [seriesData, setSeriesData] = useState<SeriesFormData>({\n    title: '',\n    description: '',\n    type: 'webtoon',\n    genres: [],\n    tags: [],\n    isNSFW: false,\n  });\n\n  // Chapter form state\n  const [chapterData, setChapterData] = useState<ChapterFormData>({\n    title: '',\n    chapterNumber: 1,\n    content: [],\n    status: 'free',\n    coinPrice: 0,\n  });\n\n  const [dragActive, setDragActive] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const [textContent, setTextContent] = useState('');\n  const [newTag, setNewTag] = useState('');\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || !user)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You need to log in to upload content.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [authLoading, isAuthenticated, user, toast]);\n\n  // Check URL params for content type\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const typeParam = urlParams.get('type') as ContentType;\n    if (typeParam && ['webtoon', 'manga', 'novel'].includes(typeParam)) {\n      setContentType(typeParam);\n      setSeriesData(prev => ({ ...prev, type: typeParam }));\n    }\n  }, []);\n\n  // Series creation mutation\n  const createSeriesMutation = useMutation({\n    mutationFn: async () => {\n      const formData = new FormData();\n      formData.append('title', seriesData.title);\n      formData.append('description', seriesData.description);\n      formData.append('type', seriesData.type);\n      formData.append('genres', JSON.stringify(seriesData.genres));\n      formData.append('tags', JSON.stringify(seriesData.tags));\n      formData.append('isNSFW', seriesData.isNSFW.toString());\n      \n      if (seriesData.coverImage) {\n        formData.append('coverImage', seriesData.coverImage);\n      }\n\n      const response = await fetch('/api/series', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`${response.status}: ${errorText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: (newSeries) => {\n      toast({\n        title: \"Series created successfully!\",\n        description: \"You can now add chapters to your series.\",\n      });\n      navigate(`/series/${newSeries.id}`);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error creating series\",\n        description: error.message || \"Failed to create series. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const files = Array.from(e.dataTransfer.files);\n      if (activeTab === 'series') {\n        // Cover image upload\n        if (files[0] && files[0].type.startsWith('image/')) {\n          setSeriesData(prev => ({ ...prev, coverImage: files[0] }));\n        }\n      } else {\n        // Chapter content upload\n        if (contentType === 'novel') {\n          // For novels, don't accept file drops\n          return;\n        }\n        const imageFiles = files.filter(file => file.type.startsWith('image/'));\n        setUploadedFiles(prev => [...prev, ...imageFiles]);\n      }\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const files = Array.from(e.target.files);\n      if (activeTab === 'series') {\n        if (files[0] && files[0].type.startsWith('image/')) {\n          setSeriesData(prev => ({ ...prev, coverImage: files[0] }));\n        }\n      } else {\n        const imageFiles = files.filter(file => file.type.startsWith('image/'));\n        setUploadedFiles(prev => [...prev, ...imageFiles]);\n      }\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const addGenre = (genre: string) => {\n    if (!seriesData.genres.includes(genre)) {\n      setSeriesData(prev => ({\n        ...prev,\n        genres: [...prev.genres, genre]\n      }));\n    }\n  };\n\n  const removeGenre = (genre: string) => {\n    setSeriesData(prev => ({\n      ...prev,\n      genres: prev.genres.filter(g => g !== genre)\n    }));\n  };\n\n  const addTag = () => {\n    if (newTag.trim() && !seriesData.tags.includes(newTag.trim())) {\n      setSeriesData(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTag.trim()]\n      }));\n      setNewTag('');\n    }\n  };\n\n  const removeTag = (tag: string) => {\n    setSeriesData(prev => ({\n      ...prev,\n      tags: prev.tags.filter(t => t !== tag)\n    }));\n  };\n\n  const handleSubmitSeries = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!seriesData.title.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a title for your series.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!seriesData.description.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a description for your series.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!seriesData.coverImage) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please upload a cover image for your series.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createSeriesMutation.mutate();\n  };\n\n  const getContentTypeInfo = (type: ContentType) => {\n    switch (type) {\n      case 'webtoon':\n        return {\n          icon: ScrollText,\n          title: 'Webtoon',\n          description: 'Vertical scrolling format with continuous panels',\n          color: 'bg-accent text-accent-foreground',\n        };\n      case 'manga':\n        return {\n          icon: BookOpen,\n          title: 'Manga',\n          description: 'Traditional page-by-page reading format',\n          color: 'bg-secondary text-secondary-foreground',\n        };\n      case 'novel':\n        return {\n          icon: PenTool,\n          title: 'Novel',\n          description: 'Text-based storytelling with rich formatting',\n          color: 'bg-primary text-primary-foreground',\n        };\n    }\n  };\n\n  if (authLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"h-64 bg-muted rounded\"></div>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  if (!user.isCreator) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"text-center py-12\">\n            <AlertCircle className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Creator Access Required</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              You need to be a creator to upload content. Contact support to become a creator.\n            </p>\n            <Button onClick={() => navigate(\"/\")}>\n              Back to Home\n            </Button>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  const typeInfo = getContentTypeInfo(contentType);\n  const TypeIcon = typeInfo.icon;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n        <div className=\"animate-fade-in space-y-8\">\n          \n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Button \n                variant=\"ghost\" \n                onClick={() => navigate(\"/creator/dashboard\")}\n                className=\"mb-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n              <h1 className=\"text-3xl font-bold text-foreground\">Create New Content</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Share your stories with the world\n              </p>\n            </div>\n          </div>\n\n          {/* Content Type Selector */}\n          <Card className=\"glassmorphism\">\n            <CardHeader>\n              <CardTitle>Content Type</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                {(['webtoon', 'manga', 'novel'] as ContentType[]).map((type) => {\n                  const info = getContentTypeInfo(type);\n                  const Icon = info.icon;\n                  return (\n                    <button\n                      key={type}\n                      onClick={() => {\n                        setContentType(type);\n                        setSeriesData(prev => ({ ...prev, type }));\n                      }}\n                      className={`p-4 rounded-xl border-2 transition-all hover:scale-105 ${\n                        contentType === type\n                          ? 'border-primary bg-primary/10'\n                          : 'border-border hover:border-primary/50'\n                      }`}\n                    >\n                      <Icon className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\n                      <h3 className=\"font-semibold\">{info.title}</h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {info.description}\n                      </p>\n                    </button>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Main Form */}\n          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'series' | 'chapter')}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"series\">Series Information</TabsTrigger>\n              <TabsTrigger value=\"chapter\">Chapter Upload</TabsTrigger>\n            </TabsList>\n\n            {/* Series Information Tab */}\n            <TabsContent value=\"series\" className=\"space-y-6\">\n              <form onSubmit={handleSubmitSeries} className=\"space-y-6\">\n                <Card className=\"glassmorphism\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <TypeIcon className=\"w-5 h-5\" />\n                      <span>Series Details</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    \n                    {/* Cover Image Upload */}\n                    <div>\n                      <Label>Cover Image</Label>\n                      <div\n                        className={`mt-2 border-2 border-dashed rounded-xl p-8 text-center transition-colors ${\n                          dragActive \n                            ? 'border-primary bg-primary/10' \n                            : 'border-border hover:border-primary/50'\n                        }`}\n                        onDragEnter={handleDrag}\n                        onDragLeave={handleDrag}\n                        onDragOver={handleDrag}\n                        onDrop={handleDrop}\n                      >\n                        {seriesData.coverImage ? (\n                          <div className=\"space-y-4\">\n                            <img\n                              src={URL.createObjectURL(seriesData.coverImage)}\n                              alt=\"Cover preview\"\n                              className=\"w-32 h-40 object-cover rounded-lg mx-auto\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={() => setSeriesData(prev => ({ ...prev, coverImage: undefined }))}\n                            >\n                              Remove Image\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"space-y-4\">\n                            <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto\" />\n                            <div>\n                              <p className=\"text-foreground font-medium\">\n                                Drop your cover image here, or{\" \"}\n                                <label className=\"text-primary cursor-pointer hover:underline\">\n                                  browse\n                                  <input\n                                    type=\"file\"\n                                    accept=\"image/*\"\n                                    onChange={handleFileSelect}\n                                    className=\"hidden\"\n                                  />\n                                </label>\n                              </p>\n                              <p className=\"text-sm text-muted-foreground mt-1\">\n                                Recommended size: 600x800px\n                              </p>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Title */}\n                    <div>\n                      <Label htmlFor=\"title\">Title *</Label>\n                      <Input\n                        id=\"title\"\n                        value={seriesData.title}\n                        onChange={(e) => setSeriesData(prev => ({ ...prev, title: e.target.value }))}\n                        placeholder=\"Enter your series title\"\n                        className=\"mt-2\"\n                        required\n                      />\n                    </div>\n\n                    {/* Description */}\n                    <div>\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea\n                        id=\"description\"\n                        value={seriesData.description}\n                        onChange={(e) => setSeriesData(prev => ({ ...prev, description: e.target.value }))}\n                        placeholder=\"Describe your series...\"\n                        rows={4}\n                        className=\"mt-2\"\n                      />\n                    </div>\n\n                    {/* Genres */}\n                    <div>\n                      <Label>Genres</Label>\n                      <div className=\"mt-2 space-y-3\">\n                        <div className=\"flex flex-wrap gap-2\">\n                          {GENRES.map((genre) => (\n                            <button\n                              key={genre}\n                              type=\"button\"\n                              onClick={() => addGenre(genre)}\n                              disabled={seriesData.genres.includes(genre)}\n                              className={`px-3 py-1 rounded-full text-sm transition-colors ${\n                                seriesData.genres.includes(genre)\n                                  ? 'bg-primary text-primary-foreground'\n                                  : 'bg-muted text-muted-foreground hover:bg-primary/20'\n                              }`}\n                            >\n                              {genre}\n                            </button>\n                          ))}\n                        </div>\n                        \n                        {seriesData.genres.length > 0 && (\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm font-medium\">Selected Genres:</p>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {seriesData.genres.map((genre) => (\n                                <Badge key={genre} className=\"flex items-center space-x-1\">\n                                  <span>{genre}</span>\n                                  <button\n                                    type=\"button\"\n                                    onClick={() => removeGenre(genre)}\n                                    className=\"hover:bg-white/20 rounded-full p-0.5\"\n                                  >\n                                    <X className=\"w-3 h-3\" />\n                                  </button>\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Tags */}\n                    <div>\n                      <Label>Tags</Label>\n                      <div className=\"mt-2 space-y-3\">\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            value={newTag}\n                            onChange={(e) => setNewTag(e.target.value)}\n                            placeholder=\"Add custom tags...\"\n                            onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n                          />\n                          <Button type=\"button\" onClick={addTag} disabled={!newTag.trim()}>\n                            <Plus className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                        \n                        {seriesData.tags.length > 0 && (\n                          <div className=\"flex flex-wrap gap-2\">\n                            {seriesData.tags.map((tag) => (\n                              <Badge key={tag} variant=\"outline\" className=\"flex items-center space-x-1\">\n                                <span>{tag}</span>\n                                <button\n                                  type=\"button\"\n                                  onClick={() => removeTag(tag)}\n                                  className=\"hover:bg-white/20 rounded-full p-0.5\"\n                                >\n                                  <X className=\"w-3 h-3\" />\n                                </button>\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* NSFW Flag */}\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"nsfw\"\n                        checked={seriesData.isNSFW}\n                        onCheckedChange={(checked) => \n                          setSeriesData(prev => ({ ...prev, isNSFW: !!checked }))\n                        }\n                      />\n                      <Label htmlFor=\"nsfw\" className=\"text-sm\">\n                        This series contains mature content (18+)\n                      </Label>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button variant=\"outline\" type=\"button\" onClick={() => navigate(\"/creator/dashboard\")}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createSeriesMutation.isPending || !seriesData.title.trim()}\n                  >\n                    {createSeriesMutation.isPending ? (\n                      <>\n                        <Upload className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Creating...\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Create Series\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </TabsContent>\n\n            {/* Chapter Upload Tab */}\n            <TabsContent value=\"chapter\" className=\"space-y-6\">\n              <Card className=\"glassmorphism\">\n                <CardHeader>\n                  <CardTitle>Chapter Upload</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">\n                      Create a series first to upload chapters.\n                    </p>\n                    <Button \n                      className=\"mt-4\"\n                      onClick={() => setActiveTab('series')}\n                    >\n                      Create Series First\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":23875},"client/src/pages/series/[id].tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport MobileNav from \"@/components/layout/mobile-nav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport {\n  Star,\n  BookOpen,\n  Eye,\n  Heart,\n  Bookmark,\n  Share2,\n  Play,\n  Users,\n  Calendar,\n  Clock,\n  MessageCircle,\n  ThumbsUp,\n  Flag,\n  ArrowLeft,\n  UserPlus,\n  Copy,\n  ExternalLink,\n} from \"lucide-react\";\nimport type { Series, Chapter, Review, Comment, User } from \"@shared/schema\";\n\nexport default function SeriesDetail() {\n  const { id } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Validate series ID\n  if (!id || id === '[object Object]') {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Invalid Series ID</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              The series identifier is invalid. Please check the URL.\n            </p>\n            <Button onClick={() => navigate(\"/\")}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n  const [reviewText, setReviewText] = useState(\"\");\n  const [reviewRating, setReviewRating] = useState(5);\n  const [showShareModal, setShowShareModal] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const [isBookmarked, setIsBookmarked] = useState(false);\n  const [isFollowing, setIsFollowing] = useState(false);\n\n  // Series can be viewed without authentication, but some features require auth\n  // No redirect needed since API uses optionalAuth\n\n  // Fetch series data (includes author information) - works without auth\n  const { data: series, isLoading: seriesLoading, error: seriesError } = useQuery<Series & { author: User }>({\n    queryKey: [`/api/series/${id}`],\n    enabled: !!id,\n    retry: 2,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Author data is included with series data, no separate fetch needed\n\n  // Fetch chapters for this specific series - works without auth\n  const { data: chapters = [], isLoading: chaptersLoading, error: chaptersError } = useQuery<Chapter[]>({\n    queryKey: [`/api/series/${id}/chapters`],\n    enabled: !!id,\n    retry: 2,\n  });\n\n  // Fetch reviews for this specific series - works without auth\n  const { data: reviews = [], isLoading: reviewsLoading, error: reviewsError } = useQuery<(Review & { user: User })[]>({\n    queryKey: [`/api/series/${id}/reviews`],\n    enabled: !!id,\n    retry: 2,\n  });\n\n  // Fetch reading progress - requires auth\n  const { data: readingProgress, error: progressError } = useQuery({\n    queryKey: [`/api/reading-progress/${id}`],\n    enabled: !!id && isAuthenticated === true,\n    retry: 1,\n  });\n\n  // Bookmark mutation\n  const bookmarkMutation = useMutation({\n    mutationFn: async () => {\n      if (isBookmarked) {\n        await apiRequest(\"DELETE\", `/api/bookmarks/${id}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/bookmarks\", { seriesId: id });\n      }\n    },\n    onSuccess: () => {\n      setIsBookmarked(!isBookmarked);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/bookmarks\"] });\n      toast({\n        title: isBookmarked ? \"Removed from library\" : \"Added to library\",\n        description: isBookmarked ? \"Series removed from your library\" : \"Series added to your library\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update bookmark\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Follow mutation\n  const followMutation = useMutation({\n    mutationFn: async () => {\n      if (isFollowing) {\n        await apiRequest(\"DELETE\", \"/api/follow\", { \n          targetId: id, \n          targetType: \"series\" \n        });\n      } else {\n        await apiRequest(\"POST\", \"/api/follow\", { \n          targetId: id, \n          targetType: \"series\" \n        });\n      }\n    },\n    onSuccess: () => {\n      setIsFollowing(!isFollowing);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/followed-series\"] });\n      toast({\n        title: isFollowing ? \"Unfollowed\" : \"Following\",\n        description: isFollowing ? \"You unfollowed this series\" : \"You're now following this series\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update follow status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Review mutation - requires authentication\n  const reviewMutation = useMutation({\n    mutationFn: async () => {\n      if (!isAuthenticated) {\n        throw new Error(\"Authentication required\");\n      }\n      await apiRequest(\"POST\", `/api/series/${id}/reviews`, {\n        rating: reviewRating,\n        content: reviewText,\n      });\n    },\n    onSuccess: () => {\n      setReviewText(\"\");\n      setReviewRating(5);\n      queryClient.invalidateQueries({ queryKey: [`/api/series/${id}/reviews`] });\n      toast({\n        title: \"Review submitted\",\n        description: \"Thank you for your review!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error) || error.message === \"Authentication required\") {\n        toast({\n          title: \"Login Required\",\n          description: \"Please log in to submit a review.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 1500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit review\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Share functionality with various platforms\n  const shareUrl = window.location.origin + `/series/${id}`;\n  const shareText = series ? `Check out \"${series.title}\" by @${series.author?.username || 'Unknown Author'}` : `Check out this series`;\n\n  const handleShare = async (platform?: string) => {\n    if (platform === 'copy' || !platform) {\n      try {\n        await navigator.clipboard.writeText(shareUrl);\n        toast({\n          title: \"Link copied!\",\n          description: \"Series link has been copied to your clipboard.\",\n        });\n        setShowShareModal(false);\n      } catch (err) {\n        console.error('Failed to copy:', err);\n      }\n    } else if (platform === 'twitter') {\n      window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`, '_blank');\n    } else if (platform === 'reddit') {\n      window.open(`https://reddit.com/submit?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(shareText)}`, '_blank');\n    } else if (platform === 'discord') {\n      // Discord doesn't have a direct share URL, so copy the formatted message\n      const discordText = `${shareText} ${shareUrl}`;\n      try {\n        await navigator.clipboard.writeText(discordText);\n        toast({\n          title: \"Discord message copied!\",\n          description: \"Paste this in Discord to share the series.\",\n        });\n        setShowShareModal(false);\n      } catch (err) {\n        console.error('Failed to copy:', err);\n      }\n    } else if (platform === 'native' && navigator.share) {\n      try {\n        await navigator.share({\n          title: series?.title || 'Series',\n          text: shareText,\n          url: shareUrl,\n        });\n        setShowShareModal(false);\n      } catch (err) {\n        console.error('Failed to share:', err);\n      }\n    }\n  };\n\n  const handleStartReading = () => {\n    if (chapters.length > 0) {\n      let targetChapter = chapters[0];\n      \n      // If there's reading progress, continue from that chapter\n      if (readingProgress?.chapterId) {\n        const progressChapter = chapters.find(c => c.id === readingProgress.chapterId);\n        if (progressChapter) {\n          targetChapter = progressChapter;\n        }\n      }\n      \n      navigate(`/reader/${id}/${targetChapter.id}`);\n    }\n  };\n\n  const handleChapterClick = (chapterId: string) => {\n    navigate(`/reader/${id}/${chapterId}`);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'webtoon':\n        return 'bg-accent text-accent-foreground';\n      case 'manga':\n        return 'bg-secondary text-secondary-foreground';\n      case 'novel':\n        return 'bg-primary text-primary-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  // Handle loading states and errors\n  if (seriesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"animate-fade-in space-y-6\">\n            <Skeleton className=\"h-8 w-32\" />\n            <div className=\"grid md:grid-cols-3 gap-8\">\n              <div className=\"md:col-span-1\">\n                <Skeleton className=\"aspect-3-4 w-full rounded-xl\" />\n              </div>\n              <div className=\"md:col-span-2 space-y-4\">\n                <Skeleton className=\"h-8 w-3/4\" />\n                <Skeleton className=\"h-4 w-1/2\" />\n                <Skeleton className=\"h-20 w-full\" />\n                <div className=\"flex space-x-2\">\n                  <Skeleton className=\"h-10 w-24\" />\n                  <Skeleton className=\"h-10 w-24\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  // Handle error states\n  if (seriesError) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Error Loading Series</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              There was an error loading this series. Please try again.\n            </p>\n            <div className=\"space-x-4\">\n              <Button onClick={() => window.location.reload()}>\n                Try Again\n              </Button>\n              <Button variant=\"outline\" onClick={() => navigate(\"/\")}>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Home\n              </Button>\n            </div>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  if (!series) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Series Not Found</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              The series you're looking for doesn't exist or may have been removed.\n            </p>\n            <Button onClick={() => navigate(\"/\")}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </div>\n        </main>\n        <MobileNav />\n      </div>\n    );\n  }\n\n  const progressPercentage = readingProgress?.progress || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 mobile-nav-spacing\">\n        <div className=\"animate-fade-in\">\n          {/* Back Button */}\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/\")}\n            className=\"mb-6\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Button>\n\n          {/* Series Header */}\n          <div className=\"grid md:grid-cols-3 gap-8 mb-8\">\n            <div className=\"md:col-span-1\">\n              <div className=\"relative aspect-3-4 rounded-xl overflow-hidden bg-muted\">\n                {series.coverImageUrl ? (\n                  <img\n                    src={series.coverImageUrl}\n                    alt={`${series.title} cover`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full bg-gradient-to-br from-muted to-muted-foreground/20 flex items-center justify-center\">\n                    <BookOpen className=\"w-16 h-16 text-muted-foreground\" />\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"md:col-span-2 space-y-6\">\n              <div>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Badge className={getTypeColor(series.type || '')}>\n                    {series.type ? series.type.charAt(0).toUpperCase() + series.type.slice(1) : \"Unknown\"}\n                  </Badge>\n                  <Badge variant=\"outline\">\n                    {series.status ? series.status.charAt(0).toUpperCase() + series.status.slice(1) : \"Unknown\"}\n                  </Badge>\n                </div>\n                \n                <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2\">\n                  {series.title}\n                </h1>\n                \n                <p className=\"text-muted-foreground mb-4\">\n                  by{\" \"}\n                  <button\n                    onClick={() => navigate(`/user/${series.author?.username || series.authorId}`)}\n                    className=\"text-primary hover:text-primary/80 font-medium hover:underline\"\n                  >\n                    @{series.author?.username || \"Unknown Author\"}\n                  </button>\n                </p>\n                \n                <p className=\"text-foreground leading-relaxed\">\n                  {series.description || \"No description available for this series.\"}\n                </p>\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center space-x-1 mb-1\">\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    <span className=\"font-semibold\">{series.rating}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Rating</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center space-x-1 mb-1\">\n                    <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-semibold\">{series.viewCount?.toLocaleString()}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Views</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center space-x-1 mb-1\">\n                    <BookOpen className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-semibold\">{series.chapterCount}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Chapters</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center space-x-1 mb-1\">\n                    <UserPlus className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-semibold\">{series.bookmarkCount}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Follows</p>\n                </div>\n              </div>\n\n              {/* Reading Progress */}\n              {progressPercentage > 0 && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Reading Progress</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {Math.round(progressPercentage)}% completed\n                    </span>\n                  </div>\n                  <Progress value={progressPercentage} className=\"h-2\" />\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-wrap gap-3\">\n                <Button size=\"lg\" onClick={handleStartReading}>\n                  <Play className=\"w-5 h-5 mr-2\" />\n                  {progressPercentage > 0 ? 'Continue Reading' : 'Start Reading'}\n                </Button>\n                \n                {isAuthenticated ? (\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\"\n                    onClick={() => bookmarkMutation.mutate()}\n                    disabled={bookmarkMutation.isPending}\n                  >\n                    <Bookmark className=\"w-5 h-5 mr-2\" />\n                    {bookmarkMutation.isPending ? 'Updating...' : (isBookmarked ? 'Remove from Library' : 'Add to Library')}\n                  </Button>\n                ) : (\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\"\n                    onClick={() => window.location.href = \"/api/login\"}\n                  >\n                    <Bookmark className=\"w-5 h-5 mr-2\" />\n                    Login to Bookmark\n                  </Button>\n                )}\n                \n                {isAuthenticated ? (\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\"\n                    onClick={() => followMutation.mutate()}\n                    disabled={followMutation.isPending}\n                  >\n                    <UserPlus className=\"w-5 h-5 mr-2\" />\n                    {followMutation.isPending ? 'Updating...' : (isFollowing ? 'Unfollow' : 'Follow')}\n                  </Button>\n                ) : (\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\"\n                    onClick={() => window.location.href = \"/api/login\"}\n                  >\n                    <UserPlus className=\"w-5 h-5 mr-2\" />\n                    Login to Follow\n                  </Button>\n                )}\n                \n                <Button variant=\"outline\" size=\"lg\" onClick={() => setShowShareModal(true)}>\n                  <Share2 className=\"w-5 h-5 mr-2\" />\n                  Share\n                </Button>\n              </div>\n\n              {/* Genres and Tags */}\n              {(series.genres?.length || series.tags?.length) && (\n                <div className=\"space-y-3\">\n                  {series.genres?.length && (\n                    <div>\n                      <h3 className=\"text-sm font-medium mb-2\">Genres</h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {series.genres.map((genre) => (\n                          <Badge key={genre} variant=\"secondary\">\n                            {genre}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {series.tags?.length && (\n                    <div>\n                      <h3 className=\"text-sm font-medium mb-2\">Tags</h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {series.tags.map((tag) => (\n                          <Badge key={tag} variant=\"outline\">\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Content Tabs */}\n          <Tabs defaultValue=\"chapters\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"chapters\">\n                Chapters ({chapters.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"reviews\">\n                Reviews ({reviews.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"comments\">\n                Comments\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Chapters Tab */}\n            <TabsContent value=\"chapters\" className=\"space-y-4\">\n              {chaptersLoading ? (\n                <div className=\"space-y-3\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : chapters.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {chapters.map((chapter) => (\n                    <Card \n                      key={chapter.id} \n                      className=\"hover:bg-muted/50 transition-colors cursor-pointer\"\n                      onClick={() => handleChapterClick(chapter.id)}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start gap-4\">\n                          {/* Chapter Preview Image */}\n                          <div className=\"flex-shrink-0\">\n                            {chapter.previewImage || (chapter.images && chapter.images.length > 0) ? (\n                              <div className=\"w-16 h-20 bg-muted rounded-md overflow-hidden\">\n                                <img \n                                  src={chapter.previewImage || chapter.images?.[0]} \n                                  alt={`Chapter ${chapter.chapterNumber} preview`}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                              </div>\n                            ) : (\n                              <div className=\"w-16 h-20 bg-muted rounded-md flex items-center justify-center\">\n                                <BookOpen className=\"w-6 h-6 text-muted-foreground\" />\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Chapter Info */}\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"font-medium text-foreground truncate\">\n                              Chapter {chapter.chapterNumber}: {chapter.title}\n                            </h3>\n                            <div className=\"flex items-center flex-wrap gap-x-4 gap-y-1 mt-1 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center space-x-1\">\n                                <Calendar className=\"w-4 h-4\" />\n                                <span>{formatDate(chapter.createdAt!)}</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Eye className=\"w-4 h-4\" />\n                                <span>{chapter.viewCount || 0} views</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Heart className=\"w-4 h-4\" />\n                                <span>{chapter.likeCount || 0} likes</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <MessageCircle className=\"w-4 h-4\" />\n                                <span>0 comments</span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Status and Action */}\n                          <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                            {chapter.status === 'premium' && (\n                              <Badge className=\"bg-warning text-warning-foreground\">\n                                Premium\n                              </Badge>\n                            )}\n                            <Play className=\"w-4 h-4 text-muted-foreground\" />\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No chapters available yet.</p>\n                </div>\n              )}\n            </TabsContent>\n\n            {/* Reviews Tab */}\n            <TabsContent value=\"reviews\" className=\"space-y-6\">\n              {/* Write Review */}\n              <Card className=\"glassmorphism\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Write a Review</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Rating</label>\n                      <div className=\"flex items-center space-x-1\">\n                        {[1, 2, 3, 4, 5].map((star) => (\n                          <button\n                            key={star}\n                            onClick={() => setReviewRating(star)}\n                            className=\"p-1\"\n                          >\n                            <Star \n                              className={`w-6 h-6 ${\n                                star <= reviewRating \n                                  ? 'text-yellow-400 fill-current' \n                                  : 'text-muted-foreground'\n                              }`}\n                            />\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Review</label>\n                      <Textarea\n                        placeholder=\"Share your thoughts about this series...\"\n                        value={reviewText}\n                        onChange={(e) => setReviewText(e.target.value)}\n                        rows={4}\n                      />\n                    </div>\n                    \n                    {isAuthenticated ? (\n                      <Button \n                        onClick={() => reviewMutation.mutate()}\n                        disabled={reviewMutation.isPending || !reviewText.trim()}\n                      >\n                        {reviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={() => window.location.href = \"/api/login\"}\n                        variant=\"outline\"\n                      >\n                        Login to Submit Review\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Reviews List */}\n              {reviewsLoading ? (\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 3 }).map((_, i) => (\n                    <Skeleton key={i} className=\"h-32 w-full\" />\n                  ))}\n                </div>\n              ) : reviews.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {reviews.map((review) => (\n                    <Card key={review.id}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-4\">\n                          <Avatar>\n                            <AvatarImage src={review.user?.profileImageUrl} />\n                            <AvatarFallback>\n                              {review.user?.username ? review.user.username.charAt(0).toUpperCase() : \"?\"}\n                            </AvatarFallback>\n                          </Avatar>\n                          \n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <span className=\"font-medium\">{review.user?.username || \"Anonymous\"}</span>\n                              <div className=\"flex items-center\">\n                                {Array.from({ length: review.rating }).map((_, i) => (\n                                  <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                                ))}\n                              </div>\n                              <span className=\"text-sm text-muted-foreground\">\n                                {formatDate(review.createdAt!)}\n                              </span>\n                            </div>\n                            \n                            <p className=\"text-foreground\">{review.content}</p>\n                            \n                            <div className=\"flex items-center space-x-4 mt-3\">\n                              <button className=\"flex items-center space-x-1 text-sm text-muted-foreground hover:text-foreground\">\n                                <ThumbsUp className=\"w-4 h-4\" />\n                                <span>{review.likeCount || 0}</span>\n                              </button>\n                              <button className=\"flex items-center space-x-1 text-sm text-muted-foreground hover:text-foreground\">\n                                <Flag className=\"w-4 h-4\" />\n                                <span>Report</span>\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No reviews yet. Be the first to review!</p>\n                </div>\n              )}\n            </TabsContent>\n\n            {/* Comments Tab */}\n            <TabsContent value=\"comments\" className=\"space-y-6\">\n              <div className=\"text-center py-8\">\n                <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  Comments are available on individual chapters.\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Start reading to join the discussion!\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      <MobileNav />\n\n      {/* Share Modal */}\n      <Dialog open={showShareModal} onOpenChange={setShowShareModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Share \"{series?.title || 'Series'}\"</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2 p-3 bg-muted rounded-lg\">\n              <div className=\"flex-1 text-sm text-muted-foreground truncate\">\n                {shareUrl}\n              </div>\n              <Button\n                size=\"sm\"\n                onClick={() => handleShare('copy')}\n                variant=\"outline\"\n              >\n                <Copy className=\"w-4 h-4 mr-1\" />\n                Copy\n              </Button>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleShare('twitter')}\n                className=\"justify-start\"\n              >\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                Twitter\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleShare('reddit')}\n                className=\"justify-start\"\n              >\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                Reddit\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleShare('discord')}\n                className=\"justify-start\"\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Discord\n              </Button>\n              {navigator.share && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => handleShare('native')}\n                  className=\"justify-start\"\n                >\n                  <Share2 className=\"w-4 h-4 mr-2\" />\n                  More\n                </Button>\n              )}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":34560},"client/src/pages/user/[id].tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport UnifiedSeriesCard from \"@/components/ui/unified-series-card\";\nimport { \n  User as UserIcon, \n  Calendar, \n  Users, \n  BookOpen, \n  Star,\n  Shield,\n  Crown,\n  Award,\n  Follow,\n  MessageCircle,\n  Eye\n} from \"lucide-react\";\nimport { format, parseISO } from \"date-fns\";\nimport type { User, Series } from \"@shared/schema\";\n\ninterface UserProfile extends User {\n  series?: Series[];\n  stats?: {\n    followers: number;\n    following: number;\n    chaptersRead: number;\n  };\n  isFollowing?: boolean;\n}\n\nexport default function UserProfilePage() {\n  const { username } = useParams();\n  const { user: currentUser, isAuthenticated } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"series\");\n  const { toast } = useToast();\n\n  // Fetch user profile data by username\n  const { data: profile, isLoading } = useQuery<UserProfile>({\n    queryKey: ['/api/user', username],\n    enabled: !!username,\n  });\n\n  // Fetch real-time reading stats\n  const { data: readingStats } = useQuery({\n    queryKey: ['/api/user', profile?.id, 'stats'],\n    enabled: !!profile?.id,\n  });\n\n  // Follow/unfollow mutation\n  const followMutation = useMutation({\n    mutationFn: async ({ followingId, isFollowing }: { followingId: string; isFollowing: boolean }) => {\n      if (isFollowing) {\n        return apiRequest('/api/follow', 'DELETE', { followingId });\n      } else {\n        return apiRequest('/api/follow', 'POST', { followingId });\n      }\n    },\n    onSuccess: (_, { isFollowing }) => {\n      // Invalidate and refetch the profile\n      queryClient.invalidateQueries({ queryKey: ['/api/user', username] });\n      toast({\n        title: isFollowing ? \"Unfollowed\" : \"Followed\",\n        description: isFollowing ? \"You unfollowed this user\" : \"You are now following this user\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update follow status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFollowClick = () => {\n    if (!profile || !isAuthenticated) return;\n    \n    followMutation.mutate({\n      followingId: profile.id,\n      isFollowing: profile.isFollowing || false,\n    });\n  };\n\n  const formatDate = (dateString: string | Date | null | undefined) => {\n    if (!dateString) return \"Unknown\";\n    try {\n      const date = typeof dateString === 'string' ? parseISO(dateString) : dateString;\n      return format(date, 'MMMM yyyy');\n    } catch {\n      return \"Unknown\";\n    }\n  };\n\n  const getBadges = (user: User) => {\n    const badges = [];\n    \n    if (user.isCreator) {\n      badges.push({ \n        name: \"Creator\", \n        icon: <Star className=\"w-3 h-3\" />, \n        color: \"bg-yellow-500\" \n      });\n    }\n    \n    if (user.isEliteReader) {\n      badges.push({ \n        name: \"Elite Reader\", \n        icon: <Crown className=\"w-3 h-3\" />, \n        color: \"bg-purple-500\" \n      });\n    }\n    \n    if (user.followersCount && user.followersCount > 1000) {\n      badges.push({ \n        name: \"Popular\", \n        icon: <Users className=\"w-3 h-3\" />, \n        color: \"bg-blue-500\" \n      });\n    }\n    \n    if (user.followersCount && user.followersCount > 10000) {\n      badges.push({ \n        name: \"Verified\", \n        icon: <Shield className=\"w-3 h-3\" />, \n        color: \"bg-green-500\" \n      });\n    }\n\n    return badges;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <UserIcon className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <CardTitle>User Not Found</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-muted-foreground\">\n              The user you're looking for doesn't exist.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const badges = getBadges(profile);\n  const isOwnProfile = currentUser?.id === profile.id;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Profile Header */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex flex-col md:flex-row items-start gap-6\">\n              {/* Avatar */}\n              <Avatar className=\"w-32 h-32\">\n                <AvatarImage src={profile.profileImageUrl || \"\"} />\n                <AvatarFallback className=\"text-2xl\">\n                  {profile.firstName?.[0] || profile.username?.[0] || \"U\"}\n                </AvatarFallback>\n              </Avatar>\n\n              {/* Profile Info */}\n              <div className=\"flex-1 space-y-4\">\n                <div>\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <h1 className=\"text-3xl font-bold\">\n                      {profile.creatorDisplayName || \n                       (profile.firstName && profile.lastName \n                         ? `${profile.firstName} ${profile.lastName}` \n                         : profile.username)}\n                    </h1>\n                    {badges.map((badge, index) => (\n                      <Badge \n                        key={index}\n                        className={`${badge.color} text-white flex items-center gap-1`}\n                      >\n                        {badge.icon}\n                        {badge.name}\n                      </Badge>\n                    ))}\n                  </div>\n                  <p className=\"text-lg text-muted-foreground\">@{profile.username}</p>\n                  \n                  {profile.creatorBio && (\n                    <p className=\"text-foreground mt-3 max-w-2xl\">\n                      {profile.creatorBio}\n                    </p>\n                  )}\n                </div>\n\n                {/* Stats */}\n                <div className=\"flex items-center gap-6 text-sm\">\n                  <div className=\"flex items-center gap-1\">\n                    <Users className=\"w-4 h-4\" />\n                    <span className=\"font-medium\">{profile.stats?.followers || 0}</span>\n                    <span className=\"text-muted-foreground\">followers</span>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    <BookOpen className=\"w-4 h-4\" />\n                    <span className=\"font-medium\">{profile.series?.length || 0}</span>\n                    <span className=\"text-muted-foreground\">series</span>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span className=\"text-muted-foreground\">\n                      Joined {formatDate(profile.createdAt)}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                {!isOwnProfile && isAuthenticated && (\n                  <div className=\"flex gap-3\">\n                    <Button \n                      onClick={handleFollowClick}\n                      disabled={followMutation.isPending}\n                      variant={profile.isFollowing ? \"outline\" : \"default\"}\n                    >\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      {profile.isFollowing ? \"Following\" : \"Follow\"}\n                    </Button>\n                    <Button variant=\"outline\">\n                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                      Message\n                    </Button>\n                  </div>\n                )}\n\n                {isOwnProfile && (\n                  <Button variant=\"outline\">\n                    Edit Profile\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Profile Content Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"mb-6\">\n            <TabsTrigger value=\"series\">\n              Series ({profile.series?.length || 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\">\n              Recent Activity\n            </TabsTrigger>\n            {profile.isCreator && (\n              <TabsTrigger value=\"stats\">\n                Creator Stats\n              </TabsTrigger>\n            )}\n          </TabsList>\n\n          {/* Series Tab */}\n          <TabsContent value=\"series\">\n            {profile.series && profile.series.length > 0 ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {profile.series.map((series) => (\n                  <SeriesCard key={series.id} series={series} />\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <BookOpen className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Series Yet</h3>\n                  <p className=\"text-muted-foreground\">\n                    {isOwnProfile \n                      ? \"Start creating your first series!\" \n                      : \"This creator hasn't published any series yet.\"\n                    }\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Activity Tab */}\n          <TabsContent value=\"activity\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {/* Reading Stats */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BookOpen className=\"w-5 h-5\" />\n                    Reading Activity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Chapters Read</span>\n                      <span className=\"font-semibold\">{readingStats?.chaptersRead || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Reading Streak</span>\n                      <span className=\"font-semibold\">{readingStats?.readingStreak || 0} days</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Last Read</span>\n                      <span className=\"font-semibold text-xs\">\n                        {readingStats?.lastRead ? readingStats.lastRead.title : \"None\"}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Future Activity Cards */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Award className=\"w-5 h-5\" />\n                    Achievements\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"secondary\">First Chapter</Badge>\n                    </div>\n                    {readingStats?.readingStreak && readingStats.readingStreak >= 7 && (\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"default\">7 Day Streak</Badge>\n                      </div>\n                    )}\n                    {readingStats?.chaptersRead && readingStats.chaptersRead >= 100 && (\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"default\">Chapter Master</Badge>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Creator Stats Tab */}\n          {profile.isCreator && (\n            <TabsContent value=\"stats\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Views</p>\n                        <p className=\"text-2xl font-bold\">\n                          {profile.series?.reduce((sum, s) => sum + (s.viewCount || 0), 0).toLocaleString() || \"0\"}\n                        </p>\n                      </div>\n                      <Eye className=\"w-8 h-8 text-blue-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Followers</p>\n                        <p className=\"text-2xl font-bold\">{profile.followersCount?.toLocaleString() || \"0\"}</p>\n                      </div>\n                      <Users className=\"w-8 h-8 text-green-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Active Series</p>\n                        <p className=\"text-2xl font-bold\">\n                          {profile.series?.filter(s => s.status === 'ongoing').length || \"0\"}\n                        </p>\n                      </div>\n                      <BookOpen className=\"w-8 h-8 text-purple-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Average Rating</p>\n                        <p className=\"text-2xl font-bold\">\n                          {profile.series?.length \n                            ? (profile.series.reduce((sum, s) => sum + parseFloat(s.rating || '0'), 0) / profile.series.length).toFixed(1)\n                            : \"0.0\"\n                          }\n                        </p>\n                      </div>\n                      <Star className=\"w-8 h-8 text-yellow-500\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Series Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {profile.series && profile.series.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {profile.series.map((series) => (\n                        <div key={series.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div className=\"flex items-center gap-4\">\n                            <img \n                              src={series.coverImageUrl || ''} \n                              alt={series.title}\n                              className=\"w-12 h-16 object-cover rounded\"\n                            />\n                            <div>\n                              <h4 className=\"font-medium\">{series.title}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {series.chapterCount || 0} chapters • {series.status || 'ongoing'}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium\">{(series.viewCount || 0).toLocaleString()} views</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              ★ {series.rating || \"0.0\"} ({series.ratingCount || 0})\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center text-muted-foreground py-8\">\n                      No series data available\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":17819},"client/src/pages/reader/[seriesId]/[chapterId].tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport WebtoonReader from \"@/components/reader/webtoon-reader\";\nimport MangaReader from \"@/components/reader/manga-reader\";\nimport NovelReader from \"@/components/reader/novel-reader\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  ArrowLeft,\n  Settings,\n  Bookmark,\n  MessageCircle,\n  ThumbsUp,\n  Flag,\n  Send,\n  ChevronLeft,\n  ChevronRight,\n  Home,\n  Share2,\n  Heart,\n  Eye,\n  Menu,\n  X,\n  Monitor,\n  Smartphone,\n  Sun,\n  Moon,\n  Palette,\n  Type,\n} from \"lucide-react\";\nimport type { Series, Chapter, Comment } from \"@shared/schema\";\nimport type { ReaderSettings } from \"@/types\";\n\nexport default function Reader() {\n  const { seriesId, chapterId } = useParams<{ seriesId: string; chapterId: string }>();\n  const [, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [readerSettings, setReaderSettings] = useState<ReaderSettings>({\n    fontSize: 16,\n    lineHeight: 1.6,\n    theme: 'light',\n    autoScroll: false,\n    scrollSpeed: 1,\n  });\n  const [commentText, setCommentText] = useState(\"\");\n  const [readingProgress, setReadingProgress] = useState(0);\n  const [showComments, setShowComments] = useState(false);\n  const [isBookmarked, setIsBookmarked] = useState(false);\n  const [showUI, setShowUI] = useState(true);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showShareModal, setShowShareModal] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const [likeCount, setLikeCount] = useState(0);\n  const [uiToggleManual, setUiToggleManual] = useState(false);\n  const [lastScrollY, setLastScrollY] = useState(0);\n  const [hasTrackedReading, setHasTrackedReading] = useState(false);\n\n  // Fetch series data\n  const { data: series, isLoading: seriesLoading, error: seriesError } = useQuery<Series>({\n    queryKey: [`/api/series/${seriesId}`],\n    enabled: !!seriesId,\n    retry: 2,\n    onError: (err) => {\n      console.error(\"Series fetch error:\", err);\n    },\n  });\n\n  // Fetch current chapter\n  const { data: chapter, isLoading: chapterLoading, error: chapterError } = useQuery<Chapter>({\n    queryKey: [`/api/chapters/${chapterId}`],\n    enabled: !!chapterId,\n    retry: 2,\n    onError: (err) => {\n      console.error(\"Chapter fetch error:\", err);\n    },\n  });\n\n  // Handle scroll-based UI hiding - MangaDex style behavior\n  useEffect(() => {\n    let scrollTimeout: NodeJS.Timeout;\n    \n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      \n      // Hide UI when scrolling down (unless manually toggled)\n      if (!uiToggleManual && Math.abs(currentScrollY - lastScrollY) > 10) {\n        if (currentScrollY > lastScrollY && showUI) {\n          // Scrolling down - hide UI\n          setShowUI(false);\n        } else if (currentScrollY < lastScrollY && !showUI) {\n          // Scrolling up - show UI briefly\n          setShowUI(true);\n          // Auto-hide again after scroll stops\n          clearTimeout(scrollTimeout);\n          scrollTimeout = setTimeout(() => {\n            if (!uiToggleManual) {\n              setShowUI(false);\n            }\n          }, 2000);\n        }\n      }\n      \n      setLastScrollY(currentScrollY);\n    };\n\n    // Listen to scroll events\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    document.addEventListener('scroll', handleScroll, { passive: true });\n    \n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      document.removeEventListener('scroll', handleScroll);\n      if (scrollTimeout) clearTimeout(scrollTimeout);\n    };\n  }, [lastScrollY, showUI, uiToggleManual]);\n\n  // Initialize chapter data and check like status\n  useEffect(() => {\n    if (chapter) {\n      setLikeCount(chapter.likeCount || 0);\n    }\n  }, [chapter]);\n\n  // Check if user has liked this chapter\n  const { data: likeStatus } = useQuery({\n    queryKey: [`/api/chapters/${chapterId}/like-status`],\n    enabled: !!chapterId && isAuthenticated,\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (likeStatus) {\n      setIsLiked(likeStatus.isLiked);\n    }\n  }, [likeStatus]);\n\n  // Toggle UI visibility (manual toggle stays visible until scroll)\n  const handleUIToggle = () => {\n    const newShowUI = !showUI;\n    setShowUI(newShowUI);\n    setUiToggleManual(newShowUI);  // Track manual toggles\n    \n    // If manually hiding, allow auto-show on scroll up\n    if (!newShowUI) {\n      setTimeout(() => setUiToggleManual(false), 1000);\n    }\n  };\n\n  // Fetch comments\n  const { data: comments = [], isLoading: commentsLoading } = useQuery({\n    queryKey: [`/api/chapters/${chapterId}/comments`],\n    enabled: !!chapterId,\n  });\n\n  // Check bookmark status\n  const { data: bookmarkStatus } = useQuery({\n    queryKey: [`/api/bookmarks/${seriesId}/status`],\n    enabled: !!seriesId && isAuthenticated,\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (bookmarkStatus) {\n      setIsBookmarked(bookmarkStatus.isBookmarked);\n    }\n  }, [bookmarkStatus]);\n\n  // Like chapter mutation\n  const likeMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", `/api/chapters/${chapterId}/like`, {});\n    },\n    onSuccess: (result) => {\n      setIsLiked(result.isLiked);\n      setLikeCount(result.totalLikes);\n      \n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: [`/api/chapters/${chapterId}/like-status`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/series/${seriesId}`] });\n      \n      toast({\n        title: result.isLiked ? \"Chapter liked!\" : \"Like removed\",\n        description: result.isLiked ? \"Thanks for the support!\" : \"Like removed successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to like chapter\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bookmark mutation\n  const bookmarkMutation = useMutation({\n    mutationFn: async () => {\n      if (isBookmarked) {\n        return await apiRequest(\"DELETE\", `/api/bookmarks/${seriesId}`, {});\n      } else {\n        return await apiRequest(\"POST\", \"/api/bookmarks\", { seriesId });\n      }\n    },\n    onSuccess: () => {\n      const newBookmarkState = !isBookmarked;\n      setIsBookmarked(newBookmarkState);\n      \n      queryClient.invalidateQueries({ queryKey: [`/api/bookmarks/${seriesId}/status`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/user/bookmarks`] });\n      \n      toast({\n        title: newBookmarkState ? \"Series bookmarked!\" : \"Bookmark removed\",\n        description: newBookmarkState ? \"Added to your library\" : \"Removed from your library\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update bookmark\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add comment mutation\n  const addCommentMutation = useMutation({\n    mutationFn: async (content: string) => {\n      return await apiRequest(\"POST\", `/api/chapters/${chapterId}/comments`, { content });\n    },\n    onSuccess: () => {\n      setCommentText(\"\");\n      queryClient.invalidateQueries({ queryKey: [`/api/chapters/${chapterId}/comments`] });\n      \n      toast({\n        title: \"Comment posted!\",\n        description: \"Your comment has been added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to post comment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddComment = () => {\n    if (!commentText.trim()) return;\n    addCommentMutation.mutate(commentText);\n  };\n\n  // Only redirect to login for premium content if needed\n  // Note: Basic content reading should be accessible to all users\n\n  // Fetch all chapters for navigation\n  const { data: allChapters = [] } = useQuery<Chapter[]>({\n    queryKey: [`/api/series/${seriesId}/chapters`],\n    enabled: !!seriesId,\n    retry: 2,\n  });\n\n\n\n  // Update reading progress\n  const progressMutation = useMutation({\n    mutationFn: async (progress: number) => {\n      await apiRequest(\"PUT\", \"/api/reading-progress\", {\n        seriesId,\n        chapterId,\n        progress,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    },\n  });\n\n\n\n  // Reset tracking flag when chapter changes\n  useEffect(() => {\n    setHasTrackedReading(false);\n  }, [chapterId]);\n\n  // Update reading progress when it changes\n  useEffect(() => {\n    if (readingProgress > 0) {\n      const timeout = setTimeout(() => {\n        progressMutation.mutate(readingProgress);\n      }, 1000); // Debounce progress updates\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [readingProgress]);\n\n  // Navigation helpers\n  const currentChapterIndex = allChapters.findIndex(c => c.id === chapterId);\n  const previousChapter = currentChapterIndex > 0 ? allChapters[currentChapterIndex - 1] : null;\n  const nextChapter = currentChapterIndex < allChapters.length - 1 ? allChapters[currentChapterIndex + 1] : null;\n\n  const handlePreviousChapter = () => {\n    if (previousChapter) {\n      navigate(`/reader/${seriesId}/${previousChapter.id}`);\n    }\n  };\n\n  const handleNextChapter = () => {\n    if (nextChapter) {\n      navigate(`/reader/${seriesId}/${nextChapter.id}`);\n    }\n  };\n\n  const handleBackToSeries = () => {\n    navigate(`/series/${seriesId}`);\n  };\n\n  // Track reading mutation for reading streak\n  const trackReadingMutation = useMutation({\n    mutationFn: async ({ chapterId, seriesId }: { chapterId: string; seriesId: string }) => {\n      return apiRequest('POST', '/api/track-reading', { chapterId, seriesId });\n    },\n    onSuccess: () => {\n      console.log('Reading tracked successfully');\n    },\n    onError: (error) => {\n      console.error('Failed to track reading:', error);\n    },\n  });\n\n  const handleProgressChange = (progress: number) => {\n    setReadingProgress(progress);\n    \n    // Track reading when user reaches 90% and is authenticated\n    if (progress >= 90 && !hasTrackedReading && isAuthenticated && chapterId && seriesId) {\n      setHasTrackedReading(true);\n      trackReadingMutation.mutate({ chapterId, seriesId });\n    }\n    \n    // Update reading stats when chapter is completed (100% progress)\n    if (progress >= 100 && isAuthenticated) {\n      updateProgressMutation.mutate({\n        chapterId: chapterId!,\n        seriesId: seriesId!,\n      });\n    }\n  };\n\n  // Update progress and reading statistics mutation\n  const updateProgressMutation = useMutation({\n    mutationFn: async ({ chapterId, seriesId }: { chapterId: string; seriesId: string }) => {\n      return await apiRequest(\"POST\", \"/api/progress/update\", {\n        chapterId,\n        seriesId,\n      });\n    },\n    onSuccess: (data) => {\n      // Invalidate relevant queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/user/profile-stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/continue-reading'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/progress', seriesId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/reading-progress', seriesId] });\n      \n      // Show progress update notification\n      if (data?.progress) {\n        console.log(`Series progress: ${data.progress.readChapters}/${data.progress.totalChapters} (${data.progress.progress}%)`);\n      }\n    },\n    onError: (error) => {\n      if (!isUnauthorizedError(error)) {\n        console.error(\"Failed to update progress:\", error);\n      }\n    },\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  if (seriesLoading || chapterLoading) {\n    return (\n      <div className=\"fixed inset-0 bg-background z-50\">\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"space-y-4 text-center\">\n            <Skeleton className=\"h-8 w-48 mx-auto\" />\n            <Skeleton className=\"h-4 w-32 mx-auto\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!series || !chapter) {\n    return (\n      <div className=\"fixed inset-0 bg-background z-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Content Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            The chapter you're looking for doesn't exist or may have been removed.\n          </p>\n          <Button onClick={() => navigate(\"/\")}>\n            <Home className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const renderReader = () => {\n    const content = chapter.content as any;\n    \n    switch (series.type) {\n      case 'webtoon':\n        return (\n          <WebtoonReader\n            pages={Array.isArray(content) ? content : []}\n            onProgressChange={handleProgressChange}\n            settings={readerSettings}\n          />\n        );\n      case 'manga':\n        return (\n          <MangaReader\n            pages={Array.isArray(content) ? content : []}\n            onProgressChange={handleProgressChange}\n            onPreviousChapter={handlePreviousChapter}\n            onNextChapter={handleNextChapter}\n            hasPrevious={!!previousChapter}\n            hasNext={!!nextChapter}\n            settings={readerSettings}\n          />\n        );\n      case 'novel':\n        return (\n          <NovelReader\n            content={typeof content === 'string' ? content : ''}\n            onProgressChange={handleProgressChange}\n            settings={readerSettings}\n            onSettingsChange={setReaderSettings}\n          />\n        );\n      default:\n        return (\n          <div className=\"flex items-center justify-center h-full\">\n            <p className=\"text-muted-foreground\">Unsupported content type</p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-background z-50 overflow-y-auto overflow-x-hidden\" onClick={handleUIToggle} style={{ overscrollBehavior: 'none' }}>\n      {/* Floating Menu Button - Always Visible */}\n      {!showUI && (\n        <Button\n          variant=\"secondary\"\n          size=\"icon\"\n          className=\"fixed top-4 right-4 z-50 bg-background/80 backdrop-blur-sm\"\n          onClick={(e) => {\n            e.stopPropagation();\n            setShowUI(true);\n          }}\n        >\n          <Menu className=\"w-4 h-4\" />\n        </Button>\n      )}\n\n      {/* Floating UI Header - Hideable */}\n      {showUI && (\n        <div className=\"fixed top-0 left-0 right-0 z-40 bg-background/95 backdrop-blur-sm border-b border-border transition-all duration-300\">\n          <div className=\"flex items-center justify-between p-4\">\n            <Button variant=\"ghost\" onClick={handleBackToSeries}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            \n            <div className=\"text-center flex-1 mx-4\">\n              <h3 className=\"font-semibold text-foreground truncate\">\n                {series.title}\n              </h3>\n              <p className=\"text-sm text-muted-foreground truncate\">\n                Chapter {chapter.chapterNumber}: {chapter.title}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  likeMutation.mutate();\n                }}\n                disabled={likeMutation.isPending}\n                className={isLiked ? \"text-red-500\" : \"\"}\n              >\n                <Heart className={`w-4 h-4 ${isLiked ? 'fill-current' : ''}`} />\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setShowShareModal(true);\n                }}\n              >\n                <Share2 className=\"w-4 h-4\" />\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  bookmarkMutation.mutate();\n                }}\n                disabled={bookmarkMutation.isPending}\n                className={isBookmarked ? \"text-blue-500\" : \"\"}\n              >\n                <Bookmark className={`w-4 h-4 ${isBookmarked ? 'fill-current' : ''}`} />\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setShowSettings(!showSettings);\n                }}\n              >\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setShowUI(false);\n                }}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Chapter Stats */}\n          <div className=\"flex items-center justify-center space-x-6 pb-3 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-1\">\n              <Heart className=\"w-3 h-3\" />\n              <span>{likeCount}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Eye className=\"w-3 h-3\" />\n              <span>{chapter.viewCount || 0}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <MessageCircle className=\"w-3 h-3\" />\n              <span>{comments.length}</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Reader Content - Full Screen */}\n      <div className={`min-h-screen w-full ${showUI ? 'pt-20' : ''}`} onClick={(e) => e.stopPropagation()}>\n        {renderReader()}\n        \n        {/* Comments Section - Always visible below content */}\n        <div className=\"bg-background border-t border-border\">\n          <div className=\"max-w-4xl mx-auto px-4 py-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold flex items-center space-x-2\">\n                <MessageCircle className=\"w-5 h-5\" />\n                <span>Comments ({comments.length})</span>\n              </h3>\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowComments(!showComments)}\n              >\n                {showComments ? 'Hide' : 'Show'} Comments\n              </Button>\n            </div>\n\n            {showComments && (\n              <div className=\"space-y-6\">\n                {/* Add Comment Form */}\n                {isAuthenticated ? (\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex space-x-4\">\n                        <Avatar>\n                          <AvatarFallback>\n                            {user?.username?.[0]?.toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 space-y-3\">\n                          <Textarea\n                            placeholder=\"Share your thoughts about this chapter...\"\n                            value={commentText}\n                            onChange={(e) => setCommentText(e.target.value)}\n                            className=\"min-h-[100px]\"\n                          />\n                          <div className=\"flex justify-end\">\n                            <Button\n                              onClick={handleAddComment}\n                              disabled={!commentText.trim() || addCommentMutation.isPending}\n                            >\n                              <Send className=\"w-4 h-4 mr-2\" />\n                              {addCommentMutation.isPending ? 'Posting...' : 'Post Comment'}\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground mb-4\">Join the discussion! Sign in to comment.</p>\n                      <Button onClick={() => navigate('/auth')}>\n                        Sign In to Comment\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Comments List */}\n                <div className=\"space-y-4\">\n                  {commentsLoading ? (\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 3 }).map((_, index) => (\n                        <Card key={index}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex space-x-4\">\n                              <Skeleton className=\"w-10 h-10 rounded-full\" />\n                              <div className=\"flex-1 space-y-2\">\n                                <Skeleton className=\"h-4 w-24\" />\n                                <Skeleton className=\"h-4 w-full\" />\n                                <Skeleton className=\"h-4 w-3/4\" />\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : comments.length > 0 ? (\n                    comments.map((comment) => (\n                      <Card key={comment.id}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex space-x-4\">\n                            <Avatar>\n                              <AvatarFallback>\n                                {comment.user?.username?.[0]?.toUpperCase() || 'U'}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"font-medium\">\n                                    {comment.user?.username || 'Anonymous'}\n                                  </span>\n                                  <span className=\"text-sm text-muted-foreground\">\n                                    {comment.createdAt ? new Date(comment.createdAt).toLocaleDateString() : ''}\n                                  </span>\n                                </div>\n                              </div>\n                              <p className=\"text-foreground whitespace-pre-wrap\">{comment.content}</p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  ) : (\n                    <Card>\n                      <CardContent className=\"p-8 text-center\">\n                        <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No comments yet. Be the first to share your thoughts!</p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Navigation - Only for manga/webtoon */}\n      {showUI && series.type !== 'novel' && (\n        <div className=\"fixed bottom-4 left-1/2 transform -translate-x-1/2 z-40\">\n          <Card className=\"bg-background/95 backdrop-blur-sm\">\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-center space-x-4\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  onClick={handlePreviousChapter}\n                  disabled={!previousChapter}\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                </Button>\n                \n                <div className=\"flex items-center space-x-2 min-w-[200px]\">\n                  <Progress value={readingProgress} className=\"h-2 flex-1\" />\n                  <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                    {Math.round(readingProgress)}%\n                  </span>\n                </div>\n                \n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  onClick={handleNextChapter}\n                  disabled={!nextChapter}\n                >\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Settings Modal */}\n      <Dialog open={showSettings} onOpenChange={setShowSettings}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Reader Settings</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm font-medium\">Theme</Label>\n              <Select \n                value={readerSettings.theme} \n                onValueChange={(value: 'light' | 'dark' | 'sepia') => \n                  setReaderSettings({...readerSettings, theme: value})\n                }\n              >\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"light\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Sun className=\"w-4 h-4\" />\n                      <span>Light</span>\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"dark\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Moon className=\"w-4 h-4\" />\n                      <span>Dark</span>\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"sepia\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Palette className=\"w-4 h-4\" />\n                      <span>Sepia</span>\n                    </div>\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {series?.type === 'manga' && (\n              <>\n                <div>\n                  <Label className=\"text-sm font-medium\">Reading Direction</Label>\n                  <Select defaultValue=\"ltr\">\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"ltr\">Left to Right</SelectItem>\n                      <SelectItem value=\"rtl\">Right to Left</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium\">Fit to Width</Label>\n                  <Switch />\n                </div>\n              </>\n            )}\n\n            {series?.type === 'webtoon' && (\n              <div>\n                <Label className=\"text-sm font-medium\">Scroll Mode</Label>\n                <Select defaultValue=\"vertical\">\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"vertical\">Vertical Scroll</SelectItem>\n                    <SelectItem value=\"horizontal\">Horizontal Scroll</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {series?.type === 'novel' && (\n              <>\n                <div>\n                  <Label className=\"text-sm font-medium\">Font Size</Label>\n                  <div className=\"flex items-center space-x-3 mt-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => setReaderSettings({\n                        ...readerSettings, \n                        fontSize: Math.max(12, readerSettings.fontSize - 2)\n                      })}\n                    >\n                      <Type className=\"w-3 h-3\" />\n                    </Button>\n                    <span className=\"text-sm w-12 text-center\">{readerSettings.fontSize}px</span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => setReaderSettings({\n                        ...readerSettings, \n                        fontSize: Math.min(24, readerSettings.fontSize + 2)\n                      })}\n                    >\n                      <Type className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium\">Auto Scroll</Label>\n                  <Switch \n                    checked={readerSettings.autoScroll}\n                    onCheckedChange={(checked) => \n                      setReaderSettings({...readerSettings, autoScroll: checked})\n                    }\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Share Modal */}\n      <Dialog open={showShareModal} onOpenChange={setShowShareModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Share Chapter</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm font-medium\">Share Link</Label>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Input \n                  value={`${window.location.origin}/reader/${seriesId}/${chapterId}`}\n                  readOnly\n                  className=\"flex-1\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => {\n                    navigator.clipboard.writeText(`${window.location.origin}/reader/${seriesId}/${chapterId}`);\n                    toast({\n                      title: \"Link copied!\",\n                      description: \"Chapter link copied to clipboard\",\n                    });\n                  }}\n                >\n                  <Share2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium\">Share to Social Media</Label>\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const text = `Check out \"${chapter?.title || 'this chapter'}\" from ${series?.title || 'this series'}!`;\n                    const url = `${window.location.origin}/reader/${seriesId}/${chapterId}`;\n                    window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`, '_blank');\n                  }}\n                >\n                  Twitter\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const url = `${window.location.origin}/reader/${seriesId}/${chapterId}`;\n                    const title = `${chapter?.title || 'Chapter'} - ${series?.title || 'Webtoon'}`;\n                    window.open(`https://www.reddit.com/submit?url=${encodeURIComponent(url)}&title=${encodeURIComponent(title)}`, '_blank');\n                  }}\n                >\n                  Reddit\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const text = `Check out \"${chapter.title}\" from ${series.title}! ${window.location.origin}/reader/${seriesId}/${chapterId}`;\n                    navigator.clipboard.writeText(text);\n                    toast({\n                      title: \"Message copied!\",\n                      description: \"Share message copied to clipboard\",\n                    });\n                  }}\n                >\n                  Discord\n                </Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Comments Sidebar */}\n      {showComments && (\n        <div className=\"absolute top-16 right-0 w-96 h-[calc(100%-4rem)] bg-background border-l border-border overflow-hidden flex flex-col\">\n          <div className=\"p-4 border-b border-border\">\n            <h3 className=\"font-semibold\">Comments ({comments.length})</h3>\n          </div>\n          \n          <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {commentsLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <Skeleton key={i} className=\"h-20 w-full\" />\n                ))}\n              </div>\n            ) : comments.length > 0 ? (\n              comments.map((comment) => (\n                <div key={comment.id} className=\"space-y-2\">\n                  <div className=\"flex items-start space-x-2\">\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback>\n                        {comment.userId.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium\">{comment.userId}</span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatDate(comment.createdAt!)}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-foreground mt-1\">{comment.content}</p>\n                      \n                      <div className=\"flex items-center space-x-3 mt-2\">\n                        <button className=\"flex items-center space-x-1 text-xs text-muted-foreground hover:text-foreground\">\n                          <ThumbsUp className=\"w-3 h-3\" />\n                          <span>{comment.likeCount || 0}</span>\n                        </button>\n                        <button className=\"text-xs text-muted-foreground hover:text-foreground\">\n                          Reply\n                        </button>\n                        <button className=\"text-xs text-muted-foreground hover:text-foreground\">\n                          <Flag className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <MessageCircle className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">No comments yet</p>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"p-4 border-t border-border\">\n            <div className=\"flex space-x-2\">\n              <Textarea\n                placeholder=\"Add a comment...\"\n                value={commentText}\n                onChange={(e) => setCommentText(e.target.value)}\n                rows={2}\n                className=\"flex-1\"\n              />\n              <Button \n                size=\"icon\"\n                onClick={() => commentMutation.mutate()}\n                disabled={commentMutation.isPending || !commentText.trim()}\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":38057},"setup.md":{"content":"# Webtoon Platform Setup Guide\n\n## Overview\n\nThis is a comprehensive guide for setting up and deploying your Webtoon/Manga/Novel publishing platform. The platform supports multiple content formats, user authentication, premium content, and monetization features.\n\n## Prerequisites\n\n- Node.js 18+ and npm\n- PostgreSQL database (Neon, Supabase, or self-hosted)\n- Optional: Stripe account for payment processing\n\n## Quick Start\n\n### 1. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 2. Database Setup\n\nThe platform supports multiple PostgreSQL providers:\n\n**Option A: Neon Database (Recommended)**\n1. Go to [Neon Console](https://console.neon.tech/)\n2. Create a new project\n3. Copy your connection string (starts with `postgresql://`)\n\n**Option B: Supabase**\n1. Go to [Supabase Dashboard](https://supabase.com/dashboard)\n2. Create a new project\n3. Go to Settings > Database\n4. Copy your connection string\n\n**Option C: Self-hosted PostgreSQL**\n- Ensure your PostgreSQL server is accessible\n- Format: `postgresql://username:password@host:port/database`\n\n### 3. Run Setup\n\n```bash\nnpm run dev\n```\n\nNavigate to `/setup` in your browser and complete the installation wizard:\n\n1. **Database Configuration**: Enter your PostgreSQL connection string\n2. **Admin Account**: Create your administrator account\n3. **Site Settings**: Configure site name and branding\n4. **Stripe Integration** (Optional): Add payment processing\n5. **Logo & Branding** (Optional): Upload site logo and favicon\n\n### 4. Post-Setup\n\nAfter completing setup:\n- Your admin account will be created with creator privileges\n- Database tables will be automatically created\n- The platform will be ready for content creation\n\n## Development Commands\n\n```bash\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Database operations\nnpm run db:push          # Push schema changes to database\nnpm run db:studio        # Open Drizzle Studio (database GUI)\nnpm run db:generate      # Generate database migrations\n\n# Production server\nnpm start\n```\n\n## Environment Variables\n\nThe setup process automatically configures these variables:\n\n```env\nDATABASE_URL=your_postgresql_connection_string\nSESSION_SECRET=automatically_generated\nSTRIPE_SECRET_KEY=your_stripe_secret_key (if configured)\nVITE_STRIPE_PUBLIC_KEY=your_stripe_public_key (if configured)\n```\n\n## Deployment Options\n\n### Deploy to Vercel\n\n#### Prerequisites\n- Vercel account (free tier available)\n- Git repository with your project\n- Database setup completed (Neon, Supabase, etc.)\n\n#### Step 1: Prepare Your Project\n\n1. **Ensure your project is in a Git repository:**\n   ```bash\n   git init\n   git add .\n   git commit -m \"Initial commit\"\n   ```\n\n2. **Push to GitHub/GitLab/Bitbucket:**\n   ```bash\n   # For GitHub:\n   git remote add origin https://github.com/yourusername/your-repo.git\n   git push -u origin main\n   ```\n\n3. **Build locally to test:**\n   ```bash\n   npm run build\n   ```\n   Make sure this completes without errors.\n\n#### Step 2: Deploy to Vercel\n\n**Option A: Deploy via Vercel Dashboard (Recommended)**\n\n1. **Go to [Vercel Dashboard](https://vercel.com/dashboard)**\n2. **Click \"Add New Project\"**\n3. **Import your Git repository:**\n   - Connect your GitHub/GitLab/Bitbucket account\n   - Select your repository\n   - Click \"Import\"\n\n4. **Configure project settings:**\n   - **Framework Preset:** Select \"Other\" or \"Vite\"\n   - **Root Directory:** `.` (leave as default)\n   - **Build Command:** `npm run build`\n   - **Output Directory:** `dist/public` ⚠️ **Important: Must be `dist/public`, not just `dist`**\n   - **Install Command:** `npm install`\n\n5. **Click \"Deploy\"** - This first deployment will likely fail due to missing environment variables\n\n**Option B: Deploy with Vercel CLI**\n\n1. **Install Vercel CLI:**\n   ```bash\n   npm i -g vercel\n   ```\n\n2. **Login to Vercel:**\n   ```bash\n   vercel login\n   ```\n\n3. **Deploy from your project directory:**\n   ```bash\n   vercel\n   ```\n   - Follow the prompts to link your project\n   - Choose \"yes\" to link to existing project or create new one\n\n#### Step 3: Configure Environment Variables\n\n1. **In Vercel Dashboard, go to your project**\n2. **Navigate to Settings → Environment Variables**\n3. **Add the following variables:**\n\n   **Required Variables:**\n   - **Name:** `DATABASE_URL`\n     - **Value:** Your PostgreSQL connection string\n     - **Environment:** Production, Preview, Development\n   \n   - **Name:** `SESSION_SECRET`\n     - **Value:** A secure random string (generate with: `openssl rand -base64 32`)\n     - **Environment:** Production, Preview, Development\n\n   **Optional Variables (if using Stripe):**\n   - **Name:** `STRIPE_SECRET_KEY`\n     - **Value:** Your Stripe secret key (starts with `sk_`)\n     - **Environment:** Production, Preview, Development\n   \n   - **Name:** `VITE_STRIPE_PUBLIC_KEY`\n     - **Value:** Your Stripe publishable key (starts with `pk_`)\n     - **Environment:** Production, Preview, Development\n\n4. **Click \"Save\" for each variable**\n\n#### Step 4: Configure Vercel Project Settings\n\nThe `vercel.json` file has been automatically created in your project root with the correct configuration:\n\n```json\n{\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"package.json\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"dist/public\"\n      }\n    },\n    {\n      \"src\": \"dist/index.js\",\n      \"use\": \"@vercel/node\"\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/api/(.*)\",\n      \"dest\": \"/dist/index.js\"\n    },\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/dist/public/$1\"\n    }\n  ],\n  \"env\": {\n    \"NODE_ENV\": \"production\"\n  }\n}\n```\n\nThis configuration:\n- Builds static files from `dist/public` (where Vite outputs frontend files)\n- Uses the built server file `dist/index.js` as the serverless function\n- Routes API calls (`/api/*`) to the server function\n- Serves static files from the correct directory structure\n- Matches the project's build output exactly\n\n#### Step 5: Redeploy with Environment Variables\n\n1. **Trigger a new deployment:**\n   - **Via Dashboard:** Go to Deployments tab → Click \"Redeploy\" on latest deployment\n   - **Via CLI:** Run `vercel --prod` in your project directory\n   - **Via Git:** Push any change to your repository\n\n2. **Monitor the deployment:**\n   - Watch the build logs in Vercel dashboard\n   - Check for any build errors or warnings\n\n#### Step 6: Post-Deployment Setup\n\n1. **Access your deployed application:**\n   - Your app will be available at `https://your-project-name.vercel.app`\n   - Vercel provides the URL in the deployment success message\n\n2. **Complete the setup process:**\n   - Navigate to `https://your-project-name.vercel.app/setup`\n   - Enter your database connection string\n   - Create your admin account\n   - Configure site settings\n\n3. **Test key functionality:**\n   - User registration and login\n   - Content creation and viewing\n   - File uploads (if applicable)\n   - Database operations\n\n#### Step 7: Custom Domain (Optional)\n\n1. **In Vercel Dashboard → Settings → Domains**\n2. **Add your custom domain**\n3. **Configure DNS records as instructed by Vercel**\n4. **SSL certificates are automatically provisioned**\n\n#### Troubleshooting Vercel Deployment\n\n**Showing Raw Code Instead of Website:**\nIf your Vercel deployment shows a page with raw code instead of the website:\n- Ensure you ran `npm run build` locally first to test the build\n- Check that `vercel.json` matches the corrected configuration above\n- Make sure the Build Command is set to `npm run build` in Vercel dashboard\n- Verify Output Directory is set to `dist/public` in project settings\n- Redeploy after making these changes\n\n**Setup Page Not Accessible on Vercel:**\nIf the main pages work but `/setup` is not accessible on your Vercel deployment:\n- The app includes client-side setup detection that automatically redirects to `/setup` when needed\n- If you're not seeing the setup page, try accessing `/setup` directly in your browser\n- Check the browser console for any JavaScript errors that might prevent the redirect\n- Clear browser cache and try again\n- The setup detection runs on every page load and will redirect if setup is incomplete\n\n**Setup API Errors on Vercel (FIXED):**\nIf you previously saw errors for setup API endpoints:\n- ✅ **Method not allowed**: Fixed by standardizing API format between local and Vercel\n- ✅ **500 crashes**: Fixed with ES modules and dynamic imports for Vercel compatibility  \n- ✅ **404 errors**: Fixed with individual serverless function files in `/api/setup/`\n- **Final Step**: Push the latest code and redeploy to get all fixes\n- Ensure your DATABASE_URL environment variable is set in Vercel\n- Both local development and Vercel deployment now use identical simplified API\n\n**Favicon 404 Errors:**\nIf you see favicon.ico 404 errors:\n- The latest code includes a proper favicon.svg file\n- This error won't affect functionality but is now resolved\n\n**Runtime Version Error:**\nIf you see \"Function Runtimes must have a valid version\", your `vercel.json` file needs to be updated:\n- Delete the old `vercel.json` file\n- Use the corrected configuration provided above (uses `@vercel/node` instead of `nodejs18.x`)\n- Redeploy your project\n\n**Build Failures:**\n- Check build logs in Vercel dashboard\n- Ensure all dependencies are in `package.json`\n- Verify TypeScript compilation passes locally\n\n**Database Connection Issues:**\n- Verify `DATABASE_URL` is correctly set\n- Ensure your database allows connections from Vercel IPs\n- For Neon: Enable \"Allow connections from any IP\"\n\n**Function Timeout:**\n- Serverless functions have execution limits (10s on free plan)\n- Consider upgrading to Pro plan for longer timeouts\n- Optimize database queries for faster response times\n\n**Environment Variable Issues:**\n- Variables must be set for all environments (Production, Preview, Development)\n- VITE_ prefixed variables are exposed to the frontend\n- Redeploy after adding new environment variables\n\n**Static File Issues:**\n- Ensure `npm run build` creates files in `dist` directory\n- Check that `vercel.json` routes are correctly configured\n- Verify static assets are properly referenced in your code\n\n**Environment Variable Issues:**\n- Variables must be set for all environments (Production, Preview, Development)\n- VITE_ prefixed variables are exposed to the frontend\n- Redeploy after adding new environment variables\n\n**Static File Issues:**\n- Ensure `npm run build` creates files in `dist` directory\n- Check that `vercel.json` routes are correctly configured\n- Verify static assets are properly referenced in your code\n\n### Deploy to Netlify\n\n1. **Build the application:**\n   ```bash\n   npm run build\n   ```\n\n2. **Install Netlify CLI:**\n   ```bash\n   npm install -g netlify-cli\n   ```\n\n3. **Deploy:**\n   ```bash\n   netlify deploy --prod --dir=dist\n   ```\n\n4. **Configure environment variables in Netlify dashboard:**\n   - Same variables as Vercel\n\n5. **Netlify configuration** (`netlify.toml`):\n   ```toml\n   [build]\n     publish = \"dist\"\n     command = \"npm run build\"\n\n   [functions]\n     directory = \"server\"\n\n   [[redirects]]\n     from = \"/api/*\"\n     to = \"/.netlify/functions/server/:splat\"\n     status = 200\n\n   [[redirects]]\n     from = \"/*\"\n     to = \"/index.html\"\n     status = 200\n   ```\n\n### Deploy to Railway\n\n1. **Connect your repository to Railway**\n2. **Set environment variables:**\n   - `DATABASE_URL`\n   - `SESSION_SECRET`\n   - `STRIPE_SECRET_KEY` (optional)\n   - `VITE_STRIPE_PUBLIC_KEY` (optional)\n\n3. **Railway will automatically deploy using:**\n   ```bash\n   npm install\n   npm run build\n   npm start\n   ```\n\n### Deploy to Render\n\n1. **Create a new Web Service on Render**\n2. **Build Command:** `npm install && npm run build`\n3. **Start Command:** `npm start`\n4. **Environment Variables:** Same as above\n\n## Database Management\n\n### Schema Updates\n\nWhen you modify the database schema:\n\n```bash\n# Push changes to development database\nnpm run db:push\n\n# Generate migration files (for production)\nnpm run db:generate\n```\n\n### Database Studio\n\nAccess your database with a GUI:\n\n```bash\nnpm run db:studio\n```\n\nThis opens Drizzle Studio at `https://local.drizzle.studio`\n\n## Content Management\n\n### Creating Content\n\n1. **Login as admin**\n2. **Navigate to Create section**\n3. **Choose content type:**\n   - **Webtoon**: Vertical scrolling format with image uploads\n   - **Manga**: Traditional page-based format\n   - **Novel**: Text-based with markdown support\n\n### Series Management\n\n- Upload cover images and series metadata\n- Manage chapters and publishing schedule\n- Set premium pricing for monetization\n- Track analytics and reader engagement\n\n## User Features\n\n### Authentication\n- Username/password registration and login\n- Email verification support\n- Password reset functionality\n\n### Reading Experience\n- Format-specific readers (webtoon, manga, novel)\n- Reading progress tracking\n- Bookmarking and library management\n- Social features (comments, reviews, follows)\n\n### Monetization\n- Coin-based premium content system\n- Stripe integration for payments\n- Creator revenue tracking\n\n## Customization\n\n### Theming\n- Light/dark mode support\n- Customizable CSS variables in `client/src/index.css`\n- Logo and branding configuration\n\n### Features\n- Configure site settings in admin panel\n- Enable/disable specific features\n- Customize user permissions and roles\n\n## Security\n\n### Production Considerations\n- Use strong `SESSION_SECRET`\n- Enable HTTPS in production\n- Configure CORS appropriately\n- Regular database backups\n- Monitor for security updates\n\n### Database Security\n- Use connection pooling for scalability\n- Implement proper access controls\n- Regular security audits\n\n## Troubleshooting\n\n### Common Issues\n\n**Database Connection Failed**\n- Verify connection string format\n- Check database server accessibility\n- Ensure proper SSL configuration for cloud databases\n\n**Setup Page Not Loading**\n- Clear browser cache\n- Check server logs for errors\n- Verify all dependencies are installed\n\n**Stripe Integration Issues**\n- Verify API keys are correct\n- Check Stripe dashboard for webhook configuration\n- Ensure HTTPS is enabled for production\n\n**File Upload Problems**\n- Check file size limits (default: 10MB)\n- Verify supported formats (JPEG, PNG, WebP)\n- Ensure proper write permissions\n\n### Getting Help\n\n1. Check server logs: `npm run dev` shows real-time logs\n2. Database issues: Use `npm run db:studio` to inspect data\n3. API testing: Use browser dev tools to check network requests\n\n## License\n\nThis platform is open source and available under the MIT License.\n\n---\n\nFor additional support or questions, refer to the project documentation or create an issue in the repository.","size_bytes":14632},"api/setup/install.js":{"content":"export default async function handler(req, res) {\n  // Set proper headers for JSON response\n  res.setHeader('Content-Type', 'application/json');\n  \n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    console.log('API called with method:', req.method);\n    console.log('Request headers:', req.headers);\n    console.log('Raw body type:', typeof req.body);\n    console.log('Request body keys:', Object.keys(req.body || {}));\n    \n    // Handle different body parsing scenarios\n    let requestData = req.body;\n    if (typeof req.body === 'string') {\n      try {\n        requestData = JSON.parse(req.body);\n      } catch (parseError) {\n        console.error('Failed to parse JSON body:', parseError);\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid JSON in request body'\n        });\n      }\n    }\n    \n    const { databaseUrl, adminUsername, adminPassword } = requestData || {};\n\n    if (!databaseUrl || !adminUsername || !adminPassword) {\n      console.log('Missing fields:', { \n        hasDatabaseUrl: !!databaseUrl, \n        hasUsername: !!adminUsername, \n        hasPassword: !!adminPassword \n      });\n      return res.status(400).json({ \n        message: 'Missing required fields: databaseUrl, adminUsername, adminPassword' \n      });\n    }\n\n    console.log('Starting installation process...');\n    \n    // Dynamic imports to avoid module issues\n    const { neon } = await import('@neondatabase/serverless');\n    \n    // Try to import bcrypt, fallback to bcryptjs if needed\n    let bcrypt;\n    try {\n      bcrypt = await import('bcrypt');\n    } catch (bcryptError) {\n      console.log('bcrypt failed, trying bcryptjs fallback');\n      try {\n        bcrypt = await import('bcryptjs');\n      } catch (fallbackError) {\n        throw new Error('Neither bcrypt nor bcryptjs available for password hashing');\n      }\n    }\n    \n    console.log('Testing database connection (Neon):', databaseUrl.replace(/\\/\\/.*@/, '//**:***@'));\n    const sql = neon(databaseUrl);\n    \n    // Test connection\n    try {\n      await sql`SELECT 1`;\n      console.log('Database connection validated successfully');\n    } catch (connError) {\n      console.error('Database connection failed:', connError);\n      return res.status(400).json({ \n        success: false, \n        message: 'Database connection failed. Please check your DATABASE_URL.' \n      });\n    }\n\n    console.log('Creating database schema...');\n    \n    // Create all tables manually since Drizzle CLI isn't available in Vercel serverless\n    // Skip enums for now to avoid serverless issues - use TEXT with constraints instead\n    console.log('Creating core tables...');\n\n    // Sessions table (required for auth)\n    await sql`\n      CREATE TABLE IF NOT EXISTS sessions (\n        sid TEXT PRIMARY KEY,\n        sess JSONB NOT NULL,\n        expire TIMESTAMP NOT NULL\n      )\n    `;\n    await sql`CREATE INDEX IF NOT EXISTS idx_session_expire ON sessions(expire)`;\n\n    // Config table\n    await sql`\n      CREATE TABLE IF NOT EXISTS config (\n        id TEXT PRIMARY KEY,\n        setup_complete BOOLEAN DEFAULT false,\n        site_name TEXT DEFAULT 'MangaVerse',\n        admin_user_id TEXT,\n        installer_disabled BOOLEAN DEFAULT false,\n        stripe_public_key TEXT,\n        stripe_secret_key TEXT,\n        logo_url TEXT,\n        favicon_url TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Users table\n    await sql`\n      CREATE TABLE IF NOT EXISTS users (\n        id TEXT PRIMARY KEY,\n        username TEXT UNIQUE NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        first_name TEXT,\n        last_name TEXT,\n        profile_image_url TEXT,\n        coin_balance INTEGER DEFAULT 0,\n        is_creator BOOLEAN DEFAULT false,\n        is_elite_reader BOOLEAN DEFAULT false,\n        followers_count INTEGER DEFAULT 0,\n        email_verified BOOLEAN DEFAULT false,\n        reset_token TEXT,\n        reset_token_expiry TIMESTAMP,\n        creator_display_name TEXT,\n        creator_bio TEXT,\n        creator_portfolio_url TEXT,\n        creator_social_media_url TEXT,\n        creator_content_types TEXT,\n        creator_experience TEXT,\n        creator_motivation TEXT,\n        creator_application_status TEXT,\n        creator_application_date TEXT,\n        chapters_read INTEGER DEFAULT 0,\n        reading_streak INTEGER DEFAULT 0,\n        last_read_at TIMESTAMP,\n        reading_dates TEXT,\n        settings TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Groups table\n    await sql`\n      CREATE TABLE IF NOT EXISTS groups (\n        id TEXT PRIMARY KEY,\n        name TEXT NOT NULL,\n        description TEXT,\n        banner_url TEXT,\n        logo_url TEXT,\n        social_links JSONB,\n        owner_id TEXT NOT NULL,\n        member_count INTEGER DEFAULT 1,\n        series_count INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Series table\n    await sql`\n      CREATE TABLE IF NOT EXISTS series (\n        id TEXT PRIMARY KEY,\n        title TEXT NOT NULL,\n        description TEXT,\n        cover_image_url TEXT,\n        type TEXT NOT NULL CHECK (type IN ('webtoon', 'manga', 'novel')),\n        status TEXT DEFAULT 'ongoing' CHECK (status IN ('ongoing', 'completed', 'hiatus')),\n        author_id TEXT NOT NULL,\n        group_id TEXT,\n        genres TEXT,\n        tags TEXT,\n        is_nsfw BOOLEAN DEFAULT false,\n        view_count INTEGER DEFAULT 0,\n        like_count INTEGER DEFAULT 0,\n        bookmark_count INTEGER DEFAULT 0,\n        rating DECIMAL(3,2) DEFAULT 0.00,\n        rating_count INTEGER DEFAULT 0,\n        chapter_count INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Chapters table\n    await sql`\n      CREATE TABLE IF NOT EXISTS chapters (\n        id TEXT PRIMARY KEY,\n        series_id TEXT NOT NULL,\n        title TEXT NOT NULL,\n        chapter_number INTEGER NOT NULL,\n        content JSONB,\n        images TEXT,\n        preview_image TEXT,\n        status TEXT DEFAULT 'free' CHECK (status IN ('free', 'premium', 'scheduled')),\n        coin_price INTEGER DEFAULT 0,\n        view_count INTEGER DEFAULT 0,\n        like_count INTEGER DEFAULT 0,\n        published_at TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Chapter unlocks table\n    await sql`\n      CREATE TABLE IF NOT EXISTS chapter_unlocks (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        chapter_id TEXT NOT NULL,\n        unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Group members table\n    await sql`\n      CREATE TABLE IF NOT EXISTS group_members (\n        id TEXT PRIMARY KEY,\n        group_id TEXT NOT NULL,\n        user_id TEXT NOT NULL,\n        role TEXT NOT NULL DEFAULT 'contributor',\n        joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Comments table\n    await sql`\n      CREATE TABLE IF NOT EXISTS comments (\n        id TEXT PRIMARY KEY,\n        chapter_id TEXT NOT NULL,\n        user_id TEXT NOT NULL,\n        content TEXT NOT NULL,\n        parent_id TEXT,\n        like_count INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Reviews table\n    await sql`\n      CREATE TABLE IF NOT EXISTS reviews (\n        id TEXT PRIMARY KEY,\n        series_id TEXT NOT NULL,\n        user_id TEXT NOT NULL,\n        rating INTEGER NOT NULL,\n        content TEXT,\n        like_count INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Follows table\n    await sql`\n      CREATE TABLE IF NOT EXISTS follows (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        target_id TEXT NOT NULL,\n        target_type TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Bookmarks table\n    await sql`\n      CREATE TABLE IF NOT EXISTS bookmarks (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        series_id TEXT NOT NULL,\n        folder_id TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Bookmark folders table\n    await sql`\n      CREATE TABLE IF NOT EXISTS bookmark_folders (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        name TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Reading progress table\n    await sql`\n      CREATE TABLE IF NOT EXISTS reading_progress (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        series_id TEXT NOT NULL,\n        chapter_id TEXT NOT NULL,\n        progress DECIMAL(5,2) DEFAULT 0.00,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(user_id, series_id, chapter_id)\n      )\n    `;\n\n    // Reading history table\n    await sql`\n      CREATE TABLE IF NOT EXISTS reading_history (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        chapter_id TEXT NOT NULL,\n        series_id TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Chapter likes table\n    await sql`\n      CREATE TABLE IF NOT EXISTS chapter_likes (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        chapter_id TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Chapter views table\n    await sql`\n      CREATE TABLE IF NOT EXISTS chapter_views (\n        id TEXT PRIMARY KEY,\n        user_id TEXT,\n        chapter_id TEXT NOT NULL,\n        viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    // Transactions table\n    await sql`\n      CREATE TABLE IF NOT EXISTS transactions (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        type TEXT NOT NULL,\n        amount INTEGER NOT NULL,\n        chapter_id TEXT,\n        description TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n\n    console.log('Basic tables created successfully');\n\n    // Create admin user with simple ID generation\n    const adminUserId = Math.random().toString(36).substring(2) + Date.now().toString(36);\n    const hashedPassword = await bcrypt.hash(adminPassword, 12);\n    \n    console.log('Creating admin user...');\n    await sql`\n      INSERT INTO users (id, username, email, password, is_creator)\n      VALUES (${adminUserId}, ${adminUsername}, ${adminUsername + '@admin.local'}, ${hashedPassword}, true)\n      ON CONFLICT (username) DO UPDATE SET\n        password = ${hashedPassword},\n        is_creator = true,\n        updated_at = CURRENT_TIMESTAMP\n    `;\n\n    console.log('Admin user created successfully:', adminUsername, `(${adminUserId})`);\n\n    // Mark setup as complete\n    await sql`\n      INSERT INTO config (id, setup_complete, admin_user_id, site_name)\n      VALUES ('main_config', true, ${adminUserId}, 'Webtoon Platform')\n      ON CONFLICT (id) DO UPDATE SET\n        setup_complete = true,\n        admin_user_id = ${adminUserId},\n        updated_at = CURRENT_TIMESTAMP\n    `;\n    \n    console.log('Setup status marked as complete in database');\n\n    const configData = {\n      siteName: 'Webtoon Platform',\n      hasStripe: false,\n      hasLogo: false\n    };\n\n    console.log('Setup completed successfully with configuration:', configData);\n\n    return res.json({ \n      success: true, \n      message: 'Installation completed successfully!',\n      adminUserId: adminUserId\n    });\n  } catch (error) {\n    console.error('Installation error:', error);\n    console.error('Error stack:', error.stack);\n    console.error('Error details:', {\n      name: error.name,\n      message: error.message,\n      code: error.code\n    });\n    \n    return res.status(500).json({ \n      success: false, \n      message: `Installation failed: ${error.message}`,\n      error: error.name,\n      details: error.stack\n    });\n  }\n}","size_bytes":12279},"api/setup/status.js":{"content":"export default async function handler(req, res) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const databaseUrl = process.env.DATABASE_URL;\n    if (!databaseUrl) {\n      return res.json({ isSetup: false });\n    }\n\n    // Import neon dynamically to avoid module issues\n    const { neon } = await import('@neondatabase/serverless');\n    const sql = neon(databaseUrl);\n    \n    // Try to check if config table exists and has setup data\n    const result = await sql`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'config'\n      ) as table_exists\n    `;\n    \n    if (!result[0]?.table_exists) {\n      return res.json({ isSetup: false });\n    }\n\n    // Check if setup is complete\n    const configResult = await sql`\n      SELECT setup_complete, site_name, admin_user_id FROM config WHERE id = 'main_config' LIMIT 1\n    `;\n    \n    const config = configResult[0];\n    \n    return res.json({\n      isSetup: config?.setup_complete || false,\n      config: config ? {\n        id: 'main_config',\n        setupComplete: config.setup_complete,\n        siteName: config.site_name,\n        adminUserId: config.admin_user_id\n      } : null\n    });\n  } catch (error) {\n    console.error('Setup status endpoint error:', error);\n    return res.json({ isSetup: false, error: error.message });\n  }\n}","size_bytes":1435},"api/setup/test-current-db.js":{"content":"export default async function handler(req, res) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const currentDbUrl = process.env.DATABASE_URL;\n    if (!currentDbUrl) {\n      return res.json({ valid: false, error: \"No DATABASE_URL environment variable set\" });\n    }\n    \n    // Dynamic import to avoid module issues\n    const { neon } = await import('@neondatabase/serverless');\n    const sql = neon(currentDbUrl);\n    await sql`SELECT 1`;\n    \n    return res.json({ \n      valid: true, \n      message: \"Current database connection works\",\n      hasDbUrl: true\n    });\n  } catch (error) {\n    console.error(\"Current database test error:\", error);\n    return res.json({ valid: false, error: `Database test failed: ${error.message}` });\n  }\n};","size_bytes":810},"api/setup/validate-db.js":{"content":"export default async function handler(req, res) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const { databaseUrl } = req.body;\n    \n    if (!databaseUrl) {\n      return res.status(400).json({ message: 'Database URL is required' });\n    }\n\n    // Dynamic import to avoid module issues\n    const { neon } = await import('@neondatabase/serverless');\n    const sql = neon(databaseUrl);\n    await sql`SELECT 1`;\n    \n    return res.json({ valid: true, message: 'Database connection successful' });\n  } catch (error) {\n    console.error('Database validation error:', error);\n    return res.json({ valid: false, error: `Database validation failed: ${error.message}` });\n  }\n};","size_bytes":742},"api/setup/simple-install.js":{"content":"// Simple installation without dynamic imports\nimport { neon } from '@neondatabase/serverless';\n\nexport default async function handler(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n  \n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    const { databaseUrl, adminUsername, adminPassword } = req.body || {};\n    \n    if (!databaseUrl || !adminUsername || !adminPassword) {\n      return res.status(400).json({ \n        message: 'Missing required fields: databaseUrl, adminUsername, adminPassword' \n      });\n    }\n\n    console.log('Starting simple installation...');\n    \n    // Create database connection\n    const sql = neon(databaseUrl);\n    \n    // Test connection\n    await sql`SELECT 1`;\n    console.log('Database connection successful');\n    \n    // Create basic config table with simple primary key\n    await sql`\n      CREATE TABLE IF NOT EXISTS config (\n        id TEXT PRIMARY KEY,\n        setup_completed BOOLEAN DEFAULT FALSE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n    \n    // Create users table with simple UUID generation\n    await sql`\n      CREATE TABLE IF NOT EXISTS users (\n        id TEXT PRIMARY KEY,\n        username TEXT UNIQUE NOT NULL,\n        password_hash TEXT NOT NULL,\n        email TEXT,\n        is_creator BOOLEAN DEFAULT FALSE,\n        coins INTEGER DEFAULT 0,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `;\n    \n    console.log('Basic tables created');\n    \n    // Generate simple UUID for admin user\n    const adminUserId = Math.random().toString(36).substring(2) + Date.now().toString(36);\n    \n    // Hash password (simple approach without bcrypt for now)\n    const simpleHash = Buffer.from(adminPassword + 'salt123').toString('base64');\n    \n    // Insert admin user\n    await sql`\n      INSERT INTO users (id, username, password_hash, is_creator, coins)\n      VALUES (${adminUserId}, ${adminUsername}, ${simpleHash}, TRUE, 1000)\n      ON CONFLICT (username) DO UPDATE SET\n        password_hash = EXCLUDED.password_hash,\n        is_creator = TRUE,\n        coins = 1000\n    `;\n    \n    // Mark setup as complete\n    await sql`\n      INSERT INTO config (id, setup_completed) \n      VALUES ('main_config', TRUE)\n      ON CONFLICT (id) DO UPDATE SET setup_completed = TRUE\n    `;\n    \n    console.log('Simple installation completed');\n    \n    return res.json({ \n      success: true, \n      message: 'Simple installation completed successfully!' \n    });\n    \n  } catch (error) {\n    console.error('Simple installation error:', error);\n    \n    return res.status(500).json({ \n      success: false, \n      message: `Installation failed: ${error.message}`,\n      error: error.name\n    });\n  }\n}","size_bytes":2760},"api/setup/test-install.js":{"content":"export default async function handler(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n  \n  if (req.method !== 'POST') {\n    return res.status(405).json({ message: 'Method not allowed' });\n  }\n\n  try {\n    console.log('Test install API called');\n    \n    const { databaseUrl, adminUsername, adminPassword } = req.body || {};\n    \n    if (!databaseUrl || !adminUsername || !adminPassword) {\n      return res.status(400).json({ \n        message: 'Missing required fields: databaseUrl, adminUsername, adminPassword' \n      });\n    }\n\n    // Test neon import\n    console.log('Testing neon import...');\n    const { neon } = await import('@neondatabase/serverless');\n    console.log('Neon imported successfully');\n    \n    // Test bcrypt import\n    console.log('Testing bcrypt import...');\n    const bcrypt = await import('bcrypt');\n    console.log('Bcrypt imported successfully');\n    \n    // Test database connection\n    console.log('Testing database connection...');\n    const sql = neon(databaseUrl);\n    await sql`SELECT 1`;\n    console.log('Database connection successful');\n    \n    // Test simple table creation\n    console.log('Testing table creation...');\n    await sql`\n      CREATE TABLE IF NOT EXISTS test_table (\n        id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,\n        name TEXT\n      )\n    `;\n    console.log('Table creation successful');\n    \n    return res.json({ \n      success: true, \n      message: 'Test installation completed successfully!' \n    });\n    \n  } catch (error) {\n    console.error('Test installation error:', error);\n    console.error('Error stack:', error.stack);\n    \n    return res.status(500).json({ \n      success: false, \n      message: `Test failed: ${error.message}`,\n      error: error.name,\n      stack: error.stack\n    });\n  }\n}","size_bytes":1796}}}